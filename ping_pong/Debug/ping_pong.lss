
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f6  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070a  00000000  00000000  000009da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000381  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ae  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000187e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#include <util/delay.h>
#include "UART.h"

int main(void)
{
    DDRB = 0b11111111;  //set PORTB as output
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	87 bb       	out	0x17, r24	; 23
	UART_Init();
  8c:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Init>
        
    /* Replace with your application code */
    while (1)
    {
		PORTB = 0b00000010;
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f e3       	ldi	r18, 0x3F	; 63
  96:	8d e0       	ldi	r24, 0x0D	; 13
  98:	93 e0       	ldi	r25, 0x03	; 3
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x12>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x1c>
  a4:	00 00       	nop
		_delay_ms(1000);
		PORTB = 0b00000000;
  a6:	18 ba       	out	0x18, r1	; 24
  a8:	2f e3       	ldi	r18, 0x3F	; 63
  aa:	8d e0       	ldi	r24, 0x0D	; 13
  ac:	93 e0       	ldi	r25, 0x03	; 3
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x26>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x30>
  b8:	00 00       	nop
  ba:	ea cf       	rjmp	.-44     	; 0x90 <main+0x8>

000000bc <UART_Init>:
#define MYUBRR FOSC/16/BAUD-1

void UART_Init()
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(MYUBRR);
  bc:	8b e0       	ldi	r24, 0x0B	; 11
  be:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (unsigned char)MYUBRR;
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0C = (1<<RXEN0)|(1<<TXEN0);
  c4:	88 e1       	ldi	r24, 0x18	; 24
  c6:	80 bd       	out	0x20, r24	; 32
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
  c8:	8e e8       	ldi	r24, 0x8E	; 142
  ca:	80 bd       	out	0x20, r24	; 32
  cc:	08 95       	ret

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>

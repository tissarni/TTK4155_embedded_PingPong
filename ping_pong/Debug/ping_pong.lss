
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000092  00800100  0000114c  000011e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000114c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800192  00800192  00001272  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021cd  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001116  00000000  00000000  00003701  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011cf  00000000  00000000  00004817  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  000059e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e0  00000000  00000000  00005e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd3  00000000  00000000  0000662c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000071ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ec e4       	ldi	r30, 0x4C	; 76
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 39       	cpi	r26, 0x92	; 146
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	a2 e9       	ldi	r26, 0x92	; 146
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a3 3a       	cpi	r26, 0xA3	; 163
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 9b 02 	call	0x536	; 0x536 <main>
      a6:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:
      ae:	82 e0       	ldi	r24, 0x02	; 2
      b0:	87 bb       	out	0x17, r24	; 23
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	82 bd       	out	0x22, r24	; 34
      b6:	87 b5       	in	r24, 0x27	; 39
      b8:	80 62       	ori	r24, 0x20	; 32
      ba:	87 bd       	out	0x27, r24	; 39
      bc:	87 b5       	in	r24, 0x27	; 39
      be:	88 64       	ori	r24, 0x48	; 72
      c0:	87 bd       	out	0x27, r24	; 39
      c2:	87 b5       	in	r24, 0x27	; 39
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	87 bd       	out	0x27, r24	; 39
      c8:	08 95       	ret

000000ca <ADC_Read>:
      ca:	21 e0       	ldi	r18, 0x01	; 1
      cc:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x125d>
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	60 e0       	ldi	r22, 0x00	; 0
      d6:	70 e0       	ldi	r23, 0x00	; 0
      d8:	0c c0       	rjmp	.+24     	; 0xf2 <ADC_Read+0x28>
      da:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <__bss_end+0x125d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      de:	5c e3       	ldi	r21, 0x3C	; 60
      e0:	5a 95       	dec	r21
      e2:	f1 f7       	brne	.-4      	; 0xe0 <ADC_Read+0x16>
      e4:	28 17       	cp	r18, r24
      e6:	39 07       	cpc	r19, r25
      e8:	11 f4       	brne	.+4      	; 0xee <ADC_Read+0x24>
      ea:	64 2f       	mov	r22, r20
      ec:	70 e0       	ldi	r23, 0x00	; 0
      ee:	2f 5f       	subi	r18, 0xFF	; 255
      f0:	3f 4f       	sbci	r19, 0xFF	; 255
      f2:	24 30       	cpi	r18, 0x04	; 4
      f4:	31 05       	cpc	r19, r1
      f6:	8c f3       	brlt	.-30     	; 0xda <ADC_Read+0x10>
      f8:	cb 01       	movw	r24, r22
      fa:	08 95       	ret

000000fc <can_init>:
#include "mcp2515.h"
#include "SPI.h"


void can_init() {
	mcp_init();
      fc:	0e 94 5f 03 	call	0x6be	; 0x6be <mcp_init>
	mcp_write(MCP_CNF3, 0x05);
     100:	65 e0       	ldi	r22, 0x05	; 5
     102:	88 e2       	ldi	r24, 0x28	; 40
     104:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_write>
	mcp_write(MCP_CNF2, 0xb1);
     108:	61 eb       	ldi	r22, 0xB1	; 177
     10a:	89 e2       	ldi	r24, 0x29	; 41
     10c:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_write>
	mcp_write(MCP_CNF1, 0x03);
     110:	63 e0       	ldi	r22, 0x03	; 3
     112:	8a e2       	ldi	r24, 0x2A	; 42
     114:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_write>
	
	
	mcp_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	60 ee       	ldi	r22, 0xE0	; 224
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	0e 94 75 03 	call	0x6ea	; 0x6ea <mcp_bit_modify>
     122:	08 95       	ret

00000124 <can_send>:
}

	
void can_send(can_message* message) {  //TODO : Synchro clock noeud
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	8c 01       	movw	r16, r24
	mcp_write(MCP_TXB0SIDH, message->id >> 3);
     12e:	fc 01       	movw	r30, r24
     130:	60 81       	ld	r22, Z
     132:	71 81       	ldd	r23, Z+1	; 0x01
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	76 95       	lsr	r23
     13a:	67 95       	ror	r22
     13c:	76 95       	lsr	r23
     13e:	67 95       	ror	r22
     140:	81 e3       	ldi	r24, 0x31	; 49
     142:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_write>
	mcp_write(MCP_TXB0SIDL, message->id << 5);
     146:	f8 01       	movw	r30, r16
     148:	60 81       	ld	r22, Z
     14a:	62 95       	swap	r22
     14c:	66 0f       	add	r22, r22
     14e:	60 7e       	andi	r22, 0xE0	; 224
     150:	82 e3       	ldi	r24, 0x32	; 50
     152:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_write>
	mcp_write(MCP_TXB0DLC, message->length);
     156:	f8 01       	movw	r30, r16
     158:	62 81       	ldd	r22, Z+2	; 0x02
     15a:	85 e3       	ldi	r24, 0x35	; 53
     15c:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_write>
	
	for(int i = 0; i < message->length; i++) {
     160:	c0 e0       	ldi	r28, 0x00	; 0
     162:	d0 e0       	ldi	r29, 0x00	; 0
     164:	09 c0       	rjmp	.+18     	; 0x178 <can_send+0x54>
		mcp_write(MCP_TXB0D0 + (uint8_t)i, message->data[i]);
     166:	f8 01       	movw	r30, r16
     168:	ec 0f       	add	r30, r28
     16a:	fd 1f       	adc	r31, r29
     16c:	63 81       	ldd	r22, Z+3	; 0x03
     16e:	8c 2f       	mov	r24, r28
     170:	8a 5c       	subi	r24, 0xCA	; 202
     172:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_write>
void can_send(can_message* message) {  //TODO : Synchro clock noeud
	mcp_write(MCP_TXB0SIDH, message->id >> 3);
	mcp_write(MCP_TXB0SIDL, message->id << 5);
	mcp_write(MCP_TXB0DLC, message->length);
	
	for(int i = 0; i < message->length; i++) {
     176:	21 96       	adiw	r28, 0x01	; 1
     178:	f8 01       	movw	r30, r16
     17a:	82 81       	ldd	r24, Z+2	; 0x02
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	c8 17       	cp	r28, r24
     180:	d9 07       	cpc	r29, r25
     182:	8c f3       	brlt	.-30     	; 0x166 <can_send+0x42>
		mcp_write(MCP_TXB0D0 + (uint8_t)i, message->data[i]);
	}
	
	mcp_request_send(0);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 2c 03 	call	0x658	; 0x658 <mcp_request_send>
	
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <joystick_calibrate>:
#include "ADC.h"
#include "CAN.h"

volatile joystick_pos mean_pos;

joystick_pos joystick_calibrate(){
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	00 d0       	rcall	.+0      	; 0x1a0 <joystick_calibrate+0xa>
     1a0:	00 d0       	rcall	.+0      	; 0x1a2 <joystick_calibrate+0xc>
     1a2:	1f 92       	push	r1
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
	
	mean_pos.x = ADC_Read(1);
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     1b0:	02 e9       	ldi	r16, 0x92	; 146
     1b2:	11 e0       	ldi	r17, 0x01	; 1
     1b4:	f8 01       	movw	r30, r16
     1b6:	80 83       	st	Z, r24
	mean_pos.y = ADC_Read(0);
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     1c0:	f8 01       	movw	r30, r16
     1c2:	81 83       	std	Z+1, r24	; 0x01
	
	return mean_pos;
     1c4:	85 e0       	ldi	r24, 0x05	; 5
     1c6:	de 01       	movw	r26, r28
     1c8:	11 96       	adiw	r26, 0x01	; 1
     1ca:	01 90       	ld	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	8a 95       	dec	r24
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <joystick_calibrate+0x34>
     1d2:	29 81       	ldd	r18, Y+1	; 0x01
     1d4:	3a 81       	ldd	r19, Y+2	; 0x02
     1d6:	4b 81       	ldd	r20, Y+3	; 0x03
     1d8:	5c 81       	ldd	r21, Y+4	; 0x04
     1da:	6d 81       	ldd	r22, Y+5	; 0x05
}
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	08 95       	ret

000001f6 <get_joystick_dir>:

	
	return pos;
}

joystick_dir get_joystick_dir() {
     1f6:	cf 93       	push	r28
	joystick_dir dir;
	joystick_pos pos;
	pos.x = ADC_Read(1);
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     200:	c8 2f       	mov	r28, r24
	pos.y = ADC_Read(0);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
	dir = NEUTRAL;
	
	
	if (abs(mean_pos.x - pos.x) < 10 & abs(mean_pos.y - pos.y) < 10) 
     20a:	20 91 92 01 	lds	r18, 0x0192	; 0x800192 <__data_end>
     20e:	6c 2f       	mov	r22, r28
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	26 1b       	sub	r18, r22
     216:	37 0b       	sbc	r19, r23
     218:	a9 01       	movw	r20, r18
     21a:	22 f4       	brpl	.+8      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
     21c:	44 27       	eor	r20, r20
     21e:	55 27       	eor	r21, r21
     220:	42 1b       	sub	r20, r18
     222:	53 0b       	sbc	r21, r19
     224:	fa 01       	movw	r30, r20
     226:	20 91 93 01 	lds	r18, 0x0193	; 0x800193 <__data_end+0x1>
     22a:	a8 2f       	mov	r26, r24
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	2a 1b       	sub	r18, r26
     232:	3b 0b       	sbc	r19, r27
     234:	a9 01       	movw	r20, r18
     236:	22 f4       	brpl	.+8      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
     238:	44 27       	eor	r20, r20
     23a:	55 27       	eor	r21, r21
     23c:	42 1b       	sub	r20, r18
     23e:	53 0b       	sbc	r21, r19
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	3a 97       	sbiw	r30, 0x0a	; 10
     244:	0c f0       	brlt	.+2      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	91 e0       	ldi	r25, 0x01	; 1
     24a:	4a 30       	cpi	r20, 0x0A	; 10
     24c:	51 05       	cpc	r21, r1
     24e:	0c f0       	brlt	.+2      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	92 23       	and	r25, r18
     254:	19 f5       	brne	.+70     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
	{
		return NEUTRAL;
	} else {
		if (abs(pos.x - mean_pos.x) > abs(pos.y - mean_pos.y)) {
     256:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <__data_end>
     25a:	69 1b       	sub	r22, r25
     25c:	71 09       	sbc	r23, r1
     25e:	9b 01       	movw	r18, r22
     260:	22 f4       	brpl	.+8      	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
     262:	22 27       	eor	r18, r18
     264:	33 27       	eor	r19, r19
     266:	26 1b       	sub	r18, r22
     268:	37 0b       	sbc	r19, r23
     26a:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
     26e:	a9 1b       	sub	r26, r25
     270:	b1 09       	sbc	r27, r1
     272:	ad 01       	movw	r20, r26
     274:	22 f4       	brpl	.+8      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
     276:	44 27       	eor	r20, r20
     278:	55 27       	eor	r21, r21
     27a:	4a 1b       	sub	r20, r26
     27c:	5b 0b       	sbc	r21, r27
     27e:	42 17       	cp	r20, r18
     280:	53 07       	cpc	r21, r19
     282:	34 f4       	brge	.+12     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
			if (pos.x > mean_pos.x) {
     284:	80 91 92 01 	lds	r24, 0x0192	; 0x800192 <__data_end>
     288:	8c 17       	cp	r24, r28
     28a:	50 f4       	brcc	.+20     	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
				return RIGHT;
     28c:	83 e0       	ldi	r24, 0x03	; 3
     28e:	0b c0       	rjmp	.+22     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
			} else {
				return LEFT;
			}
		} else {
			if (pos.y > mean_pos.y) {
     290:	90 91 93 01 	lds	r25, 0x0193	; 0x800193 <__data_end+0x1>
     294:	98 17       	cp	r25, r24
     296:	30 f4       	brcc	.+12     	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
				return UP;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	05 c0       	rjmp	.+10     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
	dir = NEUTRAL;
	
	
	if (abs(mean_pos.x - pos.x) < 10 & abs(mean_pos.y - pos.y) < 10) 
	{
		return NEUTRAL;
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	03 c0       	rjmp	.+6      	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
	} else {
		if (abs(pos.x - mean_pos.x) > abs(pos.y - mean_pos.y)) {
			if (pos.x > mean_pos.x) {
				return RIGHT;
			} else {
				return LEFT;
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
			}
		} else {
			if (pos.y > mean_pos.y) {
				return UP;
			} else {
				return DOWN;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return dir;
	
}
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <get_joystick_pos>:
	mean_pos.y = ADC_Read(0);
	
	return mean_pos;
}

joystick_pos get_joystick_pos(){
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	2a 97       	sbiw	r28, 0x0a	; 10
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
	joystick_pos pos;
	joystick_dir dir;
	
	dir = get_joystick_dir();
     2be:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <get_joystick_dir>
	
	
	switch (dir)
     2c2:	82 30       	cpi	r24, 0x02	; 2
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <get_joystick_pos+0x1e>
     2c6:	89 c0       	rjmp	.+274    	; 0x3da <get_joystick_pos+0x130>
     2c8:	30 f4       	brcc	.+12     	; 0x2d6 <get_joystick_pos+0x2c>
     2ca:	88 23       	and	r24, r24
     2cc:	59 f0       	breq	.+22     	; 0x2e4 <get_joystick_pos+0x3a>
     2ce:	81 30       	cpi	r24, 0x01	; 1
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <get_joystick_pos+0x2a>
     2d2:	c7 c0       	rjmp	.+398    	; 0x462 <__DATA_REGION_LENGTH__+0x62>
     2d4:	0e c1       	rjmp	.+540    	; 0x4f2 <__DATA_REGION_LENGTH__+0xf2>
     2d6:	83 30       	cpi	r24, 0x03	; 3
     2d8:	09 f4       	brne	.+2      	; 0x2dc <get_joystick_pos+0x32>
     2da:	41 c0       	rjmp	.+130    	; 0x35e <get_joystick_pos+0xb4>
     2dc:	84 30       	cpi	r24, 0x04	; 4
     2de:	09 f4       	brne	.+2      	; 0x2e2 <get_joystick_pos+0x38>
     2e0:	04 c1       	rjmp	.+520    	; 0x4ea <__DATA_REGION_LENGTH__+0xea>
     2e2:	07 c1       	rjmp	.+526    	; 0x4f2 <__DATA_REGION_LENGTH__+0xf2>
	{
	case UP:
		pos.y = (uint8_t)abs(((ADC_Read(0) - mean_pos.y) * 100) / (223 - mean_pos.y));
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     2ec:	e2 e9       	ldi	r30, 0x92	; 146
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	21 81       	ldd	r18, Z+1	; 0x01
     2f2:	82 1b       	sub	r24, r18
     2f4:	91 09       	sbc	r25, r1
     2f6:	9c 01       	movw	r18, r24
     2f8:	44 e6       	ldi	r20, 0x64	; 100
     2fa:	42 9f       	mul	r20, r18
     2fc:	c0 01       	movw	r24, r0
     2fe:	43 9f       	mul	r20, r19
     300:	90 0d       	add	r25, r0
     302:	11 24       	eor	r1, r1
     304:	21 81       	ldd	r18, Z+1	; 0x01
     306:	6f ed       	ldi	r22, 0xDF	; 223
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	62 1b       	sub	r22, r18
     30c:	71 09       	sbc	r23, r1
     30e:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
     312:	cb 01       	movw	r24, r22
     314:	99 23       	and	r25, r25
     316:	24 f4       	brge	.+8      	; 0x320 <get_joystick_pos+0x76>
     318:	88 27       	eor	r24, r24
     31a:	99 27       	eor	r25, r25
     31c:	86 1b       	sub	r24, r22
     31e:	97 0b       	sbc	r25, r23
     320:	8f 83       	std	Y+7, r24	; 0x07
		pos.x = (uint8_t)abs(((ADC_Read(1) - mean_pos.x) * 100) / mean_pos.x);
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     32a:	e2 e9       	ldi	r30, 0x92	; 146
     32c:	f1 e0       	ldi	r31, 0x01	; 1
     32e:	20 81       	ld	r18, Z
     330:	82 1b       	sub	r24, r18
     332:	91 09       	sbc	r25, r1
     334:	9c 01       	movw	r18, r24
     336:	44 e6       	ldi	r20, 0x64	; 100
     338:	42 9f       	mul	r20, r18
     33a:	c0 01       	movw	r24, r0
     33c:	43 9f       	mul	r20, r19
     33e:	90 0d       	add	r25, r0
     340:	11 24       	eor	r1, r1
     342:	60 81       	ld	r22, Z
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
     34a:	cb 01       	movw	r24, r22
     34c:	99 23       	and	r25, r25
     34e:	24 f4       	brge	.+8      	; 0x358 <get_joystick_pos+0xae>
     350:	88 27       	eor	r24, r24
     352:	99 27       	eor	r25, r25
     354:	86 1b       	sub	r24, r22
     356:	97 0b       	sbc	r25, r23
     358:	8e 83       	std	Y+6, r24	; 0x06
		pos.dir = UP;
     35a:	18 86       	std	Y+8, r1	; 0x08
		//printf("Direction : UP ");
		break;
     35c:	ca c0       	rjmp	.+404    	; 0x4f2 <__DATA_REGION_LENGTH__+0xf2>
	case RIGHT:
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / (223 - mean_pos.x));
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     366:	e2 e9       	ldi	r30, 0x92	; 146
     368:	f1 e0       	ldi	r31, 0x01	; 1
     36a:	20 81       	ld	r18, Z
     36c:	82 1b       	sub	r24, r18
     36e:	91 09       	sbc	r25, r1
     370:	9c 01       	movw	r18, r24
     372:	44 e6       	ldi	r20, 0x64	; 100
     374:	42 9f       	mul	r20, r18
     376:	c0 01       	movw	r24, r0
     378:	43 9f       	mul	r20, r19
     37a:	90 0d       	add	r25, r0
     37c:	11 24       	eor	r1, r1
     37e:	20 81       	ld	r18, Z
     380:	6f ed       	ldi	r22, 0xDF	; 223
     382:	70 e0       	ldi	r23, 0x00	; 0
     384:	62 1b       	sub	r22, r18
     386:	71 09       	sbc	r23, r1
     388:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
     38c:	cb 01       	movw	r24, r22
     38e:	99 23       	and	r25, r25
     390:	24 f4       	brge	.+8      	; 0x39a <get_joystick_pos+0xf0>
     392:	88 27       	eor	r24, r24
     394:	99 27       	eor	r25, r25
     396:	86 1b       	sub	r24, r22
     398:	97 0b       	sbc	r25, r23
     39a:	8e 83       	std	Y+6, r24	; 0x06
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / mean_pos.y);
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     3a4:	e2 e9       	ldi	r30, 0x92	; 146
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	21 81       	ldd	r18, Z+1	; 0x01
     3aa:	82 1b       	sub	r24, r18
     3ac:	91 09       	sbc	r25, r1
     3ae:	9c 01       	movw	r18, r24
     3b0:	44 e6       	ldi	r20, 0x64	; 100
     3b2:	42 9f       	mul	r20, r18
     3b4:	c0 01       	movw	r24, r0
     3b6:	43 9f       	mul	r20, r19
     3b8:	90 0d       	add	r25, r0
     3ba:	11 24       	eor	r1, r1
     3bc:	61 81       	ldd	r22, Z+1	; 0x01
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
     3c4:	cb 01       	movw	r24, r22
     3c6:	99 23       	and	r25, r25
     3c8:	24 f4       	brge	.+8      	; 0x3d2 <get_joystick_pos+0x128>
     3ca:	88 27       	eor	r24, r24
     3cc:	99 27       	eor	r25, r25
     3ce:	86 1b       	sub	r24, r22
     3d0:	97 0b       	sbc	r25, r23
     3d2:	8f 83       	std	Y+7, r24	; 0x07
		pos.dir = RIGHT;
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	88 87       	std	Y+8, r24	; 0x08
		//printf("Direction : RIGHT ");
		break;
     3d8:	8c c0       	rjmp	.+280    	; 0x4f2 <__DATA_REGION_LENGTH__+0xf2>
	case LEFT:
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / abs(3 - mean_pos.x));
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     3e2:	e2 e9       	ldi	r30, 0x92	; 146
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	20 81       	ld	r18, Z
     3e8:	82 1b       	sub	r24, r18
     3ea:	91 09       	sbc	r25, r1
     3ec:	9c 01       	movw	r18, r24
     3ee:	44 e6       	ldi	r20, 0x64	; 100
     3f0:	42 9f       	mul	r20, r18
     3f2:	c0 01       	movw	r24, r0
     3f4:	43 9f       	mul	r20, r19
     3f6:	90 0d       	add	r25, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	40 81       	ld	r20, Z
     3fc:	23 e0       	ldi	r18, 0x03	; 3
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	24 1b       	sub	r18, r20
     402:	31 09       	sbc	r19, r1
     404:	b9 01       	movw	r22, r18
     406:	22 f4       	brpl	.+8      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
     408:	66 27       	eor	r22, r22
     40a:	77 27       	eor	r23, r23
     40c:	62 1b       	sub	r22, r18
     40e:	73 0b       	sbc	r23, r19
     410:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
     414:	cb 01       	movw	r24, r22
     416:	99 23       	and	r25, r25
     418:	24 f4       	brge	.+8      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
     41a:	88 27       	eor	r24, r24
     41c:	99 27       	eor	r25, r25
     41e:	86 1b       	sub	r24, r22
     420:	97 0b       	sbc	r25, r23
     422:	8e 83       	std	Y+6, r24	; 0x06
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / mean_pos.y);
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     42c:	e2 e9       	ldi	r30, 0x92	; 146
     42e:	f1 e0       	ldi	r31, 0x01	; 1
     430:	21 81       	ldd	r18, Z+1	; 0x01
     432:	82 1b       	sub	r24, r18
     434:	91 09       	sbc	r25, r1
     436:	9c 01       	movw	r18, r24
     438:	44 e6       	ldi	r20, 0x64	; 100
     43a:	42 9f       	mul	r20, r18
     43c:	c0 01       	movw	r24, r0
     43e:	43 9f       	mul	r20, r19
     440:	90 0d       	add	r25, r0
     442:	11 24       	eor	r1, r1
     444:	61 81       	ldd	r22, Z+1	; 0x01
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
     44c:	cb 01       	movw	r24, r22
     44e:	99 23       	and	r25, r25
     450:	24 f4       	brge	.+8      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
     452:	88 27       	eor	r24, r24
     454:	99 27       	eor	r25, r25
     456:	86 1b       	sub	r24, r22
     458:	97 0b       	sbc	r25, r23
     45a:	8f 83       	std	Y+7, r24	; 0x07
		pos.dir = LEFT;
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	88 87       	std	Y+8, r24	; 0x08
		//printf("Direction : LEFT ");
		break;
     460:	48 c0       	rjmp	.+144    	; 0x4f2 <__DATA_REGION_LENGTH__+0xf2>
	case DOWN:
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / abs(3 - mean_pos.y));
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     46a:	e2 e9       	ldi	r30, 0x92	; 146
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	21 81       	ldd	r18, Z+1	; 0x01
     470:	82 1b       	sub	r24, r18
     472:	91 09       	sbc	r25, r1
     474:	9c 01       	movw	r18, r24
     476:	44 e6       	ldi	r20, 0x64	; 100
     478:	42 9f       	mul	r20, r18
     47a:	c0 01       	movw	r24, r0
     47c:	43 9f       	mul	r20, r19
     47e:	90 0d       	add	r25, r0
     480:	11 24       	eor	r1, r1
     482:	41 81       	ldd	r20, Z+1	; 0x01
     484:	23 e0       	ldi	r18, 0x03	; 3
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	24 1b       	sub	r18, r20
     48a:	31 09       	sbc	r19, r1
     48c:	b9 01       	movw	r22, r18
     48e:	22 f4       	brpl	.+8      	; 0x498 <__DATA_REGION_LENGTH__+0x98>
     490:	66 27       	eor	r22, r22
     492:	77 27       	eor	r23, r23
     494:	62 1b       	sub	r22, r18
     496:	73 0b       	sbc	r23, r19
     498:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
     49c:	cb 01       	movw	r24, r22
     49e:	99 23       	and	r25, r25
     4a0:	24 f4       	brge	.+8      	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
     4a2:	88 27       	eor	r24, r24
     4a4:	99 27       	eor	r25, r25
     4a6:	86 1b       	sub	r24, r22
     4a8:	97 0b       	sbc	r25, r23
     4aa:	8f 83       	std	Y+7, r24	; 0x07
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / mean_pos.x);
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     4b4:	e2 e9       	ldi	r30, 0x92	; 146
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	20 81       	ld	r18, Z
     4ba:	82 1b       	sub	r24, r18
     4bc:	91 09       	sbc	r25, r1
     4be:	9c 01       	movw	r18, r24
     4c0:	44 e6       	ldi	r20, 0x64	; 100
     4c2:	42 9f       	mul	r20, r18
     4c4:	c0 01       	movw	r24, r0
     4c6:	43 9f       	mul	r20, r19
     4c8:	90 0d       	add	r25, r0
     4ca:	11 24       	eor	r1, r1
     4cc:	60 81       	ld	r22, Z
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	0e 94 0f 04 	call	0x81e	; 0x81e <__divmodhi4>
     4d4:	cb 01       	movw	r24, r22
     4d6:	99 23       	and	r25, r25
     4d8:	24 f4       	brge	.+8      	; 0x4e2 <__DATA_REGION_LENGTH__+0xe2>
     4da:	88 27       	eor	r24, r24
     4dc:	99 27       	eor	r25, r25
     4de:	86 1b       	sub	r24, r22
     4e0:	97 0b       	sbc	r25, r23
     4e2:	8e 83       	std	Y+6, r24	; 0x06
		pos.dir = DOWN;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	88 87       	std	Y+8, r24	; 0x08
		//printf("Direction : DOWN ");
		break;
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <__DATA_REGION_LENGTH__+0xf2>
	case NEUTRAL:
		pos.x = 0;
     4ea:	1e 82       	std	Y+6, r1	; 0x06
		pos.y = 0;
     4ec:	1f 82       	std	Y+7, r1	; 0x07
		pos.dir = NEUTRAL;
     4ee:	84 e0       	ldi	r24, 0x04	; 4
     4f0:	88 87       	std	Y+8, r24	; 0x08
		//printf("Direction : NEUTRE ");
	}
	

	
	return pos;
     4f2:	85 e0       	ldi	r24, 0x05	; 5
     4f4:	fe 01       	movw	r30, r28
     4f6:	36 96       	adiw	r30, 0x06	; 6
     4f8:	de 01       	movw	r26, r28
     4fa:	11 96       	adiw	r26, 0x01	; 1
     4fc:	01 90       	ld	r0, Z+
     4fe:	0d 92       	st	X+, r0
     500:	8a 95       	dec	r24
     502:	e1 f7       	brne	.-8      	; 0x4fc <__DATA_REGION_LENGTH__+0xfc>
     504:	29 81       	ldd	r18, Y+1	; 0x01
     506:	3a 81       	ldd	r19, Y+2	; 0x02
     508:	4b 81       	ldd	r20, Y+3	; 0x03
     50a:	5c 81       	ldd	r21, Y+4	; 0x04
     50c:	6d 81       	ldd	r22, Y+5	; 0x05
}
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	2a 96       	adiw	r28, 0x0a	; 10
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <joystick_button>:
	
}

int joystick_button() {
	int x = 0;
	if ((PIND & 0b00100000) != 0b00100000) {
     526:	85 9b       	sbis	0x10, 5	; 16
     528:	03 c0       	rjmp	.+6      	; 0x530 <joystick_button+0xa>
	return dir;
	
}

int joystick_button() {
	int x = 0;
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	08 95       	ret
	if ((PIND & 0b00100000) != 0b00100000) {
		x = 1;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
		
	}
	//printf("\r\n Joystick button %d ",x);
	return x;
}
     534:	08 95       	ret

00000536 <main>:
#define FOSC 4915200// Clock Speed
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

int main(void)
{
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
     53e:	60 97       	sbiw	r28, 0x10	; 16
     540:	0f b6       	in	r0, 0x3f	; 63
     542:	f8 94       	cli
     544:	de bf       	out	0x3e, r29	; 62
     546:	0f be       	out	0x3f, r0	; 63
     548:	cd bf       	out	0x3d, r28	; 61
			

	//Drivers init
	UART_Init(MYUBRR);
     54a:	8f e1       	ldi	r24, 0x1F	; 31
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 02 04 	call	0x804	; 0x804 <UART_Init>
	SRAM_Init();
     552:	0e 94 ef 03 	call	0x7de	; 0x7de <SRAM_Init>
	ADC_Init();
     556:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	joystick_calibrate();
     55a:	0e 94 cb 00 	call	0x196	; 0x196 <joystick_calibrate>
	OLED_init();
     55e:	0e 94 96 03 	call	0x72c	; 0x72c <OLED_init>
	can_init();
     562:	0e 94 7e 00 	call	0xfc	; 0xfc <can_init>
	////Ports setting 
	//DDRE = 0b11111111;
    //DDRA = 0b11111111; 
	//DDRD |= 0b11000000;
	//DDRC = DDRC | 0b00001111;
	PORTE = 0b00000010;
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	87 b9       	out	0x07, r24	; 7
	//PORTA = 0b00000000;
	//PORTB = (0<<PB1)|(0<<PB0);
	//PORTD = (1<<PD6)|(1<<PD7);
	//PORTC =0b00000000;
	
	DDRE &= ~(1 << PE0);
     56a:	86 b1       	in	r24, 0x06	; 6
     56c:	8e 7f       	andi	r24, 0xFE	; 254
     56e:	86 b9       	out	0x06, r24	; 6
	GICR &= 0b00000111;
     570:	8b b7       	in	r24, 0x3b	; 59
     572:	87 70       	andi	r24, 0x07	; 7
     574:	8b bf       	out	0x3b, r24	; 59
	EMCUCR &= ~(1 << ISC2);
     576:	86 b7       	in	r24, 0x36	; 54
     578:	8e 7f       	andi	r24, 0xFE	; 254
     57a:	86 bf       	out	0x36, r24	; 54
	GIFR |= (1 << INTF2);
     57c:	8a b7       	in	r24, 0x3a	; 58
     57e:	80 62       	ori	r24, 0x20	; 32
     580:	8a bf       	out	0x3a, r24	; 58
	//GICR |= (1 << INT2);
	sei();
     582:	78 94       	sei
  
  
	can_message to_send;
	can_message received;
	int i = 0;
	to_send.length=4;
     584:	84 e0       	ldi	r24, 0x04	; 4
     586:	8b 83       	std	Y+3, r24	; 0x03
	to_send.id = 54;
     588:	86 e3       	ldi	r24, 0x36	; 54
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9a 83       	std	Y+2, r25	; 0x02
     58e:	89 83       	std	Y+1, r24	; 0x01
		 //printf("RECEIVE => length:  %d \n\rid: %d \n\rdata: %s \n\r", receive.length, receive.id, receive.data);
		 
		 //printf("----------------------------------------------------------------------------------------------------------------------\n\r");
		joystick_pos pos;
		i++;
		pos = get_joystick_pos();
     590:	0e 94 55 01 	call	0x2aa	; 0x2aa <get_joystick_pos>
     594:	2c 87       	std	Y+12, r18	; 0x0c
     596:	3d 87       	std	Y+13, r19	; 0x0d
     598:	4e 87       	std	Y+14, r20	; 0x0e
     59a:	5f 87       	std	Y+15, r21	; 0x0f
     59c:	68 8b       	std	Y+16, r22	; 0x10
		pos.button = joystick_button();
     59e:	0e 94 93 02 	call	0x526	; 0x526 <joystick_button>
		//to_send.id = 12;
		//to_send.length = 1;
		to_send.data[0] = pos.y;
     5a2:	9d 85       	ldd	r25, Y+13	; 0x0d
     5a4:	9c 83       	std	Y+4, r25	; 0x04
		//to_send.data[0] = pos.x;
		//to_send.data[0] = pos.y;
		to_send.data[1] = pos.x;
     5a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a8:	9d 83       	std	Y+5, r25	; 0x05
		to_send.data[2] = pos.dir;
     5aa:	9e 85       	ldd	r25, Y+14	; 0x0e
     5ac:	9e 83       	std	Y+6, r25	; 0x06
		to_send.data[3] = pos.button;
     5ae:	8f 83       	std	Y+7, r24	; 0x07
		
		can_send(&to_send);
     5b0:	ce 01       	movw	r24, r28
     5b2:	01 96       	adiw	r24, 0x01	; 1
     5b4:	0e 94 92 00 	call	0x124	; 0x124 <can_send>
		//send_joystick_pos(&to_send);
			
		printf("Vertical : %d      Horizontal  %d   DIR : %s \r\n button : %d     \r\n", to_send.data[0], to_send.data[1], (to_send.data[2] == RIGHT) ? "rigth" : "de lamerde", to_send.data[3]);
     5b8:	4f 81       	ldd	r20, Y+7	; 0x07
     5ba:	8e 81       	ldd	r24, Y+6	; 0x06
     5bc:	83 30       	cpi	r24, 0x03	; 3
     5be:	19 f4       	brne	.+6      	; 0x5c6 <main+0x90>
     5c0:	86 e0       	ldi	r24, 0x06	; 6
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <main+0x94>
     5c6:	8c e0       	ldi	r24, 0x0C	; 12
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	3d 81       	ldd	r19, Y+5	; 0x05
     5cc:	2c 81       	ldd	r18, Y+4	; 0x04
     5ce:	1f 92       	push	r1
     5d0:	4f 93       	push	r20
     5d2:	9f 93       	push	r25
     5d4:	8f 93       	push	r24
     5d6:	1f 92       	push	r1
     5d8:	3f 93       	push	r19
     5da:	1f 92       	push	r1
     5dc:	2f 93       	push	r18
     5de:	87 e1       	ldi	r24, 0x17	; 23
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 82 04 	call	0x904	; 0x904 <printf>
     5ea:	2f ef       	ldi	r18, 0xFF	; 255
     5ec:	8f e7       	ldi	r24, 0x7F	; 127
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	21 50       	subi	r18, 0x01	; 1
     5f2:	80 40       	sbci	r24, 0x00	; 0
     5f4:	90 40       	sbci	r25, 0x00	; 0
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <main+0xba>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <main+0xc4>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0xc6>
		_delay_ms(1000);*/
		
		
		
		//_delay_ms(5000);
    }
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	c4 cf       	rjmp	.-120    	; 0x590 <main+0x5a>

00000608 <mcp_read>:
		PORTB &= ~(1 << PINB4);
		
		SPI_MasterTransmit(MCP_READ_STATUS);
		result = SPI_MaserRead();
		
		PORTB |= (1 << PINB4);
     608:	cf 93       	push	r28
     60a:	c8 2f       	mov	r28, r24
     60c:	88 b3       	in	r24, 0x18	; 24
     60e:	8f 7e       	andi	r24, 0xEF	; 239
     610:	88 bb       	out	0x18, r24	; 24
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     618:	8c 2f       	mov	r24, r28
     61a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     61e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <SPI_MaserRead>
     622:	98 b3       	in	r25, 0x18	; 24
     624:	90 61       	ori	r25, 0x10	; 16
     626:	98 bb       	out	0x18, r25	; 24
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <mcp_write>:
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
     630:	d8 2f       	mov	r29, r24
     632:	c6 2f       	mov	r28, r22
     634:	88 b3       	in	r24, 0x18	; 24
     636:	8f 7e       	andi	r24, 0xEF	; 239
     638:	88 bb       	out	0x18, r24	; 24
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     640:	8d 2f       	mov	r24, r29
     642:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     646:	8c 2f       	mov	r24, r28
     648:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     64c:	88 b3       	in	r24, 0x18	; 24
     64e:	80 61       	ori	r24, 0x10	; 16
     650:	88 bb       	out	0x18, r24	; 24
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <mcp_request_send>:
     658:	9c 01       	movw	r18, r24
     65a:	98 b3       	in	r25, 0x18	; 24
     65c:	9f 7e       	andi	r25, 0xEF	; 239
     65e:	98 bb       	out	0x18, r25	; 24
     660:	21 30       	cpi	r18, 0x01	; 1
     662:	31 05       	cpc	r19, r1
     664:	79 f0       	breq	.+30     	; 0x684 <mcp_request_send+0x2c>
     666:	1c f4       	brge	.+6      	; 0x66e <mcp_request_send+0x16>
     668:	23 2b       	or	r18, r19
     66a:	41 f0       	breq	.+16     	; 0x67c <mcp_request_send+0x24>
     66c:	17 c0       	rjmp	.+46     	; 0x69c <mcp_request_send+0x44>
     66e:	22 30       	cpi	r18, 0x02	; 2
     670:	31 05       	cpc	r19, r1
     672:	61 f0       	breq	.+24     	; 0x68c <mcp_request_send+0x34>
     674:	23 30       	cpi	r18, 0x03	; 3
     676:	31 05       	cpc	r19, r1
     678:	69 f0       	breq	.+26     	; 0x694 <mcp_request_send+0x3c>
     67a:	10 c0       	rjmp	.+32     	; 0x69c <mcp_request_send+0x44>
     67c:	81 e8       	ldi	r24, 0x81	; 129
     67e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     682:	0f c0       	rjmp	.+30     	; 0x6a2 <mcp_request_send+0x4a>
     684:	82 e8       	ldi	r24, 0x82	; 130
     686:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     68a:	0b c0       	rjmp	.+22     	; 0x6a2 <mcp_request_send+0x4a>
     68c:	84 e8       	ldi	r24, 0x84	; 132
     68e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     692:	07 c0       	rjmp	.+14     	; 0x6a2 <mcp_request_send+0x4a>
     694:	87 e8       	ldi	r24, 0x87	; 135
     696:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <mcp_request_send+0x4a>
     69c:	80 e8       	ldi	r24, 0x80	; 128
     69e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     6a2:	88 b3       	in	r24, 0x18	; 24
     6a4:	80 61       	ori	r24, 0x10	; 16
     6a6:	88 bb       	out	0x18, r24	; 24
     6a8:	08 95       	ret

000006aa <mcp_reset>:
     6aa:	88 b3       	in	r24, 0x18	; 24
     6ac:	8f 7e       	andi	r24, 0xEF	; 239
     6ae:	88 bb       	out	0x18, r24	; 24
     6b0:	80 ec       	ldi	r24, 0xC0	; 192
     6b2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     6b6:	88 b3       	in	r24, 0x18	; 24
     6b8:	80 61       	ori	r24, 0x10	; 16
     6ba:	88 bb       	out	0x18, r24	; 24
     6bc:	08 95       	ret

000006be <mcp_init>:
     6be:	0e 94 dd 03 	call	0x7ba	; 0x7ba <SPI_MasterInit>
     6c2:	0e 94 55 03 	call	0x6aa	; 0x6aa <mcp_reset>
     6c6:	8e e0       	ldi	r24, 0x0E	; 14
     6c8:	0e 94 04 03 	call	0x608	; 0x608 <mcp_read>
     6cc:	80 7e       	andi	r24, 0xE0	; 224
     6ce:	80 38       	cpi	r24, 0x80	; 128
     6d0:	51 f0       	breq	.+20     	; 0x6e6 <mcp_init+0x28>
     6d2:	8a e5       	ldi	r24, 0x5A	; 90
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	9f 93       	push	r25
     6d8:	8f 93       	push	r24
     6da:	0e 94 82 04 	call	0x904	; 0x904 <printf>
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	08 95       	ret

000006ea <mcp_bit_modify>:
		return result ;
	};
	
void mcp_bit_modify(uint8_t address_register, uint8_t mask, uint8_t data) {  // NOT FOR ALL REGISTERS. SEE REGISTER MAP.
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	18 2f       	mov	r17, r24
     6f2:	d6 2f       	mov	r29, r22
     6f4:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PINB4);
     6f6:	88 b3       	in	r24, 0x18	; 24
     6f8:	8f 7e       	andi	r24, 0xEF	; 239
     6fa:	88 bb       	out	0x18, r24	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
     6fc:	85 e0       	ldi	r24, 0x05	; 5
     6fe:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
	SPI_MasterTransmit(address_register);
     702:	81 2f       	mov	r24, r17
     704:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
     708:	8d 2f       	mov	r24, r29
     70a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     70e:	8c 2f       	mov	r24, r28
     710:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
	
	PORTB |= (1 << PINB4);
     714:	88 b3       	in	r24, 0x18	; 24
     716:	80 61       	ori	r24, 0x10	; 16
     718:	88 bb       	out	0x18, r24	; 24
};
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	08 95       	ret

00000722 <oled_write_c>:
	oled_write_c(0xaf); // display on
	
}

void oled_write_c(uint8_t command) {
	xmem_write(command, 0x0000);
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	0e 94 f6 03 	call	0x7ec	; 0x7ec <xmem_write>
     72a:	08 95       	ret

0000072c <OLED_init>:
volatile oled_pos current_pos;


void OLED_init()
{
	current_pos.page = 0x00;
     72c:	e7 e9       	ldi	r30, 0x97	; 151
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	10 82       	st	Z, r1
	current_pos.column = 0x00;
     732:	11 82       	std	Z+1, r1	; 0x01
	
	
	oled_write_c(0xae); // display off
     734:	8e ea       	ldi	r24, 0xAE	; 174
     736:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xa1); //segment remap
     73a:	81 ea       	ldi	r24, 0xA1	; 161
     73c:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xda); //common pads hardware: alternative
     740:	8a ed       	ldi	r24, 0xDA	; 218
     742:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x12);
     746:	82 e1       	ldi	r24, 0x12	; 18
     748:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xc8); //common output scan direction:com63~com0
     74c:	88 ec       	ldi	r24, 0xC8	; 200
     74e:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xa8); //multiplex ration mode:63
     752:	88 ea       	ldi	r24, 0xA8	; 168
     754:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x3f);
     758:	8f e3       	ldi	r24, 0x3F	; 63
     75a:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xd5); //display divide ratio/osc. freq. mode
     75e:	85 ed       	ldi	r24, 0xD5	; 213
     760:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x80);
     764:	80 e8       	ldi	r24, 0x80	; 128
     766:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x81); //contrast control
     76a:	81 e8       	ldi	r24, 0x81	; 129
     76c:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x50);
     770:	80 e5       	ldi	r24, 0x50	; 80
     772:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xd9); //set pre-charge period
     776:	89 ed       	ldi	r24, 0xD9	; 217
     778:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x21);
     77c:	81 e2       	ldi	r24, 0x21	; 33
     77e:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x20); //Set Memory Addressing Mode
     782:	80 e2       	ldi	r24, 0x20	; 32
     784:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x02);
     788:	82 e0       	ldi	r24, 0x02	; 2
     78a:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xdb); //VCOM deselect level mode
     78e:	8b ed       	ldi	r24, 0xDB	; 219
     790:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x30);
     794:	80 e3       	ldi	r24, 0x30	; 48
     796:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xad); //master configuration
     79a:	8d ea       	ldi	r24, 0xAD	; 173
     79c:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0x00);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xa4); //out follows RAM content
     7a6:	84 ea       	ldi	r24, 0xA4	; 164
     7a8:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xa6); //set normal display
     7ac:	86 ea       	ldi	r24, 0xA6	; 166
     7ae:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
	oled_write_c(0xaf); // display on
     7b2:	8f ea       	ldi	r24, 0xAF	; 175
     7b4:	0e 94 91 03 	call	0x722	; 0x722 <oled_write_c>
     7b8:	08 95       	ret

000007ba <SPI_MasterInit>:
     7ba:	87 b3       	in	r24, 0x17	; 23
     7bc:	80 6b       	ori	r24, 0xB0	; 176
     7be:	87 bb       	out	0x17, r24	; 23
     7c0:	8d b1       	in	r24, 0x0d	; 13
     7c2:	81 65       	ori	r24, 0x51	; 81
     7c4:	8d b9       	out	0x0d, r24	; 13
     7c6:	08 95       	ret

000007c8 <SPI_MasterTransmit>:
     7c8:	8f b9       	out	0x0f, r24	; 15
     7ca:	77 9b       	sbis	0x0e, 7	; 14
     7cc:	fe cf       	rjmp	.-4      	; 0x7ca <SPI_MasterTransmit+0x2>
     7ce:	08 95       	ret

000007d0 <SPI_MaserRead>:
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <SPI_MasterTransmit>
     7d6:	77 9b       	sbis	0x0e, 7	; 14
     7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <SPI_MaserRead+0x6>
     7da:	8f b1       	in	r24, 0x0f	; 15
     7dc:	08 95       	ret

000007de <SRAM_Init>:
     7de:	85 b7       	in	r24, 0x35	; 53
     7e0:	80 68       	ori	r24, 0x80	; 128
     7e2:	85 bf       	out	0x35, r24	; 53
     7e4:	80 b7       	in	r24, 0x30	; 48
     7e6:	88 60       	ori	r24, 0x08	; 8
     7e8:	80 bf       	out	0x30, r24	; 48
     7ea:	08 95       	ret

000007ec <xmem_write>:
     7ec:	fb 01       	movw	r30, r22
     7ee:	f0 5f       	subi	r31, 0xF0	; 240
     7f0:	80 83       	st	Z, r24
     7f2:	08 95       	ret

000007f4 <UART_Transmit>:
     7f4:	5d 9b       	sbis	0x0b, 5	; 11
     7f6:	fe cf       	rjmp	.-4      	; 0x7f4 <UART_Transmit>
     7f8:	8c b9       	out	0x0c, r24	; 12
     7fa:	08 95       	ret

000007fc <UART_Receive>:
     7fc:	5f 9b       	sbis	0x0b, 7	; 11
     7fe:	fe cf       	rjmp	.-4      	; 0x7fc <UART_Receive>
     800:	8c b1       	in	r24, 0x0c	; 12
     802:	08 95       	ret

00000804 <UART_Init>:
     804:	90 bd       	out	0x20, r25	; 32
     806:	89 b9       	out	0x09, r24	; 9
     808:	88 e1       	ldi	r24, 0x18	; 24
     80a:	8a b9       	out	0x0a, r24	; 10
     80c:	8e e8       	ldi	r24, 0x8E	; 142
     80e:	80 bd       	out	0x20, r24	; 32
     810:	6e ef       	ldi	r22, 0xFE	; 254
     812:	73 e0       	ldi	r23, 0x03	; 3
     814:	8a ef       	ldi	r24, 0xFA	; 250
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	0e 94 37 04 	call	0x86e	; 0x86e <fdevopen>
     81c:	08 95       	ret

0000081e <__divmodhi4>:
     81e:	97 fb       	bst	r25, 7
     820:	07 2e       	mov	r0, r23
     822:	16 f4       	brtc	.+4      	; 0x828 <__divmodhi4+0xa>
     824:	00 94       	com	r0
     826:	07 d0       	rcall	.+14     	; 0x836 <__divmodhi4_neg1>
     828:	77 fd       	sbrc	r23, 7
     82a:	09 d0       	rcall	.+18     	; 0x83e <__divmodhi4_neg2>
     82c:	0e 94 23 04 	call	0x846	; 0x846 <__udivmodhi4>
     830:	07 fc       	sbrc	r0, 7
     832:	05 d0       	rcall	.+10     	; 0x83e <__divmodhi4_neg2>
     834:	3e f4       	brtc	.+14     	; 0x844 <__divmodhi4_exit>

00000836 <__divmodhi4_neg1>:
     836:	90 95       	com	r25
     838:	81 95       	neg	r24
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	08 95       	ret

0000083e <__divmodhi4_neg2>:
     83e:	70 95       	com	r23
     840:	61 95       	neg	r22
     842:	7f 4f       	sbci	r23, 0xFF	; 255

00000844 <__divmodhi4_exit>:
     844:	08 95       	ret

00000846 <__udivmodhi4>:
     846:	aa 1b       	sub	r26, r26
     848:	bb 1b       	sub	r27, r27
     84a:	51 e1       	ldi	r21, 0x11	; 17
     84c:	07 c0       	rjmp	.+14     	; 0x85c <__udivmodhi4_ep>

0000084e <__udivmodhi4_loop>:
     84e:	aa 1f       	adc	r26, r26
     850:	bb 1f       	adc	r27, r27
     852:	a6 17       	cp	r26, r22
     854:	b7 07       	cpc	r27, r23
     856:	10 f0       	brcs	.+4      	; 0x85c <__udivmodhi4_ep>
     858:	a6 1b       	sub	r26, r22
     85a:	b7 0b       	sbc	r27, r23

0000085c <__udivmodhi4_ep>:
     85c:	88 1f       	adc	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	5a 95       	dec	r21
     862:	a9 f7       	brne	.-22     	; 0x84e <__udivmodhi4_loop>
     864:	80 95       	com	r24
     866:	90 95       	com	r25
     868:	bc 01       	movw	r22, r24
     86a:	cd 01       	movw	r24, r26
     86c:	08 95       	ret

0000086e <fdevopen>:
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	00 97       	sbiw	r24, 0x00	; 0
     878:	31 f4       	brne	.+12     	; 0x886 <fdevopen+0x18>
     87a:	61 15       	cp	r22, r1
     87c:	71 05       	cpc	r23, r1
     87e:	19 f4       	brne	.+6      	; 0x886 <fdevopen+0x18>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	3a c0       	rjmp	.+116    	; 0x8fa <fdevopen+0x8c>
     886:	8b 01       	movw	r16, r22
     888:	ec 01       	movw	r28, r24
     88a:	6e e0       	ldi	r22, 0x0E	; 14
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 79 06 	call	0xcf2	; 0xcf2 <calloc>
     896:	fc 01       	movw	r30, r24
     898:	89 2b       	or	r24, r25
     89a:	91 f3       	breq	.-28     	; 0x880 <fdevopen+0x12>
     89c:	80 e8       	ldi	r24, 0x80	; 128
     89e:	83 83       	std	Z+3, r24	; 0x03
     8a0:	01 15       	cp	r16, r1
     8a2:	11 05       	cpc	r17, r1
     8a4:	71 f0       	breq	.+28     	; 0x8c2 <fdevopen+0x54>
     8a6:	13 87       	std	Z+11, r17	; 0x0b
     8a8:	02 87       	std	Z+10, r16	; 0x0a
     8aa:	81 e8       	ldi	r24, 0x81	; 129
     8ac:	83 83       	std	Z+3, r24	; 0x03
     8ae:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <__iob>
     8b2:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <__iob+0x1>
     8b6:	89 2b       	or	r24, r25
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <fdevopen+0x54>
     8ba:	f0 93 9a 01 	sts	0x019A, r31	; 0x80019a <__iob+0x1>
     8be:	e0 93 99 01 	sts	0x0199, r30	; 0x800199 <__iob>
     8c2:	20 97       	sbiw	r28, 0x00	; 0
     8c4:	c9 f0       	breq	.+50     	; 0x8f8 <fdevopen+0x8a>
     8c6:	d1 87       	std	Z+9, r29	; 0x09
     8c8:	c0 87       	std	Z+8, r28	; 0x08
     8ca:	83 81       	ldd	r24, Z+3	; 0x03
     8cc:	82 60       	ori	r24, 0x02	; 2
     8ce:	83 83       	std	Z+3, r24	; 0x03
     8d0:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <__iob+0x2>
     8d4:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <__iob+0x3>
     8d8:	89 2b       	or	r24, r25
     8da:	71 f4       	brne	.+28     	; 0x8f8 <fdevopen+0x8a>
     8dc:	f0 93 9c 01 	sts	0x019C, r31	; 0x80019c <__iob+0x3>
     8e0:	e0 93 9b 01 	sts	0x019B, r30	; 0x80019b <__iob+0x2>
     8e4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <__iob+0x4>
     8e8:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <__iob+0x5>
     8ec:	89 2b       	or	r24, r25
     8ee:	21 f4       	brne	.+8      	; 0x8f8 <fdevopen+0x8a>
     8f0:	f0 93 9e 01 	sts	0x019E, r31	; 0x80019e <__iob+0x5>
     8f4:	e0 93 9d 01 	sts	0x019D, r30	; 0x80019d <__iob+0x4>
     8f8:	cf 01       	movw	r24, r30
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	08 95       	ret

00000904 <printf>:
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	e8 e8       	ldi	r30, 0x88	; 136
     90a:	f4 e0       	ldi	r31, 0x04	; 4
     90c:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__prologue_saves__+0x20>
     910:	ae 01       	movw	r20, r28
     912:	4b 5f       	subi	r20, 0xFB	; 251
     914:	5f 4f       	sbci	r21, 0xFF	; 255
     916:	fa 01       	movw	r30, r20
     918:	61 91       	ld	r22, Z+
     91a:	71 91       	ld	r23, Z+
     91c:	af 01       	movw	r20, r30
     91e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <__iob+0x2>
     922:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <__iob+0x3>
     926:	0e 94 98 04 	call	0x930	; 0x930 <vfprintf>
     92a:	e2 e0       	ldi	r30, 0x02	; 2
     92c:	0c 94 99 08 	jmp	0x1132	; 0x1132 <__epilogue_restores__+0x20>

00000930 <vfprintf>:
     930:	ab e0       	ldi	r26, 0x0B	; 11
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	ee e9       	ldi	r30, 0x9E	; 158
     936:	f4 e0       	ldi	r31, 0x04	; 4
     938:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__prologue_saves__>
     93c:	6c 01       	movw	r12, r24
     93e:	7b 01       	movw	r14, r22
     940:	8a 01       	movw	r16, r20
     942:	fc 01       	movw	r30, r24
     944:	17 82       	std	Z+7, r1	; 0x07
     946:	16 82       	std	Z+6, r1	; 0x06
     948:	83 81       	ldd	r24, Z+3	; 0x03
     94a:	81 ff       	sbrs	r24, 1
     94c:	cc c1       	rjmp	.+920    	; 0xce6 <vfprintf+0x3b6>
     94e:	ce 01       	movw	r24, r28
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	3c 01       	movw	r6, r24
     954:	f6 01       	movw	r30, r12
     956:	93 81       	ldd	r25, Z+3	; 0x03
     958:	f7 01       	movw	r30, r14
     95a:	93 fd       	sbrc	r25, 3
     95c:	85 91       	lpm	r24, Z+
     95e:	93 ff       	sbrs	r25, 3
     960:	81 91       	ld	r24, Z+
     962:	7f 01       	movw	r14, r30
     964:	88 23       	and	r24, r24
     966:	09 f4       	brne	.+2      	; 0x96a <vfprintf+0x3a>
     968:	ba c1       	rjmp	.+884    	; 0xcde <vfprintf+0x3ae>
     96a:	85 32       	cpi	r24, 0x25	; 37
     96c:	39 f4       	brne	.+14     	; 0x97c <vfprintf+0x4c>
     96e:	93 fd       	sbrc	r25, 3
     970:	85 91       	lpm	r24, Z+
     972:	93 ff       	sbrs	r25, 3
     974:	81 91       	ld	r24, Z+
     976:	7f 01       	movw	r14, r30
     978:	85 32       	cpi	r24, 0x25	; 37
     97a:	29 f4       	brne	.+10     	; 0x986 <vfprintf+0x56>
     97c:	b6 01       	movw	r22, r12
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     984:	e7 cf       	rjmp	.-50     	; 0x954 <vfprintf+0x24>
     986:	91 2c       	mov	r9, r1
     988:	21 2c       	mov	r2, r1
     98a:	31 2c       	mov	r3, r1
     98c:	ff e1       	ldi	r31, 0x1F	; 31
     98e:	f3 15       	cp	r31, r3
     990:	d8 f0       	brcs	.+54     	; 0x9c8 <vfprintf+0x98>
     992:	8b 32       	cpi	r24, 0x2B	; 43
     994:	79 f0       	breq	.+30     	; 0x9b4 <vfprintf+0x84>
     996:	38 f4       	brcc	.+14     	; 0x9a6 <vfprintf+0x76>
     998:	80 32       	cpi	r24, 0x20	; 32
     99a:	79 f0       	breq	.+30     	; 0x9ba <vfprintf+0x8a>
     99c:	83 32       	cpi	r24, 0x23	; 35
     99e:	a1 f4       	brne	.+40     	; 0x9c8 <vfprintf+0x98>
     9a0:	23 2d       	mov	r18, r3
     9a2:	20 61       	ori	r18, 0x10	; 16
     9a4:	1d c0       	rjmp	.+58     	; 0x9e0 <vfprintf+0xb0>
     9a6:	8d 32       	cpi	r24, 0x2D	; 45
     9a8:	61 f0       	breq	.+24     	; 0x9c2 <vfprintf+0x92>
     9aa:	80 33       	cpi	r24, 0x30	; 48
     9ac:	69 f4       	brne	.+26     	; 0x9c8 <vfprintf+0x98>
     9ae:	23 2d       	mov	r18, r3
     9b0:	21 60       	ori	r18, 0x01	; 1
     9b2:	16 c0       	rjmp	.+44     	; 0x9e0 <vfprintf+0xb0>
     9b4:	83 2d       	mov	r24, r3
     9b6:	82 60       	ori	r24, 0x02	; 2
     9b8:	38 2e       	mov	r3, r24
     9ba:	e3 2d       	mov	r30, r3
     9bc:	e4 60       	ori	r30, 0x04	; 4
     9be:	3e 2e       	mov	r3, r30
     9c0:	2a c0       	rjmp	.+84     	; 0xa16 <vfprintf+0xe6>
     9c2:	f3 2d       	mov	r31, r3
     9c4:	f8 60       	ori	r31, 0x08	; 8
     9c6:	1d c0       	rjmp	.+58     	; 0xa02 <vfprintf+0xd2>
     9c8:	37 fc       	sbrc	r3, 7
     9ca:	2d c0       	rjmp	.+90     	; 0xa26 <vfprintf+0xf6>
     9cc:	20 ed       	ldi	r18, 0xD0	; 208
     9ce:	28 0f       	add	r18, r24
     9d0:	2a 30       	cpi	r18, 0x0A	; 10
     9d2:	40 f0       	brcs	.+16     	; 0x9e4 <vfprintf+0xb4>
     9d4:	8e 32       	cpi	r24, 0x2E	; 46
     9d6:	b9 f4       	brne	.+46     	; 0xa06 <vfprintf+0xd6>
     9d8:	36 fc       	sbrc	r3, 6
     9da:	81 c1       	rjmp	.+770    	; 0xcde <vfprintf+0x3ae>
     9dc:	23 2d       	mov	r18, r3
     9de:	20 64       	ori	r18, 0x40	; 64
     9e0:	32 2e       	mov	r3, r18
     9e2:	19 c0       	rjmp	.+50     	; 0xa16 <vfprintf+0xe6>
     9e4:	36 fe       	sbrs	r3, 6
     9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <vfprintf+0xc4>
     9e8:	8a e0       	ldi	r24, 0x0A	; 10
     9ea:	98 9e       	mul	r9, r24
     9ec:	20 0d       	add	r18, r0
     9ee:	11 24       	eor	r1, r1
     9f0:	92 2e       	mov	r9, r18
     9f2:	11 c0       	rjmp	.+34     	; 0xa16 <vfprintf+0xe6>
     9f4:	ea e0       	ldi	r30, 0x0A	; 10
     9f6:	2e 9e       	mul	r2, r30
     9f8:	20 0d       	add	r18, r0
     9fa:	11 24       	eor	r1, r1
     9fc:	22 2e       	mov	r2, r18
     9fe:	f3 2d       	mov	r31, r3
     a00:	f0 62       	ori	r31, 0x20	; 32
     a02:	3f 2e       	mov	r3, r31
     a04:	08 c0       	rjmp	.+16     	; 0xa16 <vfprintf+0xe6>
     a06:	8c 36       	cpi	r24, 0x6C	; 108
     a08:	21 f4       	brne	.+8      	; 0xa12 <vfprintf+0xe2>
     a0a:	83 2d       	mov	r24, r3
     a0c:	80 68       	ori	r24, 0x80	; 128
     a0e:	38 2e       	mov	r3, r24
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <vfprintf+0xe6>
     a12:	88 36       	cpi	r24, 0x68	; 104
     a14:	41 f4       	brne	.+16     	; 0xa26 <vfprintf+0xf6>
     a16:	f7 01       	movw	r30, r14
     a18:	93 fd       	sbrc	r25, 3
     a1a:	85 91       	lpm	r24, Z+
     a1c:	93 ff       	sbrs	r25, 3
     a1e:	81 91       	ld	r24, Z+
     a20:	7f 01       	movw	r14, r30
     a22:	81 11       	cpse	r24, r1
     a24:	b3 cf       	rjmp	.-154    	; 0x98c <vfprintf+0x5c>
     a26:	98 2f       	mov	r25, r24
     a28:	9f 7d       	andi	r25, 0xDF	; 223
     a2a:	95 54       	subi	r25, 0x45	; 69
     a2c:	93 30       	cpi	r25, 0x03	; 3
     a2e:	28 f4       	brcc	.+10     	; 0xa3a <vfprintf+0x10a>
     a30:	0c 5f       	subi	r16, 0xFC	; 252
     a32:	1f 4f       	sbci	r17, 0xFF	; 255
     a34:	9f e3       	ldi	r25, 0x3F	; 63
     a36:	99 83       	std	Y+1, r25	; 0x01
     a38:	0d c0       	rjmp	.+26     	; 0xa54 <vfprintf+0x124>
     a3a:	83 36       	cpi	r24, 0x63	; 99
     a3c:	31 f0       	breq	.+12     	; 0xa4a <vfprintf+0x11a>
     a3e:	83 37       	cpi	r24, 0x73	; 115
     a40:	71 f0       	breq	.+28     	; 0xa5e <vfprintf+0x12e>
     a42:	83 35       	cpi	r24, 0x53	; 83
     a44:	09 f0       	breq	.+2      	; 0xa48 <vfprintf+0x118>
     a46:	59 c0       	rjmp	.+178    	; 0xafa <vfprintf+0x1ca>
     a48:	21 c0       	rjmp	.+66     	; 0xa8c <vfprintf+0x15c>
     a4a:	f8 01       	movw	r30, r16
     a4c:	80 81       	ld	r24, Z
     a4e:	89 83       	std	Y+1, r24	; 0x01
     a50:	0e 5f       	subi	r16, 0xFE	; 254
     a52:	1f 4f       	sbci	r17, 0xFF	; 255
     a54:	88 24       	eor	r8, r8
     a56:	83 94       	inc	r8
     a58:	91 2c       	mov	r9, r1
     a5a:	53 01       	movw	r10, r6
     a5c:	13 c0       	rjmp	.+38     	; 0xa84 <vfprintf+0x154>
     a5e:	28 01       	movw	r4, r16
     a60:	f2 e0       	ldi	r31, 0x02	; 2
     a62:	4f 0e       	add	r4, r31
     a64:	51 1c       	adc	r5, r1
     a66:	f8 01       	movw	r30, r16
     a68:	a0 80       	ld	r10, Z
     a6a:	b1 80       	ldd	r11, Z+1	; 0x01
     a6c:	36 fe       	sbrs	r3, 6
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <vfprintf+0x146>
     a70:	69 2d       	mov	r22, r9
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	02 c0       	rjmp	.+4      	; 0xa7a <vfprintf+0x14a>
     a76:	6f ef       	ldi	r22, 0xFF	; 255
     a78:	7f ef       	ldi	r23, 0xFF	; 255
     a7a:	c5 01       	movw	r24, r10
     a7c:	0e 94 c8 07 	call	0xf90	; 0xf90 <strnlen>
     a80:	4c 01       	movw	r8, r24
     a82:	82 01       	movw	r16, r4
     a84:	f3 2d       	mov	r31, r3
     a86:	ff 77       	andi	r31, 0x7F	; 127
     a88:	3f 2e       	mov	r3, r31
     a8a:	16 c0       	rjmp	.+44     	; 0xab8 <vfprintf+0x188>
     a8c:	28 01       	movw	r4, r16
     a8e:	22 e0       	ldi	r18, 0x02	; 2
     a90:	42 0e       	add	r4, r18
     a92:	51 1c       	adc	r5, r1
     a94:	f8 01       	movw	r30, r16
     a96:	a0 80       	ld	r10, Z
     a98:	b1 80       	ldd	r11, Z+1	; 0x01
     a9a:	36 fe       	sbrs	r3, 6
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <vfprintf+0x174>
     a9e:	69 2d       	mov	r22, r9
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <vfprintf+0x178>
     aa4:	6f ef       	ldi	r22, 0xFF	; 255
     aa6:	7f ef       	ldi	r23, 0xFF	; 255
     aa8:	c5 01       	movw	r24, r10
     aaa:	0e 94 b6 07 	call	0xf6c	; 0xf6c <strnlen_P>
     aae:	4c 01       	movw	r8, r24
     ab0:	f3 2d       	mov	r31, r3
     ab2:	f0 68       	ori	r31, 0x80	; 128
     ab4:	3f 2e       	mov	r3, r31
     ab6:	82 01       	movw	r16, r4
     ab8:	33 fc       	sbrc	r3, 3
     aba:	1b c0       	rjmp	.+54     	; 0xaf2 <vfprintf+0x1c2>
     abc:	82 2d       	mov	r24, r2
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	88 16       	cp	r8, r24
     ac2:	99 06       	cpc	r9, r25
     ac4:	b0 f4       	brcc	.+44     	; 0xaf2 <vfprintf+0x1c2>
     ac6:	b6 01       	movw	r22, r12
     ac8:	80 e2       	ldi	r24, 0x20	; 32
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     ad0:	2a 94       	dec	r2
     ad2:	f4 cf       	rjmp	.-24     	; 0xabc <vfprintf+0x18c>
     ad4:	f5 01       	movw	r30, r10
     ad6:	37 fc       	sbrc	r3, 7
     ad8:	85 91       	lpm	r24, Z+
     ada:	37 fe       	sbrs	r3, 7
     adc:	81 91       	ld	r24, Z+
     ade:	5f 01       	movw	r10, r30
     ae0:	b6 01       	movw	r22, r12
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     ae8:	21 10       	cpse	r2, r1
     aea:	2a 94       	dec	r2
     aec:	21 e0       	ldi	r18, 0x01	; 1
     aee:	82 1a       	sub	r8, r18
     af0:	91 08       	sbc	r9, r1
     af2:	81 14       	cp	r8, r1
     af4:	91 04       	cpc	r9, r1
     af6:	71 f7       	brne	.-36     	; 0xad4 <vfprintf+0x1a4>
     af8:	e8 c0       	rjmp	.+464    	; 0xcca <vfprintf+0x39a>
     afa:	84 36       	cpi	r24, 0x64	; 100
     afc:	11 f0       	breq	.+4      	; 0xb02 <vfprintf+0x1d2>
     afe:	89 36       	cpi	r24, 0x69	; 105
     b00:	41 f5       	brne	.+80     	; 0xb52 <vfprintf+0x222>
     b02:	f8 01       	movw	r30, r16
     b04:	37 fe       	sbrs	r3, 7
     b06:	07 c0       	rjmp	.+14     	; 0xb16 <vfprintf+0x1e6>
     b08:	60 81       	ld	r22, Z
     b0a:	71 81       	ldd	r23, Z+1	; 0x01
     b0c:	82 81       	ldd	r24, Z+2	; 0x02
     b0e:	93 81       	ldd	r25, Z+3	; 0x03
     b10:	0c 5f       	subi	r16, 0xFC	; 252
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	08 c0       	rjmp	.+16     	; 0xb26 <vfprintf+0x1f6>
     b16:	60 81       	ld	r22, Z
     b18:	71 81       	ldd	r23, Z+1	; 0x01
     b1a:	07 2e       	mov	r0, r23
     b1c:	00 0c       	add	r0, r0
     b1e:	88 0b       	sbc	r24, r24
     b20:	99 0b       	sbc	r25, r25
     b22:	0e 5f       	subi	r16, 0xFE	; 254
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	f3 2d       	mov	r31, r3
     b28:	ff 76       	andi	r31, 0x6F	; 111
     b2a:	3f 2e       	mov	r3, r31
     b2c:	97 ff       	sbrs	r25, 7
     b2e:	09 c0       	rjmp	.+18     	; 0xb42 <vfprintf+0x212>
     b30:	90 95       	com	r25
     b32:	80 95       	com	r24
     b34:	70 95       	com	r23
     b36:	61 95       	neg	r22
     b38:	7f 4f       	sbci	r23, 0xFF	; 255
     b3a:	8f 4f       	sbci	r24, 0xFF	; 255
     b3c:	9f 4f       	sbci	r25, 0xFF	; 255
     b3e:	f0 68       	ori	r31, 0x80	; 128
     b40:	3f 2e       	mov	r3, r31
     b42:	2a e0       	ldi	r18, 0x0A	; 10
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	a3 01       	movw	r20, r6
     b48:	0e 94 0f 08 	call	0x101e	; 0x101e <__ultoa_invert>
     b4c:	88 2e       	mov	r8, r24
     b4e:	86 18       	sub	r8, r6
     b50:	45 c0       	rjmp	.+138    	; 0xbdc <vfprintf+0x2ac>
     b52:	85 37       	cpi	r24, 0x75	; 117
     b54:	31 f4       	brne	.+12     	; 0xb62 <vfprintf+0x232>
     b56:	23 2d       	mov	r18, r3
     b58:	2f 7e       	andi	r18, 0xEF	; 239
     b5a:	b2 2e       	mov	r11, r18
     b5c:	2a e0       	ldi	r18, 0x0A	; 10
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	25 c0       	rjmp	.+74     	; 0xbac <vfprintf+0x27c>
     b62:	93 2d       	mov	r25, r3
     b64:	99 7f       	andi	r25, 0xF9	; 249
     b66:	b9 2e       	mov	r11, r25
     b68:	8f 36       	cpi	r24, 0x6F	; 111
     b6a:	c1 f0       	breq	.+48     	; 0xb9c <vfprintf+0x26c>
     b6c:	18 f4       	brcc	.+6      	; 0xb74 <vfprintf+0x244>
     b6e:	88 35       	cpi	r24, 0x58	; 88
     b70:	79 f0       	breq	.+30     	; 0xb90 <vfprintf+0x260>
     b72:	b5 c0       	rjmp	.+362    	; 0xcde <vfprintf+0x3ae>
     b74:	80 37       	cpi	r24, 0x70	; 112
     b76:	19 f0       	breq	.+6      	; 0xb7e <vfprintf+0x24e>
     b78:	88 37       	cpi	r24, 0x78	; 120
     b7a:	21 f0       	breq	.+8      	; 0xb84 <vfprintf+0x254>
     b7c:	b0 c0       	rjmp	.+352    	; 0xcde <vfprintf+0x3ae>
     b7e:	e9 2f       	mov	r30, r25
     b80:	e0 61       	ori	r30, 0x10	; 16
     b82:	be 2e       	mov	r11, r30
     b84:	b4 fe       	sbrs	r11, 4
     b86:	0d c0       	rjmp	.+26     	; 0xba2 <vfprintf+0x272>
     b88:	fb 2d       	mov	r31, r11
     b8a:	f4 60       	ori	r31, 0x04	; 4
     b8c:	bf 2e       	mov	r11, r31
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <vfprintf+0x272>
     b90:	34 fe       	sbrs	r3, 4
     b92:	0a c0       	rjmp	.+20     	; 0xba8 <vfprintf+0x278>
     b94:	29 2f       	mov	r18, r25
     b96:	26 60       	ori	r18, 0x06	; 6
     b98:	b2 2e       	mov	r11, r18
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <vfprintf+0x278>
     b9c:	28 e0       	ldi	r18, 0x08	; 8
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	05 c0       	rjmp	.+10     	; 0xbac <vfprintf+0x27c>
     ba2:	20 e1       	ldi	r18, 0x10	; 16
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	02 c0       	rjmp	.+4      	; 0xbac <vfprintf+0x27c>
     ba8:	20 e1       	ldi	r18, 0x10	; 16
     baa:	32 e0       	ldi	r19, 0x02	; 2
     bac:	f8 01       	movw	r30, r16
     bae:	b7 fe       	sbrs	r11, 7
     bb0:	07 c0       	rjmp	.+14     	; 0xbc0 <vfprintf+0x290>
     bb2:	60 81       	ld	r22, Z
     bb4:	71 81       	ldd	r23, Z+1	; 0x01
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	93 81       	ldd	r25, Z+3	; 0x03
     bba:	0c 5f       	subi	r16, 0xFC	; 252
     bbc:	1f 4f       	sbci	r17, 0xFF	; 255
     bbe:	06 c0       	rjmp	.+12     	; 0xbcc <vfprintf+0x29c>
     bc0:	60 81       	ld	r22, Z
     bc2:	71 81       	ldd	r23, Z+1	; 0x01
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	0e 5f       	subi	r16, 0xFE	; 254
     bca:	1f 4f       	sbci	r17, 0xFF	; 255
     bcc:	a3 01       	movw	r20, r6
     bce:	0e 94 0f 08 	call	0x101e	; 0x101e <__ultoa_invert>
     bd2:	88 2e       	mov	r8, r24
     bd4:	86 18       	sub	r8, r6
     bd6:	fb 2d       	mov	r31, r11
     bd8:	ff 77       	andi	r31, 0x7F	; 127
     bda:	3f 2e       	mov	r3, r31
     bdc:	36 fe       	sbrs	r3, 6
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <vfprintf+0x2ca>
     be0:	23 2d       	mov	r18, r3
     be2:	2e 7f       	andi	r18, 0xFE	; 254
     be4:	a2 2e       	mov	r10, r18
     be6:	89 14       	cp	r8, r9
     be8:	58 f4       	brcc	.+22     	; 0xc00 <vfprintf+0x2d0>
     bea:	34 fe       	sbrs	r3, 4
     bec:	0b c0       	rjmp	.+22     	; 0xc04 <vfprintf+0x2d4>
     bee:	32 fc       	sbrc	r3, 2
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <vfprintf+0x2d4>
     bf2:	83 2d       	mov	r24, r3
     bf4:	8e 7e       	andi	r24, 0xEE	; 238
     bf6:	a8 2e       	mov	r10, r24
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <vfprintf+0x2d4>
     bfa:	b8 2c       	mov	r11, r8
     bfc:	a3 2c       	mov	r10, r3
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <vfprintf+0x2d6>
     c00:	b8 2c       	mov	r11, r8
     c02:	01 c0       	rjmp	.+2      	; 0xc06 <vfprintf+0x2d6>
     c04:	b9 2c       	mov	r11, r9
     c06:	a4 fe       	sbrs	r10, 4
     c08:	0f c0       	rjmp	.+30     	; 0xc28 <vfprintf+0x2f8>
     c0a:	fe 01       	movw	r30, r28
     c0c:	e8 0d       	add	r30, r8
     c0e:	f1 1d       	adc	r31, r1
     c10:	80 81       	ld	r24, Z
     c12:	80 33       	cpi	r24, 0x30	; 48
     c14:	21 f4       	brne	.+8      	; 0xc1e <vfprintf+0x2ee>
     c16:	9a 2d       	mov	r25, r10
     c18:	99 7e       	andi	r25, 0xE9	; 233
     c1a:	a9 2e       	mov	r10, r25
     c1c:	09 c0       	rjmp	.+18     	; 0xc30 <vfprintf+0x300>
     c1e:	a2 fe       	sbrs	r10, 2
     c20:	06 c0       	rjmp	.+12     	; 0xc2e <vfprintf+0x2fe>
     c22:	b3 94       	inc	r11
     c24:	b3 94       	inc	r11
     c26:	04 c0       	rjmp	.+8      	; 0xc30 <vfprintf+0x300>
     c28:	8a 2d       	mov	r24, r10
     c2a:	86 78       	andi	r24, 0x86	; 134
     c2c:	09 f0       	breq	.+2      	; 0xc30 <vfprintf+0x300>
     c2e:	b3 94       	inc	r11
     c30:	a3 fc       	sbrc	r10, 3
     c32:	11 c0       	rjmp	.+34     	; 0xc56 <vfprintf+0x326>
     c34:	a0 fe       	sbrs	r10, 0
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <vfprintf+0x314>
     c38:	b2 14       	cp	r11, r2
     c3a:	88 f4       	brcc	.+34     	; 0xc5e <vfprintf+0x32e>
     c3c:	28 0c       	add	r2, r8
     c3e:	92 2c       	mov	r9, r2
     c40:	9b 18       	sub	r9, r11
     c42:	0e c0       	rjmp	.+28     	; 0xc60 <vfprintf+0x330>
     c44:	b2 14       	cp	r11, r2
     c46:	60 f4       	brcc	.+24     	; 0xc60 <vfprintf+0x330>
     c48:	b6 01       	movw	r22, r12
     c4a:	80 e2       	ldi	r24, 0x20	; 32
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     c52:	b3 94       	inc	r11
     c54:	f7 cf       	rjmp	.-18     	; 0xc44 <vfprintf+0x314>
     c56:	b2 14       	cp	r11, r2
     c58:	18 f4       	brcc	.+6      	; 0xc60 <vfprintf+0x330>
     c5a:	2b 18       	sub	r2, r11
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <vfprintf+0x332>
     c5e:	98 2c       	mov	r9, r8
     c60:	21 2c       	mov	r2, r1
     c62:	a4 fe       	sbrs	r10, 4
     c64:	10 c0       	rjmp	.+32     	; 0xc86 <vfprintf+0x356>
     c66:	b6 01       	movw	r22, r12
     c68:	80 e3       	ldi	r24, 0x30	; 48
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     c70:	a2 fe       	sbrs	r10, 2
     c72:	17 c0       	rjmp	.+46     	; 0xca2 <vfprintf+0x372>
     c74:	a1 fc       	sbrc	r10, 1
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <vfprintf+0x34e>
     c78:	88 e7       	ldi	r24, 0x78	; 120
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0x352>
     c7e:	88 e5       	ldi	r24, 0x58	; 88
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	b6 01       	movw	r22, r12
     c84:	0c c0       	rjmp	.+24     	; 0xc9e <vfprintf+0x36e>
     c86:	8a 2d       	mov	r24, r10
     c88:	86 78       	andi	r24, 0x86	; 134
     c8a:	59 f0       	breq	.+22     	; 0xca2 <vfprintf+0x372>
     c8c:	a1 fe       	sbrs	r10, 1
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <vfprintf+0x364>
     c90:	8b e2       	ldi	r24, 0x2B	; 43
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <vfprintf+0x366>
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	a7 fc       	sbrc	r10, 7
     c98:	8d e2       	ldi	r24, 0x2D	; 45
     c9a:	b6 01       	movw	r22, r12
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     ca2:	89 14       	cp	r8, r9
     ca4:	38 f4       	brcc	.+14     	; 0xcb4 <vfprintf+0x384>
     ca6:	b6 01       	movw	r22, r12
     ca8:	80 e3       	ldi	r24, 0x30	; 48
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     cb0:	9a 94       	dec	r9
     cb2:	f7 cf       	rjmp	.-18     	; 0xca2 <vfprintf+0x372>
     cb4:	8a 94       	dec	r8
     cb6:	f3 01       	movw	r30, r6
     cb8:	e8 0d       	add	r30, r8
     cba:	f1 1d       	adc	r31, r1
     cbc:	80 81       	ld	r24, Z
     cbe:	b6 01       	movw	r22, r12
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     cc6:	81 10       	cpse	r8, r1
     cc8:	f5 cf       	rjmp	.-22     	; 0xcb4 <vfprintf+0x384>
     cca:	22 20       	and	r2, r2
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <vfprintf+0x3a0>
     cce:	42 ce       	rjmp	.-892    	; 0x954 <vfprintf+0x24>
     cd0:	b6 01       	movw	r22, r12
     cd2:	80 e2       	ldi	r24, 0x20	; 32
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <fputc>
     cda:	2a 94       	dec	r2
     cdc:	f6 cf       	rjmp	.-20     	; 0xcca <vfprintf+0x39a>
     cde:	f6 01       	movw	r30, r12
     ce0:	86 81       	ldd	r24, Z+6	; 0x06
     ce2:	97 81       	ldd	r25, Z+7	; 0x07
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <vfprintf+0x3ba>
     ce6:	8f ef       	ldi	r24, 0xFF	; 255
     ce8:	9f ef       	ldi	r25, 0xFF	; 255
     cea:	2b 96       	adiw	r28, 0x0b	; 11
     cec:	e2 e1       	ldi	r30, 0x12	; 18
     cee:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__epilogue_restores__>

00000cf2 <calloc>:
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	86 9f       	mul	r24, r22
     cfc:	80 01       	movw	r16, r0
     cfe:	87 9f       	mul	r24, r23
     d00:	10 0d       	add	r17, r0
     d02:	96 9f       	mul	r25, r22
     d04:	10 0d       	add	r17, r0
     d06:	11 24       	eor	r1, r1
     d08:	c8 01       	movw	r24, r16
     d0a:	0e 94 95 06 	call	0xd2a	; 0xd2a <malloc>
     d0e:	ec 01       	movw	r28, r24
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	29 f0       	breq	.+10     	; 0xd1e <calloc+0x2c>
     d14:	a8 01       	movw	r20, r16
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e 94 c1 07 	call	0xf82	; 0xf82 <memset>
     d1e:	ce 01       	movw	r24, r28
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	08 95       	ret

00000d2a <malloc>:
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	91 05       	cpc	r25, r1
     d36:	10 f4       	brcc	.+4      	; 0xd3c <malloc+0x12>
     d38:	82 e0       	ldi	r24, 0x02	; 2
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <__flp>
     d40:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <__flp+0x1>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	30 97       	sbiw	r30, 0x00	; 0
     d4e:	19 f1       	breq	.+70     	; 0xd96 <malloc+0x6c>
     d50:	40 81       	ld	r20, Z
     d52:	51 81       	ldd	r21, Z+1	; 0x01
     d54:	02 81       	ldd	r16, Z+2	; 0x02
     d56:	13 81       	ldd	r17, Z+3	; 0x03
     d58:	48 17       	cp	r20, r24
     d5a:	59 07       	cpc	r21, r25
     d5c:	c8 f0       	brcs	.+50     	; 0xd90 <malloc+0x66>
     d5e:	84 17       	cp	r24, r20
     d60:	95 07       	cpc	r25, r21
     d62:	69 f4       	brne	.+26     	; 0xd7e <malloc+0x54>
     d64:	10 97       	sbiw	r26, 0x00	; 0
     d66:	31 f0       	breq	.+12     	; 0xd74 <malloc+0x4a>
     d68:	12 96       	adiw	r26, 0x02	; 2
     d6a:	0c 93       	st	X, r16
     d6c:	12 97       	sbiw	r26, 0x02	; 2
     d6e:	13 96       	adiw	r26, 0x03	; 3
     d70:	1c 93       	st	X, r17
     d72:	27 c0       	rjmp	.+78     	; 0xdc2 <malloc+0x98>
     d74:	00 93 a1 01 	sts	0x01A1, r16	; 0x8001a1 <__flp>
     d78:	10 93 a2 01 	sts	0x01A2, r17	; 0x8001a2 <__flp+0x1>
     d7c:	22 c0       	rjmp	.+68     	; 0xdc2 <malloc+0x98>
     d7e:	21 15       	cp	r18, r1
     d80:	31 05       	cpc	r19, r1
     d82:	19 f0       	breq	.+6      	; 0xd8a <malloc+0x60>
     d84:	42 17       	cp	r20, r18
     d86:	53 07       	cpc	r21, r19
     d88:	18 f4       	brcc	.+6      	; 0xd90 <malloc+0x66>
     d8a:	9a 01       	movw	r18, r20
     d8c:	bd 01       	movw	r22, r26
     d8e:	ef 01       	movw	r28, r30
     d90:	df 01       	movw	r26, r30
     d92:	f8 01       	movw	r30, r16
     d94:	db cf       	rjmp	.-74     	; 0xd4c <malloc+0x22>
     d96:	21 15       	cp	r18, r1
     d98:	31 05       	cpc	r19, r1
     d9a:	f9 f0       	breq	.+62     	; 0xdda <malloc+0xb0>
     d9c:	28 1b       	sub	r18, r24
     d9e:	39 0b       	sbc	r19, r25
     da0:	24 30       	cpi	r18, 0x04	; 4
     da2:	31 05       	cpc	r19, r1
     da4:	80 f4       	brcc	.+32     	; 0xdc6 <malloc+0x9c>
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
     daa:	61 15       	cp	r22, r1
     dac:	71 05       	cpc	r23, r1
     dae:	21 f0       	breq	.+8      	; 0xdb8 <malloc+0x8e>
     db0:	fb 01       	movw	r30, r22
     db2:	93 83       	std	Z+3, r25	; 0x03
     db4:	82 83       	std	Z+2, r24	; 0x02
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <malloc+0x96>
     db8:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <__flp+0x1>
     dbc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <__flp>
     dc0:	fe 01       	movw	r30, r28
     dc2:	32 96       	adiw	r30, 0x02	; 2
     dc4:	44 c0       	rjmp	.+136    	; 0xe4e <malloc+0x124>
     dc6:	fe 01       	movw	r30, r28
     dc8:	e2 0f       	add	r30, r18
     dca:	f3 1f       	adc	r31, r19
     dcc:	81 93       	st	Z+, r24
     dce:	91 93       	st	Z+, r25
     dd0:	22 50       	subi	r18, 0x02	; 2
     dd2:	31 09       	sbc	r19, r1
     dd4:	39 83       	std	Y+1, r19	; 0x01
     dd6:	28 83       	st	Y, r18
     dd8:	3a c0       	rjmp	.+116    	; 0xe4e <malloc+0x124>
     dda:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     dde:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     de2:	23 2b       	or	r18, r19
     de4:	41 f4       	brne	.+16     	; 0xdf6 <malloc+0xcc>
     de6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     dea:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     dee:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <__brkval+0x1>
     df2:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <__brkval>
     df6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     dfa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     dfe:	21 15       	cp	r18, r1
     e00:	31 05       	cpc	r19, r1
     e02:	41 f4       	brne	.+16     	; 0xe14 <malloc+0xea>
     e04:	2d b7       	in	r18, 0x3d	; 61
     e06:	3e b7       	in	r19, 0x3e	; 62
     e08:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     e0c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     e10:	24 1b       	sub	r18, r20
     e12:	35 0b       	sbc	r19, r21
     e14:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <__brkval>
     e18:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <__brkval+0x1>
     e1c:	e2 17       	cp	r30, r18
     e1e:	f3 07       	cpc	r31, r19
     e20:	a0 f4       	brcc	.+40     	; 0xe4a <malloc+0x120>
     e22:	2e 1b       	sub	r18, r30
     e24:	3f 0b       	sbc	r19, r31
     e26:	28 17       	cp	r18, r24
     e28:	39 07       	cpc	r19, r25
     e2a:	78 f0       	brcs	.+30     	; 0xe4a <malloc+0x120>
     e2c:	ac 01       	movw	r20, r24
     e2e:	4e 5f       	subi	r20, 0xFE	; 254
     e30:	5f 4f       	sbci	r21, 0xFF	; 255
     e32:	24 17       	cp	r18, r20
     e34:	35 07       	cpc	r19, r21
     e36:	48 f0       	brcs	.+18     	; 0xe4a <malloc+0x120>
     e38:	4e 0f       	add	r20, r30
     e3a:	5f 1f       	adc	r21, r31
     e3c:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <__brkval+0x1>
     e40:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <__brkval>
     e44:	81 93       	st	Z+, r24
     e46:	91 93       	st	Z+, r25
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <malloc+0x124>
     e4a:	e0 e0       	ldi	r30, 0x00	; 0
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	cf 01       	movw	r24, r30
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	08 95       	ret

00000e5a <free>:
     e5a:	cf 93       	push	r28
     e5c:	df 93       	push	r29
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	09 f4       	brne	.+2      	; 0xe64 <free+0xa>
     e62:	81 c0       	rjmp	.+258    	; 0xf66 <free+0x10c>
     e64:	fc 01       	movw	r30, r24
     e66:	32 97       	sbiw	r30, 0x02	; 2
     e68:	13 82       	std	Z+3, r1	; 0x03
     e6a:	12 82       	std	Z+2, r1	; 0x02
     e6c:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <__flp>
     e70:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <__flp+0x1>
     e74:	10 97       	sbiw	r26, 0x00	; 0
     e76:	81 f4       	brne	.+32     	; 0xe98 <free+0x3e>
     e78:	20 81       	ld	r18, Z
     e7a:	31 81       	ldd	r19, Z+1	; 0x01
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     e84:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     e88:	28 17       	cp	r18, r24
     e8a:	39 07       	cpc	r19, r25
     e8c:	51 f5       	brne	.+84     	; 0xee2 <free+0x88>
     e8e:	f0 93 a0 01 	sts	0x01A0, r31	; 0x8001a0 <__brkval+0x1>
     e92:	e0 93 9f 01 	sts	0x019F, r30	; 0x80019f <__brkval>
     e96:	67 c0       	rjmp	.+206    	; 0xf66 <free+0x10c>
     e98:	ed 01       	movw	r28, r26
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	ce 17       	cp	r28, r30
     ea0:	df 07       	cpc	r29, r31
     ea2:	40 f4       	brcc	.+16     	; 0xeb4 <free+0x5a>
     ea4:	4a 81       	ldd	r20, Y+2	; 0x02
     ea6:	5b 81       	ldd	r21, Y+3	; 0x03
     ea8:	9e 01       	movw	r18, r28
     eaa:	41 15       	cp	r20, r1
     eac:	51 05       	cpc	r21, r1
     eae:	f1 f0       	breq	.+60     	; 0xeec <free+0x92>
     eb0:	ea 01       	movw	r28, r20
     eb2:	f5 cf       	rjmp	.-22     	; 0xe9e <free+0x44>
     eb4:	d3 83       	std	Z+3, r29	; 0x03
     eb6:	c2 83       	std	Z+2, r28	; 0x02
     eb8:	40 81       	ld	r20, Z
     eba:	51 81       	ldd	r21, Z+1	; 0x01
     ebc:	84 0f       	add	r24, r20
     ebe:	95 1f       	adc	r25, r21
     ec0:	c8 17       	cp	r28, r24
     ec2:	d9 07       	cpc	r29, r25
     ec4:	59 f4       	brne	.+22     	; 0xedc <free+0x82>
     ec6:	88 81       	ld	r24, Y
     ec8:	99 81       	ldd	r25, Y+1	; 0x01
     eca:	84 0f       	add	r24, r20
     ecc:	95 1f       	adc	r25, r21
     ece:	02 96       	adiw	r24, 0x02	; 2
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	93 83       	std	Z+3, r25	; 0x03
     eda:	82 83       	std	Z+2, r24	; 0x02
     edc:	21 15       	cp	r18, r1
     ede:	31 05       	cpc	r19, r1
     ee0:	29 f4       	brne	.+10     	; 0xeec <free+0x92>
     ee2:	f0 93 a2 01 	sts	0x01A2, r31	; 0x8001a2 <__flp+0x1>
     ee6:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <__flp>
     eea:	3d c0       	rjmp	.+122    	; 0xf66 <free+0x10c>
     eec:	e9 01       	movw	r28, r18
     eee:	fb 83       	std	Y+3, r31	; 0x03
     ef0:	ea 83       	std	Y+2, r30	; 0x02
     ef2:	49 91       	ld	r20, Y+
     ef4:	59 91       	ld	r21, Y+
     ef6:	c4 0f       	add	r28, r20
     ef8:	d5 1f       	adc	r29, r21
     efa:	ec 17       	cp	r30, r28
     efc:	fd 07       	cpc	r31, r29
     efe:	61 f4       	brne	.+24     	; 0xf18 <free+0xbe>
     f00:	80 81       	ld	r24, Z
     f02:	91 81       	ldd	r25, Z+1	; 0x01
     f04:	84 0f       	add	r24, r20
     f06:	95 1f       	adc	r25, r21
     f08:	02 96       	adiw	r24, 0x02	; 2
     f0a:	e9 01       	movw	r28, r18
     f0c:	99 83       	std	Y+1, r25	; 0x01
     f0e:	88 83       	st	Y, r24
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	9b 83       	std	Y+3, r25	; 0x03
     f16:	8a 83       	std	Y+2, r24	; 0x02
     f18:	e0 e0       	ldi	r30, 0x00	; 0
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	12 96       	adiw	r26, 0x02	; 2
     f1e:	8d 91       	ld	r24, X+
     f20:	9c 91       	ld	r25, X
     f22:	13 97       	sbiw	r26, 0x03	; 3
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	19 f0       	breq	.+6      	; 0xf2e <free+0xd4>
     f28:	fd 01       	movw	r30, r26
     f2a:	dc 01       	movw	r26, r24
     f2c:	f7 cf       	rjmp	.-18     	; 0xf1c <free+0xc2>
     f2e:	8d 91       	ld	r24, X+
     f30:	9c 91       	ld	r25, X
     f32:	11 97       	sbiw	r26, 0x01	; 1
     f34:	9d 01       	movw	r18, r26
     f36:	2e 5f       	subi	r18, 0xFE	; 254
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <__brkval>
     f42:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <__brkval+0x1>
     f46:	28 17       	cp	r18, r24
     f48:	39 07       	cpc	r19, r25
     f4a:	69 f4       	brne	.+26     	; 0xf66 <free+0x10c>
     f4c:	30 97       	sbiw	r30, 0x00	; 0
     f4e:	29 f4       	brne	.+10     	; 0xf5a <free+0x100>
     f50:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__flp+0x1>
     f54:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__flp>
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <free+0x104>
     f5a:	13 82       	std	Z+3, r1	; 0x03
     f5c:	12 82       	std	Z+2, r1	; 0x02
     f5e:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <__brkval+0x1>
     f62:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <__brkval>
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <strnlen_P>:
     f6c:	fc 01       	movw	r30, r24
     f6e:	05 90       	lpm	r0, Z+
     f70:	61 50       	subi	r22, 0x01	; 1
     f72:	70 40       	sbci	r23, 0x00	; 0
     f74:	01 10       	cpse	r0, r1
     f76:	d8 f7       	brcc	.-10     	; 0xf6e <strnlen_P+0x2>
     f78:	80 95       	com	r24
     f7a:	90 95       	com	r25
     f7c:	8e 0f       	add	r24, r30
     f7e:	9f 1f       	adc	r25, r31
     f80:	08 95       	ret

00000f82 <memset>:
     f82:	dc 01       	movw	r26, r24
     f84:	01 c0       	rjmp	.+2      	; 0xf88 <memset+0x6>
     f86:	6d 93       	st	X+, r22
     f88:	41 50       	subi	r20, 0x01	; 1
     f8a:	50 40       	sbci	r21, 0x00	; 0
     f8c:	e0 f7       	brcc	.-8      	; 0xf86 <memset+0x4>
     f8e:	08 95       	ret

00000f90 <strnlen>:
     f90:	fc 01       	movw	r30, r24
     f92:	61 50       	subi	r22, 0x01	; 1
     f94:	70 40       	sbci	r23, 0x00	; 0
     f96:	01 90       	ld	r0, Z+
     f98:	01 10       	cpse	r0, r1
     f9a:	d8 f7       	brcc	.-10     	; 0xf92 <strnlen+0x2>
     f9c:	80 95       	com	r24
     f9e:	90 95       	com	r25
     fa0:	8e 0f       	add	r24, r30
     fa2:	9f 1f       	adc	r25, r31
     fa4:	08 95       	ret

00000fa6 <fputc>:
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	fb 01       	movw	r30, r22
     fb0:	23 81       	ldd	r18, Z+3	; 0x03
     fb2:	21 fd       	sbrc	r18, 1
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <fputc+0x16>
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	9f ef       	ldi	r25, 0xFF	; 255
     fba:	2c c0       	rjmp	.+88     	; 0x1014 <fputc+0x6e>
     fbc:	22 ff       	sbrs	r18, 2
     fbe:	16 c0       	rjmp	.+44     	; 0xfec <fputc+0x46>
     fc0:	46 81       	ldd	r20, Z+6	; 0x06
     fc2:	57 81       	ldd	r21, Z+7	; 0x07
     fc4:	24 81       	ldd	r18, Z+4	; 0x04
     fc6:	35 81       	ldd	r19, Z+5	; 0x05
     fc8:	42 17       	cp	r20, r18
     fca:	53 07       	cpc	r21, r19
     fcc:	44 f4       	brge	.+16     	; 0xfde <fputc+0x38>
     fce:	a0 81       	ld	r26, Z
     fd0:	b1 81       	ldd	r27, Z+1	; 0x01
     fd2:	9d 01       	movw	r18, r26
     fd4:	2f 5f       	subi	r18, 0xFF	; 255
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	31 83       	std	Z+1, r19	; 0x01
     fda:	20 83       	st	Z, r18
     fdc:	8c 93       	st	X, r24
     fde:	26 81       	ldd	r18, Z+6	; 0x06
     fe0:	37 81       	ldd	r19, Z+7	; 0x07
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	37 83       	std	Z+7, r19	; 0x07
     fe8:	26 83       	std	Z+6, r18	; 0x06
     fea:	14 c0       	rjmp	.+40     	; 0x1014 <fputc+0x6e>
     fec:	8b 01       	movw	r16, r22
     fee:	ec 01       	movw	r28, r24
     ff0:	fb 01       	movw	r30, r22
     ff2:	00 84       	ldd	r0, Z+8	; 0x08
     ff4:	f1 85       	ldd	r31, Z+9	; 0x09
     ff6:	e0 2d       	mov	r30, r0
     ff8:	09 95       	icall
     ffa:	89 2b       	or	r24, r25
     ffc:	e1 f6       	brne	.-72     	; 0xfb6 <fputc+0x10>
     ffe:	d8 01       	movw	r26, r16
    1000:	16 96       	adiw	r26, 0x06	; 6
    1002:	8d 91       	ld	r24, X+
    1004:	9c 91       	ld	r25, X
    1006:	17 97       	sbiw	r26, 0x07	; 7
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	17 96       	adiw	r26, 0x07	; 7
    100c:	9c 93       	st	X, r25
    100e:	8e 93       	st	-X, r24
    1010:	16 97       	sbiw	r26, 0x06	; 6
    1012:	ce 01       	movw	r24, r28
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	08 95       	ret

0000101e <__ultoa_invert>:
    101e:	fa 01       	movw	r30, r20
    1020:	aa 27       	eor	r26, r26
    1022:	28 30       	cpi	r18, 0x08	; 8
    1024:	51 f1       	breq	.+84     	; 0x107a <__ultoa_invert+0x5c>
    1026:	20 31       	cpi	r18, 0x10	; 16
    1028:	81 f1       	breq	.+96     	; 0x108a <__ultoa_invert+0x6c>
    102a:	e8 94       	clt
    102c:	6f 93       	push	r22
    102e:	6e 7f       	andi	r22, 0xFE	; 254
    1030:	6e 5f       	subi	r22, 0xFE	; 254
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	8f 4f       	sbci	r24, 0xFF	; 255
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	af 4f       	sbci	r26, 0xFF	; 255
    103a:	b1 e0       	ldi	r27, 0x01	; 1
    103c:	3e d0       	rcall	.+124    	; 0x10ba <__ultoa_invert+0x9c>
    103e:	b4 e0       	ldi	r27, 0x04	; 4
    1040:	3c d0       	rcall	.+120    	; 0x10ba <__ultoa_invert+0x9c>
    1042:	67 0f       	add	r22, r23
    1044:	78 1f       	adc	r23, r24
    1046:	89 1f       	adc	r24, r25
    1048:	9a 1f       	adc	r25, r26
    104a:	a1 1d       	adc	r26, r1
    104c:	68 0f       	add	r22, r24
    104e:	79 1f       	adc	r23, r25
    1050:	8a 1f       	adc	r24, r26
    1052:	91 1d       	adc	r25, r1
    1054:	a1 1d       	adc	r26, r1
    1056:	6a 0f       	add	r22, r26
    1058:	71 1d       	adc	r23, r1
    105a:	81 1d       	adc	r24, r1
    105c:	91 1d       	adc	r25, r1
    105e:	a1 1d       	adc	r26, r1
    1060:	20 d0       	rcall	.+64     	; 0x10a2 <__ultoa_invert+0x84>
    1062:	09 f4       	brne	.+2      	; 0x1066 <__ultoa_invert+0x48>
    1064:	68 94       	set
    1066:	3f 91       	pop	r19
    1068:	2a e0       	ldi	r18, 0x0A	; 10
    106a:	26 9f       	mul	r18, r22
    106c:	11 24       	eor	r1, r1
    106e:	30 19       	sub	r19, r0
    1070:	30 5d       	subi	r19, 0xD0	; 208
    1072:	31 93       	st	Z+, r19
    1074:	de f6       	brtc	.-74     	; 0x102c <__ultoa_invert+0xe>
    1076:	cf 01       	movw	r24, r30
    1078:	08 95       	ret
    107a:	46 2f       	mov	r20, r22
    107c:	47 70       	andi	r20, 0x07	; 7
    107e:	40 5d       	subi	r20, 0xD0	; 208
    1080:	41 93       	st	Z+, r20
    1082:	b3 e0       	ldi	r27, 0x03	; 3
    1084:	0f d0       	rcall	.+30     	; 0x10a4 <__ultoa_invert+0x86>
    1086:	c9 f7       	brne	.-14     	; 0x107a <__ultoa_invert+0x5c>
    1088:	f6 cf       	rjmp	.-20     	; 0x1076 <__ultoa_invert+0x58>
    108a:	46 2f       	mov	r20, r22
    108c:	4f 70       	andi	r20, 0x0F	; 15
    108e:	40 5d       	subi	r20, 0xD0	; 208
    1090:	4a 33       	cpi	r20, 0x3A	; 58
    1092:	18 f0       	brcs	.+6      	; 0x109a <__ultoa_invert+0x7c>
    1094:	49 5d       	subi	r20, 0xD9	; 217
    1096:	31 fd       	sbrc	r19, 1
    1098:	40 52       	subi	r20, 0x20	; 32
    109a:	41 93       	st	Z+, r20
    109c:	02 d0       	rcall	.+4      	; 0x10a2 <__ultoa_invert+0x84>
    109e:	a9 f7       	brne	.-22     	; 0x108a <__ultoa_invert+0x6c>
    10a0:	ea cf       	rjmp	.-44     	; 0x1076 <__ultoa_invert+0x58>
    10a2:	b4 e0       	ldi	r27, 0x04	; 4
    10a4:	a6 95       	lsr	r26
    10a6:	97 95       	ror	r25
    10a8:	87 95       	ror	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	ba 95       	dec	r27
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__ultoa_invert+0x86>
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	61 05       	cpc	r22, r1
    10b6:	71 05       	cpc	r23, r1
    10b8:	08 95       	ret
    10ba:	9b 01       	movw	r18, r22
    10bc:	ac 01       	movw	r20, r24
    10be:	0a 2e       	mov	r0, r26
    10c0:	06 94       	lsr	r0
    10c2:	57 95       	ror	r21
    10c4:	47 95       	ror	r20
    10c6:	37 95       	ror	r19
    10c8:	27 95       	ror	r18
    10ca:	ba 95       	dec	r27
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <__ultoa_invert+0xa2>
    10ce:	62 0f       	add	r22, r18
    10d0:	73 1f       	adc	r23, r19
    10d2:	84 1f       	adc	r24, r20
    10d4:	95 1f       	adc	r25, r21
    10d6:	a0 1d       	adc	r26, r0
    10d8:	08 95       	ret

000010da <__prologue_saves__>:
    10da:	2f 92       	push	r2
    10dc:	3f 92       	push	r3
    10de:	4f 92       	push	r4
    10e0:	5f 92       	push	r5
    10e2:	6f 92       	push	r6
    10e4:	7f 92       	push	r7
    10e6:	8f 92       	push	r8
    10e8:	9f 92       	push	r9
    10ea:	af 92       	push	r10
    10ec:	bf 92       	push	r11
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	ca 1b       	sub	r28, r26
    1104:	db 0b       	sbc	r29, r27
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    1110:	09 94       	ijmp

00001112 <__epilogue_restores__>:
    1112:	2a 88       	ldd	r2, Y+18	; 0x12
    1114:	39 88       	ldd	r3, Y+17	; 0x11
    1116:	48 88       	ldd	r4, Y+16	; 0x10
    1118:	5f 84       	ldd	r5, Y+15	; 0x0f
    111a:	6e 84       	ldd	r6, Y+14	; 0x0e
    111c:	7d 84       	ldd	r7, Y+13	; 0x0d
    111e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1120:	9b 84       	ldd	r9, Y+11	; 0x0b
    1122:	aa 84       	ldd	r10, Y+10	; 0x0a
    1124:	b9 84       	ldd	r11, Y+9	; 0x09
    1126:	c8 84       	ldd	r12, Y+8	; 0x08
    1128:	df 80       	ldd	r13, Y+7	; 0x07
    112a:	ee 80       	ldd	r14, Y+6	; 0x06
    112c:	fd 80       	ldd	r15, Y+5	; 0x05
    112e:	0c 81       	ldd	r16, Y+4	; 0x04
    1130:	1b 81       	ldd	r17, Y+3	; 0x03
    1132:	aa 81       	ldd	r26, Y+2	; 0x02
    1134:	b9 81       	ldd	r27, Y+1	; 0x01
    1136:	ce 0f       	add	r28, r30
    1138:	d1 1d       	adc	r29, r1
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	ed 01       	movw	r28, r26
    1146:	08 95       	ret

00001148 <_exit>:
    1148:	f8 94       	cli

0000114a <__stop_program>:
    114a:	ff cf       	rjmp	.-2      	; 0x114a <__stop_program>

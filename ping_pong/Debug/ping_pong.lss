
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  000010ce  00001162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080019a  0080019a  000011fc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002199  00000000  00000000  000014bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f6  00000000  00000000  00003655  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011cf  00000000  00000000  0000474b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  0000591c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a0  00000000  00000000  00005d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc0  00000000  00000000  00006510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	ee ec       	ldi	r30, 0xCE	; 206
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	aa 39       	cpi	r26, 0x9A	; 154
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	aa e9       	ldi	r26, 0x9A	; 154
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a9 3a       	cpi	r26, 0xA9	; 169
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <main>
      a6:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:

}
*/

void ADC_Init() {
	DDRB = (1 << DDB1);
      ae:	82 e0       	ldi	r24, 0x02	; 2
      b0:	87 bb       	out	0x17, r24	; 23
	OCR2 = 128;
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	82 bd       	out	0x22, r24	; 34
	TCCR2 |= (1 << COM21);
      b6:	87 b5       	in	r24, 0x27	; 39
      b8:	80 62       	ori	r24, 0x20	; 32
      ba:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << WGM21) | (1 << WGM20);
      bc:	87 b5       	in	r24, 0x27	; 39
      be:	88 64       	ori	r24, 0x48	; 72
      c0:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << CS20);
      c2:	87 b5       	in	r24, 0x27	; 39
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	87 bd       	out	0x27, r24	; 39
      c8:	08 95       	ret

000000ca <ADC_Read>:
int ADC_Read (int channel) {
	//Pulse on WR
	

	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
      ca:	21 e0       	ldi	r18, 0x01	; 1
      cc:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x1257>
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
	int Tconv = (9*4*2)/4912000;
	_delay_ms(Tconv);

	int  value=0;
      d4:	60 e0       	ldi	r22, 0x00	; 0
      d6:	70 e0       	ldi	r23, 0x00	; 0
	
	//Pulses on RD
	for (int i=0;i<4;i++){
      d8:	0c c0       	rjmp	.+24     	; 0xf2 <ADC_Read+0x28>
		uint8_t  read = ext_mem[0x1400];
      da:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <__bss_end+0x1257>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      de:	5c e3       	ldi	r21, 0x3C	; 60
      e0:	5a 95       	dec	r21
      e2:	f1 f7       	brne	.-4      	; 0xe0 <ADC_Read+0x16>
		_delay_ms(0.18);
		if (i == channel){
      e4:	28 17       	cp	r18, r24
      e6:	39 07       	cpc	r19, r25
      e8:	11 f4       	brne	.+4      	; 0xee <ADC_Read+0x24>
			 value = read;
      ea:	64 2f       	mov	r22, r20
      ec:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
      ee:	2f 5f       	subi	r18, 0xFF	; 255
      f0:	3f 4f       	sbci	r19, 0xFF	; 255
      f2:	24 30       	cpi	r18, 0x04	; 4
      f4:	31 05       	cpc	r19, r1
      f6:	8c f3       	brlt	.-30     	; 0xda <ADC_Read+0x10>
		if (i == channel){
			 value = read;
		}
	}
	return value;
}
      f8:	cb 01       	movw	r24, r22
      fa:	08 95       	ret

000000fc <can_init>:
#include "mcp2515.h"
#include "SPI.h"


void can_init() {
	mcp_init();
      fc:	0e 94 20 03 	call	0x640	; 0x640 <mcp_init>
	mcp_write(MCP_CNF1, 0x03);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	8a e2       	ldi	r24, 0x2A	; 42
     104:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_write>
	mcp_write(MCP_CNF2, 0xb1);
     108:	61 eb       	ldi	r22, 0xB1	; 177
     10a:	89 e2       	ldi	r24, 0x29	; 41
     10c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_write>
	mcp_write(MCP_CNF3, 0x05);
     110:	65 e0       	ldi	r22, 0x05	; 5
     112:	88 e2       	ldi	r24, 0x28	; 40
     114:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_write>
	
	mcp_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	60 ee       	ldi	r22, 0xE0	; 224
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	0e 94 36 03 	call	0x66c	; 0x66c <mcp_bit_modify>
     122:	08 95       	ret

00000124 <can_send>:
}

	
void can_send(can_message* message) {  //TODO : Synchro clock noeud
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	8c 01       	movw	r16, r24
	mcp_write(MCP_TXB0SIDH, message->id >> 3);
     12e:	fc 01       	movw	r30, r24
     130:	60 81       	ld	r22, Z
     132:	71 81       	ldd	r23, Z+1	; 0x01
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	76 95       	lsr	r23
     13a:	67 95       	ror	r22
     13c:	76 95       	lsr	r23
     13e:	67 95       	ror	r22
     140:	81 e3       	ldi	r24, 0x31	; 49
     142:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_write>
	mcp_write(MCP_TXB0SIDL, message->id << 5);
     146:	f8 01       	movw	r30, r16
     148:	60 81       	ld	r22, Z
     14a:	62 95       	swap	r22
     14c:	66 0f       	add	r22, r22
     14e:	60 7e       	andi	r22, 0xE0	; 224
     150:	82 e3       	ldi	r24, 0x32	; 50
     152:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_write>
	mcp_write(MCP_TXB0DLC, message->length);
     156:	f8 01       	movw	r30, r16
     158:	62 81       	ldd	r22, Z+2	; 0x02
     15a:	85 e3       	ldi	r24, 0x35	; 53
     15c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_write>
	
	for(int i = 0; i < message->length; i++) {
     160:	c0 e0       	ldi	r28, 0x00	; 0
     162:	d0 e0       	ldi	r29, 0x00	; 0
     164:	09 c0       	rjmp	.+18     	; 0x178 <can_send+0x54>
		mcp_write(MCP_TXB0D0 + (uint8_t)i, message->data[i]);
     166:	f8 01       	movw	r30, r16
     168:	ec 0f       	add	r30, r28
     16a:	fd 1f       	adc	r31, r29
     16c:	63 81       	ldd	r22, Z+3	; 0x03
     16e:	8c 2f       	mov	r24, r28
     170:	8a 5c       	subi	r24, 0xCA	; 202
     172:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_write>
void can_send(can_message* message) {  //TODO : Synchro clock noeud
	mcp_write(MCP_TXB0SIDH, message->id >> 3);
	mcp_write(MCP_TXB0SIDL, message->id << 5);
	mcp_write(MCP_TXB0DLC, message->length);
	
	for(int i = 0; i < message->length; i++) {
     176:	21 96       	adiw	r28, 0x01	; 1
     178:	f8 01       	movw	r30, r16
     17a:	82 81       	ldd	r24, Z+2	; 0x02
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	c8 17       	cp	r28, r24
     180:	d9 07       	cpc	r29, r25
     182:	8c f3       	brlt	.-30     	; 0x166 <can_send+0x42>
		mcp_write(MCP_TXB0D0 + (uint8_t)i, message->data[i]);
	}
	
	mcp_request_send(0);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 ed 02 	call	0x5da	; 0x5da <mcp_request_send>
	
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <joystick_calibrate>:
#include "ADC.h"
#include "CAN.h"

volatile joystick_pos mean_pos;

joystick_pos joystick_calibrate(){
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
	
	mean_pos.x = ADC_Read(1);
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     1a2:	ca e9       	ldi	r28, 0x9A	; 154
     1a4:	d1 e0       	ldi	r29, 0x01	; 1
     1a6:	88 83       	st	Y, r24
	mean_pos.y = ADC_Read(0);
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     1b0:	89 83       	std	Y+1, r24	; 0x01
	
	return mean_pos;
     1b2:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <__data_end>
     1b6:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <__data_end+0x1>
     1ba:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end+0x2>
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <get_joystick_dir>:

	
	return pos;
}

joystick_dir get_joystick_dir() {
     1c4:	cf 93       	push	r28
	joystick_dir dir;
	joystick_pos pos;
	pos.x = ADC_Read(1);
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     1ce:	c8 2f       	mov	r28, r24
	pos.y = ADC_Read(0);
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
	dir = NEUTRAL;
	
	
	if (abs(mean_pos.x - pos.x) < 10 & abs(mean_pos.y - pos.y) < 10) 
     1d8:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <__data_end>
     1dc:	6c 2f       	mov	r22, r28
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	26 1b       	sub	r18, r22
     1e4:	37 0b       	sbc	r19, r23
     1e6:	a9 01       	movw	r20, r18
     1e8:	22 f4       	brpl	.+8      	; 0x1f2 <get_joystick_dir+0x2e>
     1ea:	44 27       	eor	r20, r20
     1ec:	55 27       	eor	r21, r21
     1ee:	42 1b       	sub	r20, r18
     1f0:	53 0b       	sbc	r21, r19
     1f2:	fa 01       	movw	r30, r20
     1f4:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <__data_end+0x1>
     1f8:	a8 2f       	mov	r26, r24
     1fa:	b0 e0       	ldi	r27, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	2a 1b       	sub	r18, r26
     200:	3b 0b       	sbc	r19, r27
     202:	a9 01       	movw	r20, r18
     204:	22 f4       	brpl	.+8      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
     206:	44 27       	eor	r20, r20
     208:	55 27       	eor	r21, r21
     20a:	42 1b       	sub	r20, r18
     20c:	53 0b       	sbc	r21, r19
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	3a 97       	sbiw	r30, 0x0a	; 10
     212:	0c f0       	brlt	.+2      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	4a 30       	cpi	r20, 0x0A	; 10
     21a:	51 05       	cpc	r21, r1
     21c:	0c f0       	brlt	.+2      	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	92 23       	and	r25, r18
     222:	19 f5       	brne	.+70     	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
	{
		return NEUTRAL;
	} else {
		if (abs(pos.x - mean_pos.x) > abs(pos.y - mean_pos.y)) {
     224:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <__data_end>
     228:	69 1b       	sub	r22, r25
     22a:	71 09       	sbc	r23, r1
     22c:	9b 01       	movw	r18, r22
     22e:	22 f4       	brpl	.+8      	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
     230:	22 27       	eor	r18, r18
     232:	33 27       	eor	r19, r19
     234:	26 1b       	sub	r18, r22
     236:	37 0b       	sbc	r19, r23
     238:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
     23c:	a9 1b       	sub	r26, r25
     23e:	b1 09       	sbc	r27, r1
     240:	ad 01       	movw	r20, r26
     242:	22 f4       	brpl	.+8      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
     244:	44 27       	eor	r20, r20
     246:	55 27       	eor	r21, r21
     248:	4a 1b       	sub	r20, r26
     24a:	5b 0b       	sbc	r21, r27
     24c:	42 17       	cp	r20, r18
     24e:	53 07       	cpc	r21, r19
     250:	34 f4       	brge	.+12     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
			if (pos.x > mean_pos.x) {
     252:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <__data_end>
     256:	8c 17       	cp	r24, r28
     258:	50 f4       	brcc	.+20     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
				return RIGHT;
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	0b c0       	rjmp	.+22     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
			} else {
				return LEFT;
			}
		} else {
			if (pos.y > mean_pos.y) {
     25e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <__data_end+0x1>
     262:	98 17       	cp	r25, r24
     264:	30 f4       	brcc	.+12     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
				return UP;
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	05 c0       	rjmp	.+10     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
	dir = NEUTRAL;
	
	
	if (abs(mean_pos.x - pos.x) < 10 & abs(mean_pos.y - pos.y) < 10) 
	{
		return NEUTRAL;
     26a:	84 e0       	ldi	r24, 0x04	; 4
     26c:	03 c0       	rjmp	.+6      	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
	} else {
		if (abs(pos.x - mean_pos.x) > abs(pos.y - mean_pos.y)) {
			if (pos.x > mean_pos.x) {
				return RIGHT;
			} else {
				return LEFT;
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	01 c0       	rjmp	.+2      	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
			}
		} else {
			if (pos.y > mean_pos.y) {
				return UP;
			} else {
				return DOWN;
     272:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return dir;
	
}
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <get_joystick_pos>:
	mean_pos.y = ADC_Read(0);
	
	return mean_pos;
}

joystick_pos get_joystick_pos(){
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
	joystick_pos pos;
	joystick_dir dir;
	
	dir = get_joystick_dir();
     27e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <get_joystick_dir>
	
	
	switch (dir)
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	09 f4       	brne	.+2      	; 0x288 <get_joystick_pos+0x10>
     286:	88 c0       	rjmp	.+272    	; 0x398 <get_joystick_pos+0x120>
     288:	30 f4       	brcc	.+12     	; 0x296 <get_joystick_pos+0x1e>
     28a:	88 23       	and	r24, r24
     28c:	59 f0       	breq	.+22     	; 0x2a4 <get_joystick_pos+0x2c>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	09 f4       	brne	.+2      	; 0x294 <get_joystick_pos+0x1c>
     292:	c5 c0       	rjmp	.+394    	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
     294:	0a c1       	rjmp	.+532    	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
     296:	83 30       	cpi	r24, 0x03	; 3
     298:	09 f4       	brne	.+2      	; 0x29c <get_joystick_pos+0x24>
     29a:	41 c0       	rjmp	.+130    	; 0x31e <get_joystick_pos+0xa6>
     29c:	84 30       	cpi	r24, 0x04	; 4
     29e:	09 f4       	brne	.+2      	; 0x2a2 <get_joystick_pos+0x2a>
     2a0:	01 c1       	rjmp	.+514    	; 0x4a4 <__DATA_REGION_LENGTH__+0xa4>
     2a2:	03 c1       	rjmp	.+518    	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
	{
	case UP:
		pos.y = (uint8_t)abs(((ADC_Read(0) - mean_pos.y) * 100) / (223 - mean_pos.y));
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     2ac:	ea e9       	ldi	r30, 0x9A	; 154
     2ae:	f1 e0       	ldi	r31, 0x01	; 1
     2b0:	21 81       	ldd	r18, Z+1	; 0x01
     2b2:	82 1b       	sub	r24, r18
     2b4:	91 09       	sbc	r25, r1
     2b6:	9c 01       	movw	r18, r24
     2b8:	44 e6       	ldi	r20, 0x64	; 100
     2ba:	42 9f       	mul	r20, r18
     2bc:	c0 01       	movw	r24, r0
     2be:	43 9f       	mul	r20, r19
     2c0:	90 0d       	add	r25, r0
     2c2:	11 24       	eor	r1, r1
     2c4:	21 81       	ldd	r18, Z+1	; 0x01
     2c6:	6f ed       	ldi	r22, 0xDF	; 223
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	62 1b       	sub	r22, r18
     2cc:	71 09       	sbc	r23, r1
     2ce:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divmodhi4>
     2d2:	cb 01       	movw	r24, r22
     2d4:	99 23       	and	r25, r25
     2d6:	24 f4       	brge	.+8      	; 0x2e0 <get_joystick_pos+0x68>
     2d8:	88 27       	eor	r24, r24
     2da:	99 27       	eor	r25, r25
     2dc:	86 1b       	sub	r24, r22
     2de:	97 0b       	sbc	r25, r23
     2e0:	18 2f       	mov	r17, r24
		pos.x = (uint8_t)abs(((ADC_Read(1) - mean_pos.x) * 100) / mean_pos.x);
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     2ea:	ea e9       	ldi	r30, 0x9A	; 154
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	20 81       	ld	r18, Z
     2f0:	82 1b       	sub	r24, r18
     2f2:	91 09       	sbc	r25, r1
     2f4:	9c 01       	movw	r18, r24
     2f6:	44 e6       	ldi	r20, 0x64	; 100
     2f8:	42 9f       	mul	r20, r18
     2fa:	c0 01       	movw	r24, r0
     2fc:	43 9f       	mul	r20, r19
     2fe:	90 0d       	add	r25, r0
     300:	11 24       	eor	r1, r1
     302:	60 81       	ld	r22, Z
     304:	70 e0       	ldi	r23, 0x00	; 0
     306:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divmodhi4>
     30a:	cb 01       	movw	r24, r22
     30c:	99 23       	and	r25, r25
     30e:	24 f4       	brge	.+8      	; 0x318 <get_joystick_pos+0xa0>
     310:	88 27       	eor	r24, r24
     312:	99 27       	eor	r25, r25
     314:	86 1b       	sub	r24, r22
     316:	97 0b       	sbc	r25, r23
     318:	d8 2f       	mov	r29, r24
		pos.dir = UP;
     31a:	c0 e0       	ldi	r28, 0x00	; 0
		//printf("Direction : UP ");
		break;
     31c:	c6 c0       	rjmp	.+396    	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
	case RIGHT:
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / (223 - mean_pos.x));
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     326:	ea e9       	ldi	r30, 0x9A	; 154
     328:	f1 e0       	ldi	r31, 0x01	; 1
     32a:	20 81       	ld	r18, Z
     32c:	82 1b       	sub	r24, r18
     32e:	91 09       	sbc	r25, r1
     330:	9c 01       	movw	r18, r24
     332:	44 e6       	ldi	r20, 0x64	; 100
     334:	42 9f       	mul	r20, r18
     336:	c0 01       	movw	r24, r0
     338:	43 9f       	mul	r20, r19
     33a:	90 0d       	add	r25, r0
     33c:	11 24       	eor	r1, r1
     33e:	20 81       	ld	r18, Z
     340:	6f ed       	ldi	r22, 0xDF	; 223
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	62 1b       	sub	r22, r18
     346:	71 09       	sbc	r23, r1
     348:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divmodhi4>
     34c:	cb 01       	movw	r24, r22
     34e:	99 23       	and	r25, r25
     350:	24 f4       	brge	.+8      	; 0x35a <get_joystick_pos+0xe2>
     352:	88 27       	eor	r24, r24
     354:	99 27       	eor	r25, r25
     356:	86 1b       	sub	r24, r22
     358:	97 0b       	sbc	r25, r23
     35a:	d8 2f       	mov	r29, r24
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / mean_pos.y);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     364:	ea e9       	ldi	r30, 0x9A	; 154
     366:	f1 e0       	ldi	r31, 0x01	; 1
     368:	21 81       	ldd	r18, Z+1	; 0x01
     36a:	82 1b       	sub	r24, r18
     36c:	91 09       	sbc	r25, r1
     36e:	9c 01       	movw	r18, r24
     370:	44 e6       	ldi	r20, 0x64	; 100
     372:	42 9f       	mul	r20, r18
     374:	c0 01       	movw	r24, r0
     376:	43 9f       	mul	r20, r19
     378:	90 0d       	add	r25, r0
     37a:	11 24       	eor	r1, r1
     37c:	61 81       	ldd	r22, Z+1	; 0x01
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divmodhi4>
     384:	cb 01       	movw	r24, r22
     386:	99 23       	and	r25, r25
     388:	24 f4       	brge	.+8      	; 0x392 <get_joystick_pos+0x11a>
     38a:	88 27       	eor	r24, r24
     38c:	99 27       	eor	r25, r25
     38e:	86 1b       	sub	r24, r22
     390:	97 0b       	sbc	r25, r23
     392:	18 2f       	mov	r17, r24
		pos.dir = RIGHT;
     394:	c3 e0       	ldi	r28, 0x03	; 3
		//printf("Direction : RIGHT ");
		break;
     396:	89 c0       	rjmp	.+274    	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
	case LEFT:
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / abs(3 - mean_pos.x));
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     3a0:	ea e9       	ldi	r30, 0x9A	; 154
     3a2:	f1 e0       	ldi	r31, 0x01	; 1
     3a4:	20 81       	ld	r18, Z
     3a6:	82 1b       	sub	r24, r18
     3a8:	91 09       	sbc	r25, r1
     3aa:	9c 01       	movw	r18, r24
     3ac:	44 e6       	ldi	r20, 0x64	; 100
     3ae:	42 9f       	mul	r20, r18
     3b0:	c0 01       	movw	r24, r0
     3b2:	43 9f       	mul	r20, r19
     3b4:	90 0d       	add	r25, r0
     3b6:	11 24       	eor	r1, r1
     3b8:	40 81       	ld	r20, Z
     3ba:	23 e0       	ldi	r18, 0x03	; 3
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	24 1b       	sub	r18, r20
     3c0:	31 09       	sbc	r19, r1
     3c2:	b9 01       	movw	r22, r18
     3c4:	22 f4       	brpl	.+8      	; 0x3ce <get_joystick_pos+0x156>
     3c6:	66 27       	eor	r22, r22
     3c8:	77 27       	eor	r23, r23
     3ca:	62 1b       	sub	r22, r18
     3cc:	73 0b       	sbc	r23, r19
     3ce:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divmodhi4>
     3d2:	cb 01       	movw	r24, r22
     3d4:	99 23       	and	r25, r25
     3d6:	24 f4       	brge	.+8      	; 0x3e0 <get_joystick_pos+0x168>
     3d8:	88 27       	eor	r24, r24
     3da:	99 27       	eor	r25, r25
     3dc:	86 1b       	sub	r24, r22
     3de:	97 0b       	sbc	r25, r23
     3e0:	d8 2f       	mov	r29, r24
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / mean_pos.y);
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     3ea:	ea e9       	ldi	r30, 0x9A	; 154
     3ec:	f1 e0       	ldi	r31, 0x01	; 1
     3ee:	21 81       	ldd	r18, Z+1	; 0x01
     3f0:	82 1b       	sub	r24, r18
     3f2:	91 09       	sbc	r25, r1
     3f4:	9c 01       	movw	r18, r24
     3f6:	44 e6       	ldi	r20, 0x64	; 100
     3f8:	42 9f       	mul	r20, r18
     3fa:	c0 01       	movw	r24, r0
     3fc:	43 9f       	mul	r20, r19
     3fe:	90 0d       	add	r25, r0
     400:	11 24       	eor	r1, r1
     402:	61 81       	ldd	r22, Z+1	; 0x01
     404:	70 e0       	ldi	r23, 0x00	; 0
     406:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divmodhi4>
     40a:	cb 01       	movw	r24, r22
     40c:	99 23       	and	r25, r25
     40e:	24 f4       	brge	.+8      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
     410:	88 27       	eor	r24, r24
     412:	99 27       	eor	r25, r25
     414:	86 1b       	sub	r24, r22
     416:	97 0b       	sbc	r25, r23
     418:	18 2f       	mov	r17, r24
		pos.dir = LEFT;
     41a:	c2 e0       	ldi	r28, 0x02	; 2
		//printf("Direction : LEFT ");
		break;
     41c:	46 c0       	rjmp	.+140    	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
	case DOWN:
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / abs(3 - mean_pos.y));
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     426:	ea e9       	ldi	r30, 0x9A	; 154
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	21 81       	ldd	r18, Z+1	; 0x01
     42c:	82 1b       	sub	r24, r18
     42e:	91 09       	sbc	r25, r1
     430:	9c 01       	movw	r18, r24
     432:	44 e6       	ldi	r20, 0x64	; 100
     434:	42 9f       	mul	r20, r18
     436:	c0 01       	movw	r24, r0
     438:	43 9f       	mul	r20, r19
     43a:	90 0d       	add	r25, r0
     43c:	11 24       	eor	r1, r1
     43e:	41 81       	ldd	r20, Z+1	; 0x01
     440:	23 e0       	ldi	r18, 0x03	; 3
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	24 1b       	sub	r18, r20
     446:	31 09       	sbc	r19, r1
     448:	b9 01       	movw	r22, r18
     44a:	22 f4       	brpl	.+8      	; 0x454 <__DATA_REGION_LENGTH__+0x54>
     44c:	66 27       	eor	r22, r22
     44e:	77 27       	eor	r23, r23
     450:	62 1b       	sub	r22, r18
     452:	73 0b       	sbc	r23, r19
     454:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divmodhi4>
     458:	cb 01       	movw	r24, r22
     45a:	99 23       	and	r25, r25
     45c:	24 f4       	brge	.+8      	; 0x466 <__DATA_REGION_LENGTH__+0x66>
     45e:	88 27       	eor	r24, r24
     460:	99 27       	eor	r25, r25
     462:	86 1b       	sub	r24, r22
     464:	97 0b       	sbc	r25, r23
     466:	18 2f       	mov	r17, r24
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / mean_pos.x);
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     470:	ea e9       	ldi	r30, 0x9A	; 154
     472:	f1 e0       	ldi	r31, 0x01	; 1
     474:	20 81       	ld	r18, Z
     476:	82 1b       	sub	r24, r18
     478:	91 09       	sbc	r25, r1
     47a:	9c 01       	movw	r18, r24
     47c:	44 e6       	ldi	r20, 0x64	; 100
     47e:	42 9f       	mul	r20, r18
     480:	c0 01       	movw	r24, r0
     482:	43 9f       	mul	r20, r19
     484:	90 0d       	add	r25, r0
     486:	11 24       	eor	r1, r1
     488:	60 81       	ld	r22, Z
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <__divmodhi4>
     490:	cb 01       	movw	r24, r22
     492:	99 23       	and	r25, r25
     494:	24 f4       	brge	.+8      	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
     496:	88 27       	eor	r24, r24
     498:	99 27       	eor	r25, r25
     49a:	86 1b       	sub	r24, r22
     49c:	97 0b       	sbc	r25, r23
     49e:	d8 2f       	mov	r29, r24
		pos.dir = DOWN;
     4a0:	c1 e0       	ldi	r28, 0x01	; 1
		//printf("Direction : DOWN ");
		break;
     4a2:	03 c0       	rjmp	.+6      	; 0x4aa <__DATA_REGION_LENGTH__+0xaa>
	case NEUTRAL:
		pos.x = 0;
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
		pos.y = 0;
     4a6:	10 e0       	ldi	r17, 0x00	; 0
		pos.dir = NEUTRAL;
     4a8:	c4 e0       	ldi	r28, 0x04	; 4
	}
	

	
	return pos;
}
     4aa:	6d 2f       	mov	r22, r29
     4ac:	71 2f       	mov	r23, r17
     4ae:	8c 2f       	mov	r24, r28
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	08 95       	ret

000004b8 <main>:
#define FOSC 4915200// Clock Speed
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

int main(void)
{
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	2b 97       	sbiw	r28, 0x0b	; 11
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	de bf       	out	0x3e, r29	; 62
     4c8:	0f be       	out	0x3f, r0	; 63
     4ca:	cd bf       	out	0x3d, r28	; 61
			

	//Drivers init
	UART_Init(MYUBRR);
     4cc:	8f e1       	ldi	r24, 0x1F	; 31
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 c3 03 	call	0x786	; 0x786 <UART_Init>
	SRAM_Init();
     4d4:	0e 94 b0 03 	call	0x760	; 0x760 <SRAM_Init>
	ADC_Init();
     4d8:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	joystick_calibrate();
     4dc:	0e 94 cb 00 	call	0x196	; 0x196 <joystick_calibrate>
	OLED_init();
     4e0:	0e 94 57 03 	call	0x6ae	; 0x6ae <OLED_init>
	can_init();
     4e4:	0e 94 7e 00 	call	0xfc	; 0xfc <can_init>
	////Ports setting 
	//DDRE = 0b11111111;
    //DDRA = 0b11111111; 
	//DDRD |= 0b11000000;
	//DDRC = DDRC | 0b00001111;
	PORTE = 0b00000010;
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	87 b9       	out	0x07, r24	; 7
	//PORTA = 0b00000000;
	//PORTB = (0<<PB1)|(0<<PB0);
	//PORTD = (1<<PD6)|(1<<PD7);
	//PORTC =0b00000000;
	
	DDRE &= ~(1 << PE0);
     4ec:	86 b1       	in	r24, 0x06	; 6
     4ee:	8e 7f       	andi	r24, 0xFE	; 254
     4f0:	86 b9       	out	0x06, r24	; 6
	GICR &= 0b00000111;
     4f2:	8b b7       	in	r24, 0x3b	; 59
     4f4:	87 70       	andi	r24, 0x07	; 7
     4f6:	8b bf       	out	0x3b, r24	; 59
	EMCUCR &= ~(1 << ISC2);
     4f8:	86 b7       	in	r24, 0x36	; 54
     4fa:	8e 7f       	andi	r24, 0xFE	; 254
     4fc:	86 bf       	out	0x36, r24	; 54
	GIFR |= (1 << INTF2);
     4fe:	8a b7       	in	r24, 0x3a	; 58
     500:	80 62       	ori	r24, 0x20	; 32
     502:	8a bf       	out	0x3a, r24	; 58
	GICR |= (1 << INT2);
     504:	8b b7       	in	r24, 0x3b	; 59
     506:	80 62       	ori	r24, 0x20	; 32
     508:	8b bf       	out	0x3b, r24	; 59
	sei();
     50a:	78 94       	sei
  
  
	can_message to_send;
	can_message received;
	
	to_send.id = 43;
     50c:	8b e2       	ldi	r24, 0x2B	; 43
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	9a 83       	std	Y+2, r25	; 0x02
     512:	89 83       	std	Y+1, r24	; 0x01
	to_send.length = 3;
     514:	83 e0       	ldi	r24, 0x03	; 3
     516:	8b 83       	std	Y+3, r24	; 0x03
	int i = 3;
     518:	03 e0       	ldi	r16, 0x03	; 3
     51a:	10 e0       	ldi	r17, 0x00	; 0
		 //receive = can_receive();
		 //printf("RECEIVE => length:  %d \n\rid: %d \n\rdata: %s \n\r", receive.length, receive.id, receive.data);
		 
		 //printf("----------------------------------------------------------------------------------------------------------------------\n\r");
		joystick_pos pos;
		i++;
     51c:	0f 5f       	subi	r16, 0xFF	; 255
     51e:	1f 4f       	sbci	r17, 0xFF	; 255
		pos = get_joystick_pos();
     520:	0e 94 3c 01 	call	0x278	; 0x278 <get_joystick_pos>
		//to_send.id = 12;
		//to_send.length = 1;
		to_send.data[0] = i;
     524:	0c 83       	std	Y+4, r16	; 0x04
		//to_send.data[0] = pos.x;
		//to_send.data[0] = pos.y;
		to_send.data[1] = pos.x;
     526:	6d 83       	std	Y+5, r22	; 0x05
		to_send.data[2] = pos.dir;
     528:	8e 83       	std	Y+6, r24	; 0x06
		
		can_send(&to_send);
     52a:	ce 01       	movw	r24, r28
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	0e 94 92 00 	call	0x124	; 0x124 <can_send>
		//send_joystick_pos(&to_send);
			
		printf("Vertical : %d      Horizontal  %d   DIR : %s \r\n LENGHT : %d     ID : %d \r\n", to_send.data[0], to_send.data[1], (to_send.data[2] == RIGHT) ? "rigth" : "de lamerde", to_send.length, to_send.id);
     532:	59 81       	ldd	r21, Y+1	; 0x01
     534:	6a 81       	ldd	r22, Y+2	; 0x02
     536:	4b 81       	ldd	r20, Y+3	; 0x03
     538:	8e 81       	ldd	r24, Y+6	; 0x06
     53a:	83 30       	cpi	r24, 0x03	; 3
     53c:	19 f4       	brne	.+6      	; 0x544 <__stack+0x45>
     53e:	86 e0       	ldi	r24, 0x06	; 6
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	02 c0       	rjmp	.+4      	; 0x548 <__stack+0x49>
     544:	8c e0       	ldi	r24, 0x0C	; 12
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	3d 81       	ldd	r19, Y+5	; 0x05
     54a:	2c 81       	ldd	r18, Y+4	; 0x04
     54c:	6f 93       	push	r22
     54e:	5f 93       	push	r21
     550:	1f 92       	push	r1
     552:	4f 93       	push	r20
     554:	9f 93       	push	r25
     556:	8f 93       	push	r24
     558:	1f 92       	push	r1
     55a:	3f 93       	push	r19
     55c:	1f 92       	push	r1
     55e:	2f 93       	push	r18
     560:	87 e1       	ldi	r24, 0x17	; 23
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	9f 93       	push	r25
     566:	8f 93       	push	r24
     568:	0e 94 43 04 	call	0x886	; 0x886 <printf>
     56c:	2f ef       	ldi	r18, 0xFF	; 255
     56e:	8f e7       	ldi	r24, 0x7F	; 127
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	21 50       	subi	r18, 0x01	; 1
     574:	80 40       	sbci	r24, 0x00	; 0
     576:	90 40       	sbci	r25, 0x00	; 0
     578:	e1 f7       	brne	.-8      	; 0x572 <__stack+0x73>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <__stack+0x7d>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <__stack+0x7f>
		_delay_ms(1000);*/
		
		
		
		//_delay_ms(5000);
    }
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
     588:	c9 cf       	rjmp	.-110    	; 0x51c <__stack+0x1d>

0000058a <mcp_read>:
		PORTB &= ~(1 << PINB4);
		
		SPI_MasterTransmit(MCP_READ_STATUS);
		result = SPI_MaserRead();
		
		PORTB |= (1 << PINB4);
     58a:	cf 93       	push	r28
     58c:	c8 2f       	mov	r28, r24
     58e:	88 b3       	in	r24, 0x18	; 24
     590:	8f 7e       	andi	r24, 0xEF	; 239
     592:	88 bb       	out	0x18, r24	; 24
     594:	83 e0       	ldi	r24, 0x03	; 3
     596:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     59a:	8c 2f       	mov	r24, r28
     59c:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     5a0:	0e 94 a9 03 	call	0x752	; 0x752 <SPI_MaserRead>
     5a4:	98 b3       	in	r25, 0x18	; 24
     5a6:	90 61       	ori	r25, 0x10	; 16
     5a8:	98 bb       	out	0x18, r25	; 24
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <mcp_write>:
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	d8 2f       	mov	r29, r24
     5b4:	c6 2f       	mov	r28, r22
     5b6:	88 b3       	in	r24, 0x18	; 24
     5b8:	8f 7e       	andi	r24, 0xEF	; 239
     5ba:	88 bb       	out	0x18, r24	; 24
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     5c2:	8d 2f       	mov	r24, r29
     5c4:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     5c8:	8c 2f       	mov	r24, r28
     5ca:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     5ce:	88 b3       	in	r24, 0x18	; 24
     5d0:	80 61       	ori	r24, 0x10	; 16
     5d2:	88 bb       	out	0x18, r24	; 24
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <mcp_request_send>:
     5da:	9c 01       	movw	r18, r24
     5dc:	98 b3       	in	r25, 0x18	; 24
     5de:	9f 7e       	andi	r25, 0xEF	; 239
     5e0:	98 bb       	out	0x18, r25	; 24
     5e2:	21 30       	cpi	r18, 0x01	; 1
     5e4:	31 05       	cpc	r19, r1
     5e6:	79 f0       	breq	.+30     	; 0x606 <mcp_request_send+0x2c>
     5e8:	1c f4       	brge	.+6      	; 0x5f0 <mcp_request_send+0x16>
     5ea:	23 2b       	or	r18, r19
     5ec:	41 f0       	breq	.+16     	; 0x5fe <mcp_request_send+0x24>
     5ee:	17 c0       	rjmp	.+46     	; 0x61e <mcp_request_send+0x44>
     5f0:	22 30       	cpi	r18, 0x02	; 2
     5f2:	31 05       	cpc	r19, r1
     5f4:	61 f0       	breq	.+24     	; 0x60e <mcp_request_send+0x34>
     5f6:	23 30       	cpi	r18, 0x03	; 3
     5f8:	31 05       	cpc	r19, r1
     5fa:	69 f0       	breq	.+26     	; 0x616 <mcp_request_send+0x3c>
     5fc:	10 c0       	rjmp	.+32     	; 0x61e <mcp_request_send+0x44>
     5fe:	81 e8       	ldi	r24, 0x81	; 129
     600:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     604:	0f c0       	rjmp	.+30     	; 0x624 <mcp_request_send+0x4a>
     606:	82 e8       	ldi	r24, 0x82	; 130
     608:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     60c:	0b c0       	rjmp	.+22     	; 0x624 <mcp_request_send+0x4a>
     60e:	84 e8       	ldi	r24, 0x84	; 132
     610:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     614:	07 c0       	rjmp	.+14     	; 0x624 <mcp_request_send+0x4a>
     616:	87 e8       	ldi	r24, 0x87	; 135
     618:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     61c:	03 c0       	rjmp	.+6      	; 0x624 <mcp_request_send+0x4a>
     61e:	80 e8       	ldi	r24, 0x80	; 128
     620:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     624:	88 b3       	in	r24, 0x18	; 24
     626:	80 61       	ori	r24, 0x10	; 16
     628:	88 bb       	out	0x18, r24	; 24
     62a:	08 95       	ret

0000062c <mcp_reset>:
     62c:	88 b3       	in	r24, 0x18	; 24
     62e:	8f 7e       	andi	r24, 0xEF	; 239
     630:	88 bb       	out	0x18, r24	; 24
     632:	80 ec       	ldi	r24, 0xC0	; 192
     634:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
     638:	88 b3       	in	r24, 0x18	; 24
     63a:	80 61       	ori	r24, 0x10	; 16
     63c:	88 bb       	out	0x18, r24	; 24
     63e:	08 95       	ret

00000640 <mcp_init>:
     640:	0e 94 9e 03 	call	0x73c	; 0x73c <SPI_MasterInit>
     644:	0e 94 16 03 	call	0x62c	; 0x62c <mcp_reset>
     648:	8e e0       	ldi	r24, 0x0E	; 14
     64a:	0e 94 c5 02 	call	0x58a	; 0x58a <mcp_read>
     64e:	80 7e       	andi	r24, 0xE0	; 224
     650:	80 38       	cpi	r24, 0x80	; 128
     652:	51 f0       	breq	.+20     	; 0x668 <mcp_init+0x28>
     654:	82 e6       	ldi	r24, 0x62	; 98
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	9f 93       	push	r25
     65a:	8f 93       	push	r24
     65c:	0e 94 43 04 	call	0x886	; 0x886 <printf>
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	08 95       	ret
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	08 95       	ret

0000066c <mcp_bit_modify>:
		return result ;
	};
	
void mcp_bit_modify(uint8_t address_register, uint8_t mask, uint8_t data) {  // NOT FOR ALL REGISTERS. SEE REGISTER MAP.
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	18 2f       	mov	r17, r24
     674:	d6 2f       	mov	r29, r22
     676:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PINB4);
     678:	88 b3       	in	r24, 0x18	; 24
     67a:	8f 7e       	andi	r24, 0xEF	; 239
     67c:	88 bb       	out	0x18, r24	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
     67e:	85 e0       	ldi	r24, 0x05	; 5
     680:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
	SPI_MasterTransmit(address_register);
     684:	81 2f       	mov	r24, r17
     686:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
     68a:	8d 2f       	mov	r24, r29
     68c:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     690:	8c 2f       	mov	r24, r28
     692:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
	
	PORTB |= (1 << PINB4);
     696:	88 b3       	in	r24, 0x18	; 24
     698:	80 61       	ori	r24, 0x10	; 16
     69a:	88 bb       	out	0x18, r24	; 24
};
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	08 95       	ret

000006a4 <oled_write_c>:
	oled_write_c(0xaf); // display on
	
}

void oled_write_c(uint8_t command) {
	xmem_write(command, 0x0000);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	0e 94 b7 03 	call	0x76e	; 0x76e <xmem_write>
     6ac:	08 95       	ret

000006ae <OLED_init>:
volatile oled_pos current_pos;


void OLED_init()
{
	current_pos.page = 0x00;
     6ae:	ed e9       	ldi	r30, 0x9D	; 157
     6b0:	f1 e0       	ldi	r31, 0x01	; 1
     6b2:	10 82       	st	Z, r1
	current_pos.column = 0x00;
     6b4:	11 82       	std	Z+1, r1	; 0x01
	
	
	oled_write_c(0xae); // display off
     6b6:	8e ea       	ldi	r24, 0xAE	; 174
     6b8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xa1); //segment remap
     6bc:	81 ea       	ldi	r24, 0xA1	; 161
     6be:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xda); //common pads hardware: alternative
     6c2:	8a ed       	ldi	r24, 0xDA	; 218
     6c4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x12);
     6c8:	82 e1       	ldi	r24, 0x12	; 18
     6ca:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xc8); //common output scan direction:com63~com0
     6ce:	88 ec       	ldi	r24, 0xC8	; 200
     6d0:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xa8); //multiplex ration mode:63
     6d4:	88 ea       	ldi	r24, 0xA8	; 168
     6d6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x3f);
     6da:	8f e3       	ldi	r24, 0x3F	; 63
     6dc:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xd5); //display divide ratio/osc. freq. mode
     6e0:	85 ed       	ldi	r24, 0xD5	; 213
     6e2:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x80);
     6e6:	80 e8       	ldi	r24, 0x80	; 128
     6e8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x81); //contrast control
     6ec:	81 e8       	ldi	r24, 0x81	; 129
     6ee:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x50);
     6f2:	80 e5       	ldi	r24, 0x50	; 80
     6f4:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xd9); //set pre-charge period
     6f8:	89 ed       	ldi	r24, 0xD9	; 217
     6fa:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x21);
     6fe:	81 e2       	ldi	r24, 0x21	; 33
     700:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x20); //Set Memory Addressing Mode
     704:	80 e2       	ldi	r24, 0x20	; 32
     706:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x02);
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xdb); //VCOM deselect level mode
     710:	8b ed       	ldi	r24, 0xDB	; 219
     712:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x30);
     716:	80 e3       	ldi	r24, 0x30	; 48
     718:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xad); //master configuration
     71c:	8d ea       	ldi	r24, 0xAD	; 173
     71e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0x00);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xa4); //out follows RAM content
     728:	84 ea       	ldi	r24, 0xA4	; 164
     72a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xa6); //set normal display
     72e:	86 ea       	ldi	r24, 0xA6	; 166
     730:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
	oled_write_c(0xaf); // display on
     734:	8f ea       	ldi	r24, 0xAF	; 175
     736:	0e 94 52 03 	call	0x6a4	; 0x6a4 <oled_write_c>
     73a:	08 95       	ret

0000073c <SPI_MasterInit>:
#include <avr/io.h>

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1 << DDB5) | (1 << DDB7) | (1 << DDB4);
     73c:	87 b3       	in	r24, 0x17	; 23
     73e:	80 6b       	ori	r24, 0xB0	; 176
     740:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);
     742:	8d b1       	in	r24, 0x0d	; 13
     744:	81 65       	ori	r24, 0x51	; 81
     746:	8d b9       	out	0x0d, r24	; 13
     748:	08 95       	ret

0000074a <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     74a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     74c:	77 9b       	sbis	0x0e, 7	; 14
     74e:	fe cf       	rjmp	.-4      	; 0x74c <SPI_MasterTransmit+0x2>
	;
}
     750:	08 95       	ret

00000752 <SPI_MaserRead>:

char SPI_MaserRead() {
	
	SPI_MasterTransmit(0);
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 a5 03 	call	0x74a	; 0x74a <SPI_MasterTransmit>
	
	while(!(SPSR & (1<<SPIF)))
     758:	77 9b       	sbis	0x0e, 7	; 14
     75a:	fe cf       	rjmp	.-4      	; 0x758 <SPI_MaserRead+0x6>
	;
	
	return SPDR;
     75c:	8f b1       	in	r24, 0x0f	; 15
	
}
     75e:	08 95       	ret

00000760 <SRAM_Init>:
#include "SRAM.h"


void SRAM_Init()
{
	MCUCR |= (1 << SRE);
     760:	85 b7       	in	r24, 0x35	; 53
     762:	80 68       	ori	r24, 0x80	; 128
     764:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM0 );
     766:	80 b7       	in	r24, 0x30	; 48
     768:	88 60       	ori	r24, 0x08	; 8
     76a:	80 bf       	out	0x30, r24	; 48
     76c:	08 95       	ret

0000076e <xmem_write>:
}

void xmem_write ( uint8_t data , uint16_t addr ) {
	volatile char * ext_mem = ( char *) 0x1000 ;
	ext_mem [ addr ]= data;
     76e:	fb 01       	movw	r30, r22
     770:	f0 5f       	subi	r31, 0xF0	; 240
     772:	80 83       	st	Z, r24
     774:	08 95       	ret

00000776 <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1 << UDRE0)) );
     776:	5d 9b       	sbis	0x0b, 5	; 11
     778:	fe cf       	rjmp	.-4      	; 0x776 <UART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     77a:	8c b9       	out	0x0c, r24	; 12
     77c:	08 95       	ret

0000077e <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
     77e:	5f 9b       	sbis	0x0b, 7	; 11
     780:	fe cf       	rjmp	.-4      	; 0x77e <UART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
     782:	8c b1       	in	r24, 0x0c	; 12
     784:	08 95       	ret

00000786 <UART_Init>:
#include "UART.h"

void UART_Init(unsigned int my_ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr >> 8);
     786:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)my_ubrr;
     788:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     78a:	88 e1       	ldi	r24, 0x18	; 24
     78c:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     78e:	8e e8       	ldi	r24, 0x8E	; 142
     790:	80 bd       	out	0x20, r24	; 32

	fdevopen(UART_Transmit, UART_Receive);
     792:	6f eb       	ldi	r22, 0xBF	; 191
     794:	73 e0       	ldi	r23, 0x03	; 3
     796:	8b eb       	ldi	r24, 0xBB	; 187
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <fdevopen>
     79e:	08 95       	ret

000007a0 <__divmodhi4>:
     7a0:	97 fb       	bst	r25, 7
     7a2:	07 2e       	mov	r0, r23
     7a4:	16 f4       	brtc	.+4      	; 0x7aa <__divmodhi4+0xa>
     7a6:	00 94       	com	r0
     7a8:	07 d0       	rcall	.+14     	; 0x7b8 <__divmodhi4_neg1>
     7aa:	77 fd       	sbrc	r23, 7
     7ac:	09 d0       	rcall	.+18     	; 0x7c0 <__divmodhi4_neg2>
     7ae:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__udivmodhi4>
     7b2:	07 fc       	sbrc	r0, 7
     7b4:	05 d0       	rcall	.+10     	; 0x7c0 <__divmodhi4_neg2>
     7b6:	3e f4       	brtc	.+14     	; 0x7c6 <__divmodhi4_exit>

000007b8 <__divmodhi4_neg1>:
     7b8:	90 95       	com	r25
     7ba:	81 95       	neg	r24
     7bc:	9f 4f       	sbci	r25, 0xFF	; 255
     7be:	08 95       	ret

000007c0 <__divmodhi4_neg2>:
     7c0:	70 95       	com	r23
     7c2:	61 95       	neg	r22
     7c4:	7f 4f       	sbci	r23, 0xFF	; 255

000007c6 <__divmodhi4_exit>:
     7c6:	08 95       	ret

000007c8 <__udivmodhi4>:
     7c8:	aa 1b       	sub	r26, r26
     7ca:	bb 1b       	sub	r27, r27
     7cc:	51 e1       	ldi	r21, 0x11	; 17
     7ce:	07 c0       	rjmp	.+14     	; 0x7de <__udivmodhi4_ep>

000007d0 <__udivmodhi4_loop>:
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	a6 17       	cp	r26, r22
     7d6:	b7 07       	cpc	r27, r23
     7d8:	10 f0       	brcs	.+4      	; 0x7de <__udivmodhi4_ep>
     7da:	a6 1b       	sub	r26, r22
     7dc:	b7 0b       	sbc	r27, r23

000007de <__udivmodhi4_ep>:
     7de:	88 1f       	adc	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	5a 95       	dec	r21
     7e4:	a9 f7       	brne	.-22     	; 0x7d0 <__udivmodhi4_loop>
     7e6:	80 95       	com	r24
     7e8:	90 95       	com	r25
     7ea:	bc 01       	movw	r22, r24
     7ec:	cd 01       	movw	r24, r26
     7ee:	08 95       	ret

000007f0 <fdevopen>:
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	00 97       	sbiw	r24, 0x00	; 0
     7fa:	31 f4       	brne	.+12     	; 0x808 <fdevopen+0x18>
     7fc:	61 15       	cp	r22, r1
     7fe:	71 05       	cpc	r23, r1
     800:	19 f4       	brne	.+6      	; 0x808 <fdevopen+0x18>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	3a c0       	rjmp	.+116    	; 0x87c <fdevopen+0x8c>
     808:	8b 01       	movw	r16, r22
     80a:	ec 01       	movw	r28, r24
     80c:	6e e0       	ldi	r22, 0x0E	; 14
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 3a 06 	call	0xc74	; 0xc74 <calloc>
     818:	fc 01       	movw	r30, r24
     81a:	89 2b       	or	r24, r25
     81c:	91 f3       	breq	.-28     	; 0x802 <fdevopen+0x12>
     81e:	80 e8       	ldi	r24, 0x80	; 128
     820:	83 83       	std	Z+3, r24	; 0x03
     822:	01 15       	cp	r16, r1
     824:	11 05       	cpc	r17, r1
     826:	71 f0       	breq	.+28     	; 0x844 <fdevopen+0x54>
     828:	13 87       	std	Z+11, r17	; 0x0b
     82a:	02 87       	std	Z+10, r16	; 0x0a
     82c:	81 e8       	ldi	r24, 0x81	; 129
     82e:	83 83       	std	Z+3, r24	; 0x03
     830:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <__iob>
     834:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__iob+0x1>
     838:	89 2b       	or	r24, r25
     83a:	21 f4       	brne	.+8      	; 0x844 <fdevopen+0x54>
     83c:	f0 93 a0 01 	sts	0x01A0, r31	; 0x8001a0 <__iob+0x1>
     840:	e0 93 9f 01 	sts	0x019F, r30	; 0x80019f <__iob>
     844:	20 97       	sbiw	r28, 0x00	; 0
     846:	c9 f0       	breq	.+50     	; 0x87a <fdevopen+0x8a>
     848:	d1 87       	std	Z+9, r29	; 0x09
     84a:	c0 87       	std	Z+8, r28	; 0x08
     84c:	83 81       	ldd	r24, Z+3	; 0x03
     84e:	82 60       	ori	r24, 0x02	; 2
     850:	83 83       	std	Z+3, r24	; 0x03
     852:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__iob+0x2>
     856:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <__iob+0x3>
     85a:	89 2b       	or	r24, r25
     85c:	71 f4       	brne	.+28     	; 0x87a <fdevopen+0x8a>
     85e:	f0 93 a2 01 	sts	0x01A2, r31	; 0x8001a2 <__iob+0x3>
     862:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <__iob+0x2>
     866:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <__iob+0x4>
     86a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <__iob+0x5>
     86e:	89 2b       	or	r24, r25
     870:	21 f4       	brne	.+8      	; 0x87a <fdevopen+0x8a>
     872:	f0 93 a4 01 	sts	0x01A4, r31	; 0x8001a4 <__iob+0x5>
     876:	e0 93 a3 01 	sts	0x01A3, r30	; 0x8001a3 <__iob+0x4>
     87a:	cf 01       	movw	r24, r30
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	08 95       	ret

00000886 <printf>:
     886:	a0 e0       	ldi	r26, 0x00	; 0
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	e9 e4       	ldi	r30, 0x49	; 73
     88c:	f4 e0       	ldi	r31, 0x04	; 4
     88e:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__prologue_saves__+0x20>
     892:	ae 01       	movw	r20, r28
     894:	4b 5f       	subi	r20, 0xFB	; 251
     896:	5f 4f       	sbci	r21, 0xFF	; 255
     898:	fa 01       	movw	r30, r20
     89a:	61 91       	ld	r22, Z+
     89c:	71 91       	ld	r23, Z+
     89e:	af 01       	movw	r20, r30
     8a0:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <__iob+0x2>
     8a4:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <__iob+0x3>
     8a8:	0e 94 59 04 	call	0x8b2	; 0x8b2 <vfprintf>
     8ac:	e2 e0       	ldi	r30, 0x02	; 2
     8ae:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__epilogue_restores__+0x20>

000008b2 <vfprintf>:
     8b2:	ab e0       	ldi	r26, 0x0B	; 11
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	ef e5       	ldi	r30, 0x5F	; 95
     8b8:	f4 e0       	ldi	r31, 0x04	; 4
     8ba:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__prologue_saves__>
     8be:	6c 01       	movw	r12, r24
     8c0:	7b 01       	movw	r14, r22
     8c2:	8a 01       	movw	r16, r20
     8c4:	fc 01       	movw	r30, r24
     8c6:	17 82       	std	Z+7, r1	; 0x07
     8c8:	16 82       	std	Z+6, r1	; 0x06
     8ca:	83 81       	ldd	r24, Z+3	; 0x03
     8cc:	81 ff       	sbrs	r24, 1
     8ce:	cc c1       	rjmp	.+920    	; 0xc68 <vfprintf+0x3b6>
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	3c 01       	movw	r6, r24
     8d6:	f6 01       	movw	r30, r12
     8d8:	93 81       	ldd	r25, Z+3	; 0x03
     8da:	f7 01       	movw	r30, r14
     8dc:	93 fd       	sbrc	r25, 3
     8de:	85 91       	lpm	r24, Z+
     8e0:	93 ff       	sbrs	r25, 3
     8e2:	81 91       	ld	r24, Z+
     8e4:	7f 01       	movw	r14, r30
     8e6:	88 23       	and	r24, r24
     8e8:	09 f4       	brne	.+2      	; 0x8ec <vfprintf+0x3a>
     8ea:	ba c1       	rjmp	.+884    	; 0xc60 <vfprintf+0x3ae>
     8ec:	85 32       	cpi	r24, 0x25	; 37
     8ee:	39 f4       	brne	.+14     	; 0x8fe <vfprintf+0x4c>
     8f0:	93 fd       	sbrc	r25, 3
     8f2:	85 91       	lpm	r24, Z+
     8f4:	93 ff       	sbrs	r25, 3
     8f6:	81 91       	ld	r24, Z+
     8f8:	7f 01       	movw	r14, r30
     8fa:	85 32       	cpi	r24, 0x25	; 37
     8fc:	29 f4       	brne	.+10     	; 0x908 <vfprintf+0x56>
     8fe:	b6 01       	movw	r22, r12
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     906:	e7 cf       	rjmp	.-50     	; 0x8d6 <vfprintf+0x24>
     908:	91 2c       	mov	r9, r1
     90a:	21 2c       	mov	r2, r1
     90c:	31 2c       	mov	r3, r1
     90e:	ff e1       	ldi	r31, 0x1F	; 31
     910:	f3 15       	cp	r31, r3
     912:	d8 f0       	brcs	.+54     	; 0x94a <vfprintf+0x98>
     914:	8b 32       	cpi	r24, 0x2B	; 43
     916:	79 f0       	breq	.+30     	; 0x936 <vfprintf+0x84>
     918:	38 f4       	brcc	.+14     	; 0x928 <vfprintf+0x76>
     91a:	80 32       	cpi	r24, 0x20	; 32
     91c:	79 f0       	breq	.+30     	; 0x93c <vfprintf+0x8a>
     91e:	83 32       	cpi	r24, 0x23	; 35
     920:	a1 f4       	brne	.+40     	; 0x94a <vfprintf+0x98>
     922:	23 2d       	mov	r18, r3
     924:	20 61       	ori	r18, 0x10	; 16
     926:	1d c0       	rjmp	.+58     	; 0x962 <vfprintf+0xb0>
     928:	8d 32       	cpi	r24, 0x2D	; 45
     92a:	61 f0       	breq	.+24     	; 0x944 <vfprintf+0x92>
     92c:	80 33       	cpi	r24, 0x30	; 48
     92e:	69 f4       	brne	.+26     	; 0x94a <vfprintf+0x98>
     930:	23 2d       	mov	r18, r3
     932:	21 60       	ori	r18, 0x01	; 1
     934:	16 c0       	rjmp	.+44     	; 0x962 <vfprintf+0xb0>
     936:	83 2d       	mov	r24, r3
     938:	82 60       	ori	r24, 0x02	; 2
     93a:	38 2e       	mov	r3, r24
     93c:	e3 2d       	mov	r30, r3
     93e:	e4 60       	ori	r30, 0x04	; 4
     940:	3e 2e       	mov	r3, r30
     942:	2a c0       	rjmp	.+84     	; 0x998 <vfprintf+0xe6>
     944:	f3 2d       	mov	r31, r3
     946:	f8 60       	ori	r31, 0x08	; 8
     948:	1d c0       	rjmp	.+58     	; 0x984 <vfprintf+0xd2>
     94a:	37 fc       	sbrc	r3, 7
     94c:	2d c0       	rjmp	.+90     	; 0x9a8 <vfprintf+0xf6>
     94e:	20 ed       	ldi	r18, 0xD0	; 208
     950:	28 0f       	add	r18, r24
     952:	2a 30       	cpi	r18, 0x0A	; 10
     954:	40 f0       	brcs	.+16     	; 0x966 <vfprintf+0xb4>
     956:	8e 32       	cpi	r24, 0x2E	; 46
     958:	b9 f4       	brne	.+46     	; 0x988 <vfprintf+0xd6>
     95a:	36 fc       	sbrc	r3, 6
     95c:	81 c1       	rjmp	.+770    	; 0xc60 <vfprintf+0x3ae>
     95e:	23 2d       	mov	r18, r3
     960:	20 64       	ori	r18, 0x40	; 64
     962:	32 2e       	mov	r3, r18
     964:	19 c0       	rjmp	.+50     	; 0x998 <vfprintf+0xe6>
     966:	36 fe       	sbrs	r3, 6
     968:	06 c0       	rjmp	.+12     	; 0x976 <vfprintf+0xc4>
     96a:	8a e0       	ldi	r24, 0x0A	; 10
     96c:	98 9e       	mul	r9, r24
     96e:	20 0d       	add	r18, r0
     970:	11 24       	eor	r1, r1
     972:	92 2e       	mov	r9, r18
     974:	11 c0       	rjmp	.+34     	; 0x998 <vfprintf+0xe6>
     976:	ea e0       	ldi	r30, 0x0A	; 10
     978:	2e 9e       	mul	r2, r30
     97a:	20 0d       	add	r18, r0
     97c:	11 24       	eor	r1, r1
     97e:	22 2e       	mov	r2, r18
     980:	f3 2d       	mov	r31, r3
     982:	f0 62       	ori	r31, 0x20	; 32
     984:	3f 2e       	mov	r3, r31
     986:	08 c0       	rjmp	.+16     	; 0x998 <vfprintf+0xe6>
     988:	8c 36       	cpi	r24, 0x6C	; 108
     98a:	21 f4       	brne	.+8      	; 0x994 <vfprintf+0xe2>
     98c:	83 2d       	mov	r24, r3
     98e:	80 68       	ori	r24, 0x80	; 128
     990:	38 2e       	mov	r3, r24
     992:	02 c0       	rjmp	.+4      	; 0x998 <vfprintf+0xe6>
     994:	88 36       	cpi	r24, 0x68	; 104
     996:	41 f4       	brne	.+16     	; 0x9a8 <vfprintf+0xf6>
     998:	f7 01       	movw	r30, r14
     99a:	93 fd       	sbrc	r25, 3
     99c:	85 91       	lpm	r24, Z+
     99e:	93 ff       	sbrs	r25, 3
     9a0:	81 91       	ld	r24, Z+
     9a2:	7f 01       	movw	r14, r30
     9a4:	81 11       	cpse	r24, r1
     9a6:	b3 cf       	rjmp	.-154    	; 0x90e <vfprintf+0x5c>
     9a8:	98 2f       	mov	r25, r24
     9aa:	9f 7d       	andi	r25, 0xDF	; 223
     9ac:	95 54       	subi	r25, 0x45	; 69
     9ae:	93 30       	cpi	r25, 0x03	; 3
     9b0:	28 f4       	brcc	.+10     	; 0x9bc <vfprintf+0x10a>
     9b2:	0c 5f       	subi	r16, 0xFC	; 252
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
     9b6:	9f e3       	ldi	r25, 0x3F	; 63
     9b8:	99 83       	std	Y+1, r25	; 0x01
     9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <vfprintf+0x124>
     9bc:	83 36       	cpi	r24, 0x63	; 99
     9be:	31 f0       	breq	.+12     	; 0x9cc <vfprintf+0x11a>
     9c0:	83 37       	cpi	r24, 0x73	; 115
     9c2:	71 f0       	breq	.+28     	; 0x9e0 <vfprintf+0x12e>
     9c4:	83 35       	cpi	r24, 0x53	; 83
     9c6:	09 f0       	breq	.+2      	; 0x9ca <vfprintf+0x118>
     9c8:	59 c0       	rjmp	.+178    	; 0xa7c <vfprintf+0x1ca>
     9ca:	21 c0       	rjmp	.+66     	; 0xa0e <vfprintf+0x15c>
     9cc:	f8 01       	movw	r30, r16
     9ce:	80 81       	ld	r24, Z
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	0e 5f       	subi	r16, 0xFE	; 254
     9d4:	1f 4f       	sbci	r17, 0xFF	; 255
     9d6:	88 24       	eor	r8, r8
     9d8:	83 94       	inc	r8
     9da:	91 2c       	mov	r9, r1
     9dc:	53 01       	movw	r10, r6
     9de:	13 c0       	rjmp	.+38     	; 0xa06 <vfprintf+0x154>
     9e0:	28 01       	movw	r4, r16
     9e2:	f2 e0       	ldi	r31, 0x02	; 2
     9e4:	4f 0e       	add	r4, r31
     9e6:	51 1c       	adc	r5, r1
     9e8:	f8 01       	movw	r30, r16
     9ea:	a0 80       	ld	r10, Z
     9ec:	b1 80       	ldd	r11, Z+1	; 0x01
     9ee:	36 fe       	sbrs	r3, 6
     9f0:	03 c0       	rjmp	.+6      	; 0x9f8 <vfprintf+0x146>
     9f2:	69 2d       	mov	r22, r9
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <vfprintf+0x14a>
     9f8:	6f ef       	ldi	r22, 0xFF	; 255
     9fa:	7f ef       	ldi	r23, 0xFF	; 255
     9fc:	c5 01       	movw	r24, r10
     9fe:	0e 94 89 07 	call	0xf12	; 0xf12 <strnlen>
     a02:	4c 01       	movw	r8, r24
     a04:	82 01       	movw	r16, r4
     a06:	f3 2d       	mov	r31, r3
     a08:	ff 77       	andi	r31, 0x7F	; 127
     a0a:	3f 2e       	mov	r3, r31
     a0c:	16 c0       	rjmp	.+44     	; 0xa3a <vfprintf+0x188>
     a0e:	28 01       	movw	r4, r16
     a10:	22 e0       	ldi	r18, 0x02	; 2
     a12:	42 0e       	add	r4, r18
     a14:	51 1c       	adc	r5, r1
     a16:	f8 01       	movw	r30, r16
     a18:	a0 80       	ld	r10, Z
     a1a:	b1 80       	ldd	r11, Z+1	; 0x01
     a1c:	36 fe       	sbrs	r3, 6
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <vfprintf+0x174>
     a20:	69 2d       	mov	r22, r9
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	02 c0       	rjmp	.+4      	; 0xa2a <vfprintf+0x178>
     a26:	6f ef       	ldi	r22, 0xFF	; 255
     a28:	7f ef       	ldi	r23, 0xFF	; 255
     a2a:	c5 01       	movw	r24, r10
     a2c:	0e 94 77 07 	call	0xeee	; 0xeee <strnlen_P>
     a30:	4c 01       	movw	r8, r24
     a32:	f3 2d       	mov	r31, r3
     a34:	f0 68       	ori	r31, 0x80	; 128
     a36:	3f 2e       	mov	r3, r31
     a38:	82 01       	movw	r16, r4
     a3a:	33 fc       	sbrc	r3, 3
     a3c:	1b c0       	rjmp	.+54     	; 0xa74 <vfprintf+0x1c2>
     a3e:	82 2d       	mov	r24, r2
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	88 16       	cp	r8, r24
     a44:	99 06       	cpc	r9, r25
     a46:	b0 f4       	brcc	.+44     	; 0xa74 <vfprintf+0x1c2>
     a48:	b6 01       	movw	r22, r12
     a4a:	80 e2       	ldi	r24, 0x20	; 32
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     a52:	2a 94       	dec	r2
     a54:	f4 cf       	rjmp	.-24     	; 0xa3e <vfprintf+0x18c>
     a56:	f5 01       	movw	r30, r10
     a58:	37 fc       	sbrc	r3, 7
     a5a:	85 91       	lpm	r24, Z+
     a5c:	37 fe       	sbrs	r3, 7
     a5e:	81 91       	ld	r24, Z+
     a60:	5f 01       	movw	r10, r30
     a62:	b6 01       	movw	r22, r12
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     a6a:	21 10       	cpse	r2, r1
     a6c:	2a 94       	dec	r2
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	82 1a       	sub	r8, r18
     a72:	91 08       	sbc	r9, r1
     a74:	81 14       	cp	r8, r1
     a76:	91 04       	cpc	r9, r1
     a78:	71 f7       	brne	.-36     	; 0xa56 <vfprintf+0x1a4>
     a7a:	e8 c0       	rjmp	.+464    	; 0xc4c <vfprintf+0x39a>
     a7c:	84 36       	cpi	r24, 0x64	; 100
     a7e:	11 f0       	breq	.+4      	; 0xa84 <vfprintf+0x1d2>
     a80:	89 36       	cpi	r24, 0x69	; 105
     a82:	41 f5       	brne	.+80     	; 0xad4 <vfprintf+0x222>
     a84:	f8 01       	movw	r30, r16
     a86:	37 fe       	sbrs	r3, 7
     a88:	07 c0       	rjmp	.+14     	; 0xa98 <vfprintf+0x1e6>
     a8a:	60 81       	ld	r22, Z
     a8c:	71 81       	ldd	r23, Z+1	; 0x01
     a8e:	82 81       	ldd	r24, Z+2	; 0x02
     a90:	93 81       	ldd	r25, Z+3	; 0x03
     a92:	0c 5f       	subi	r16, 0xFC	; 252
     a94:	1f 4f       	sbci	r17, 0xFF	; 255
     a96:	08 c0       	rjmp	.+16     	; 0xaa8 <vfprintf+0x1f6>
     a98:	60 81       	ld	r22, Z
     a9a:	71 81       	ldd	r23, Z+1	; 0x01
     a9c:	07 2e       	mov	r0, r23
     a9e:	00 0c       	add	r0, r0
     aa0:	88 0b       	sbc	r24, r24
     aa2:	99 0b       	sbc	r25, r25
     aa4:	0e 5f       	subi	r16, 0xFE	; 254
     aa6:	1f 4f       	sbci	r17, 0xFF	; 255
     aa8:	f3 2d       	mov	r31, r3
     aaa:	ff 76       	andi	r31, 0x6F	; 111
     aac:	3f 2e       	mov	r3, r31
     aae:	97 ff       	sbrs	r25, 7
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <vfprintf+0x212>
     ab2:	90 95       	com	r25
     ab4:	80 95       	com	r24
     ab6:	70 95       	com	r23
     ab8:	61 95       	neg	r22
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	8f 4f       	sbci	r24, 0xFF	; 255
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	f0 68       	ori	r31, 0x80	; 128
     ac2:	3f 2e       	mov	r3, r31
     ac4:	2a e0       	ldi	r18, 0x0A	; 10
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	a3 01       	movw	r20, r6
     aca:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__ultoa_invert>
     ace:	88 2e       	mov	r8, r24
     ad0:	86 18       	sub	r8, r6
     ad2:	45 c0       	rjmp	.+138    	; 0xb5e <vfprintf+0x2ac>
     ad4:	85 37       	cpi	r24, 0x75	; 117
     ad6:	31 f4       	brne	.+12     	; 0xae4 <vfprintf+0x232>
     ad8:	23 2d       	mov	r18, r3
     ada:	2f 7e       	andi	r18, 0xEF	; 239
     adc:	b2 2e       	mov	r11, r18
     ade:	2a e0       	ldi	r18, 0x0A	; 10
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	25 c0       	rjmp	.+74     	; 0xb2e <vfprintf+0x27c>
     ae4:	93 2d       	mov	r25, r3
     ae6:	99 7f       	andi	r25, 0xF9	; 249
     ae8:	b9 2e       	mov	r11, r25
     aea:	8f 36       	cpi	r24, 0x6F	; 111
     aec:	c1 f0       	breq	.+48     	; 0xb1e <vfprintf+0x26c>
     aee:	18 f4       	brcc	.+6      	; 0xaf6 <vfprintf+0x244>
     af0:	88 35       	cpi	r24, 0x58	; 88
     af2:	79 f0       	breq	.+30     	; 0xb12 <vfprintf+0x260>
     af4:	b5 c0       	rjmp	.+362    	; 0xc60 <vfprintf+0x3ae>
     af6:	80 37       	cpi	r24, 0x70	; 112
     af8:	19 f0       	breq	.+6      	; 0xb00 <vfprintf+0x24e>
     afa:	88 37       	cpi	r24, 0x78	; 120
     afc:	21 f0       	breq	.+8      	; 0xb06 <vfprintf+0x254>
     afe:	b0 c0       	rjmp	.+352    	; 0xc60 <vfprintf+0x3ae>
     b00:	e9 2f       	mov	r30, r25
     b02:	e0 61       	ori	r30, 0x10	; 16
     b04:	be 2e       	mov	r11, r30
     b06:	b4 fe       	sbrs	r11, 4
     b08:	0d c0       	rjmp	.+26     	; 0xb24 <vfprintf+0x272>
     b0a:	fb 2d       	mov	r31, r11
     b0c:	f4 60       	ori	r31, 0x04	; 4
     b0e:	bf 2e       	mov	r11, r31
     b10:	09 c0       	rjmp	.+18     	; 0xb24 <vfprintf+0x272>
     b12:	34 fe       	sbrs	r3, 4
     b14:	0a c0       	rjmp	.+20     	; 0xb2a <vfprintf+0x278>
     b16:	29 2f       	mov	r18, r25
     b18:	26 60       	ori	r18, 0x06	; 6
     b1a:	b2 2e       	mov	r11, r18
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <vfprintf+0x278>
     b1e:	28 e0       	ldi	r18, 0x08	; 8
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <vfprintf+0x27c>
     b24:	20 e1       	ldi	r18, 0x10	; 16
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <vfprintf+0x27c>
     b2a:	20 e1       	ldi	r18, 0x10	; 16
     b2c:	32 e0       	ldi	r19, 0x02	; 2
     b2e:	f8 01       	movw	r30, r16
     b30:	b7 fe       	sbrs	r11, 7
     b32:	07 c0       	rjmp	.+14     	; 0xb42 <vfprintf+0x290>
     b34:	60 81       	ld	r22, Z
     b36:	71 81       	ldd	r23, Z+1	; 0x01
     b38:	82 81       	ldd	r24, Z+2	; 0x02
     b3a:	93 81       	ldd	r25, Z+3	; 0x03
     b3c:	0c 5f       	subi	r16, 0xFC	; 252
     b3e:	1f 4f       	sbci	r17, 0xFF	; 255
     b40:	06 c0       	rjmp	.+12     	; 0xb4e <vfprintf+0x29c>
     b42:	60 81       	ld	r22, Z
     b44:	71 81       	ldd	r23, Z+1	; 0x01
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 5f       	subi	r16, 0xFE	; 254
     b4c:	1f 4f       	sbci	r17, 0xFF	; 255
     b4e:	a3 01       	movw	r20, r6
     b50:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <__ultoa_invert>
     b54:	88 2e       	mov	r8, r24
     b56:	86 18       	sub	r8, r6
     b58:	fb 2d       	mov	r31, r11
     b5a:	ff 77       	andi	r31, 0x7F	; 127
     b5c:	3f 2e       	mov	r3, r31
     b5e:	36 fe       	sbrs	r3, 6
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <vfprintf+0x2ca>
     b62:	23 2d       	mov	r18, r3
     b64:	2e 7f       	andi	r18, 0xFE	; 254
     b66:	a2 2e       	mov	r10, r18
     b68:	89 14       	cp	r8, r9
     b6a:	58 f4       	brcc	.+22     	; 0xb82 <vfprintf+0x2d0>
     b6c:	34 fe       	sbrs	r3, 4
     b6e:	0b c0       	rjmp	.+22     	; 0xb86 <vfprintf+0x2d4>
     b70:	32 fc       	sbrc	r3, 2
     b72:	09 c0       	rjmp	.+18     	; 0xb86 <vfprintf+0x2d4>
     b74:	83 2d       	mov	r24, r3
     b76:	8e 7e       	andi	r24, 0xEE	; 238
     b78:	a8 2e       	mov	r10, r24
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <vfprintf+0x2d4>
     b7c:	b8 2c       	mov	r11, r8
     b7e:	a3 2c       	mov	r10, r3
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <vfprintf+0x2d6>
     b82:	b8 2c       	mov	r11, r8
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <vfprintf+0x2d6>
     b86:	b9 2c       	mov	r11, r9
     b88:	a4 fe       	sbrs	r10, 4
     b8a:	0f c0       	rjmp	.+30     	; 0xbaa <vfprintf+0x2f8>
     b8c:	fe 01       	movw	r30, r28
     b8e:	e8 0d       	add	r30, r8
     b90:	f1 1d       	adc	r31, r1
     b92:	80 81       	ld	r24, Z
     b94:	80 33       	cpi	r24, 0x30	; 48
     b96:	21 f4       	brne	.+8      	; 0xba0 <vfprintf+0x2ee>
     b98:	9a 2d       	mov	r25, r10
     b9a:	99 7e       	andi	r25, 0xE9	; 233
     b9c:	a9 2e       	mov	r10, r25
     b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <vfprintf+0x300>
     ba0:	a2 fe       	sbrs	r10, 2
     ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <vfprintf+0x2fe>
     ba4:	b3 94       	inc	r11
     ba6:	b3 94       	inc	r11
     ba8:	04 c0       	rjmp	.+8      	; 0xbb2 <vfprintf+0x300>
     baa:	8a 2d       	mov	r24, r10
     bac:	86 78       	andi	r24, 0x86	; 134
     bae:	09 f0       	breq	.+2      	; 0xbb2 <vfprintf+0x300>
     bb0:	b3 94       	inc	r11
     bb2:	a3 fc       	sbrc	r10, 3
     bb4:	11 c0       	rjmp	.+34     	; 0xbd8 <vfprintf+0x326>
     bb6:	a0 fe       	sbrs	r10, 0
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <vfprintf+0x314>
     bba:	b2 14       	cp	r11, r2
     bbc:	88 f4       	brcc	.+34     	; 0xbe0 <vfprintf+0x32e>
     bbe:	28 0c       	add	r2, r8
     bc0:	92 2c       	mov	r9, r2
     bc2:	9b 18       	sub	r9, r11
     bc4:	0e c0       	rjmp	.+28     	; 0xbe2 <vfprintf+0x330>
     bc6:	b2 14       	cp	r11, r2
     bc8:	60 f4       	brcc	.+24     	; 0xbe2 <vfprintf+0x330>
     bca:	b6 01       	movw	r22, r12
     bcc:	80 e2       	ldi	r24, 0x20	; 32
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     bd4:	b3 94       	inc	r11
     bd6:	f7 cf       	rjmp	.-18     	; 0xbc6 <vfprintf+0x314>
     bd8:	b2 14       	cp	r11, r2
     bda:	18 f4       	brcc	.+6      	; 0xbe2 <vfprintf+0x330>
     bdc:	2b 18       	sub	r2, r11
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <vfprintf+0x332>
     be0:	98 2c       	mov	r9, r8
     be2:	21 2c       	mov	r2, r1
     be4:	a4 fe       	sbrs	r10, 4
     be6:	10 c0       	rjmp	.+32     	; 0xc08 <vfprintf+0x356>
     be8:	b6 01       	movw	r22, r12
     bea:	80 e3       	ldi	r24, 0x30	; 48
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     bf2:	a2 fe       	sbrs	r10, 2
     bf4:	17 c0       	rjmp	.+46     	; 0xc24 <vfprintf+0x372>
     bf6:	a1 fc       	sbrc	r10, 1
     bf8:	03 c0       	rjmp	.+6      	; 0xc00 <vfprintf+0x34e>
     bfa:	88 e7       	ldi	r24, 0x78	; 120
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <vfprintf+0x352>
     c00:	88 e5       	ldi	r24, 0x58	; 88
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	b6 01       	movw	r22, r12
     c06:	0c c0       	rjmp	.+24     	; 0xc20 <vfprintf+0x36e>
     c08:	8a 2d       	mov	r24, r10
     c0a:	86 78       	andi	r24, 0x86	; 134
     c0c:	59 f0       	breq	.+22     	; 0xc24 <vfprintf+0x372>
     c0e:	a1 fe       	sbrs	r10, 1
     c10:	02 c0       	rjmp	.+4      	; 0xc16 <vfprintf+0x364>
     c12:	8b e2       	ldi	r24, 0x2B	; 43
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <vfprintf+0x366>
     c16:	80 e2       	ldi	r24, 0x20	; 32
     c18:	a7 fc       	sbrc	r10, 7
     c1a:	8d e2       	ldi	r24, 0x2D	; 45
     c1c:	b6 01       	movw	r22, r12
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     c24:	89 14       	cp	r8, r9
     c26:	38 f4       	brcc	.+14     	; 0xc36 <vfprintf+0x384>
     c28:	b6 01       	movw	r22, r12
     c2a:	80 e3       	ldi	r24, 0x30	; 48
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     c32:	9a 94       	dec	r9
     c34:	f7 cf       	rjmp	.-18     	; 0xc24 <vfprintf+0x372>
     c36:	8a 94       	dec	r8
     c38:	f3 01       	movw	r30, r6
     c3a:	e8 0d       	add	r30, r8
     c3c:	f1 1d       	adc	r31, r1
     c3e:	80 81       	ld	r24, Z
     c40:	b6 01       	movw	r22, r12
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     c48:	81 10       	cpse	r8, r1
     c4a:	f5 cf       	rjmp	.-22     	; 0xc36 <vfprintf+0x384>
     c4c:	22 20       	and	r2, r2
     c4e:	09 f4       	brne	.+2      	; 0xc52 <vfprintf+0x3a0>
     c50:	42 ce       	rjmp	.-892    	; 0x8d6 <vfprintf+0x24>
     c52:	b6 01       	movw	r22, r12
     c54:	80 e2       	ldi	r24, 0x20	; 32
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 94 07 	call	0xf28	; 0xf28 <fputc>
     c5c:	2a 94       	dec	r2
     c5e:	f6 cf       	rjmp	.-20     	; 0xc4c <vfprintf+0x39a>
     c60:	f6 01       	movw	r30, r12
     c62:	86 81       	ldd	r24, Z+6	; 0x06
     c64:	97 81       	ldd	r25, Z+7	; 0x07
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x3ba>
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f ef       	ldi	r25, 0xFF	; 255
     c6c:	2b 96       	adiw	r28, 0x0b	; 11
     c6e:	e2 e1       	ldi	r30, 0x12	; 18
     c70:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__epilogue_restores__>

00000c74 <calloc>:
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	86 9f       	mul	r24, r22
     c7e:	80 01       	movw	r16, r0
     c80:	87 9f       	mul	r24, r23
     c82:	10 0d       	add	r17, r0
     c84:	96 9f       	mul	r25, r22
     c86:	10 0d       	add	r17, r0
     c88:	11 24       	eor	r1, r1
     c8a:	c8 01       	movw	r24, r16
     c8c:	0e 94 56 06 	call	0xcac	; 0xcac <malloc>
     c90:	ec 01       	movw	r28, r24
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	29 f0       	breq	.+10     	; 0xca0 <calloc+0x2c>
     c96:	a8 01       	movw	r20, r16
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	0e 94 82 07 	call	0xf04	; 0xf04 <memset>
     ca0:	ce 01       	movw	r24, r28
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	0f 91       	pop	r16
     caa:	08 95       	ret

00000cac <malloc>:
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	91 05       	cpc	r25, r1
     cb8:	10 f4       	brcc	.+4      	; 0xcbe <malloc+0x12>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <__flp>
     cc2:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <__flp+0x1>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	30 97       	sbiw	r30, 0x00	; 0
     cd0:	19 f1       	breq	.+70     	; 0xd18 <malloc+0x6c>
     cd2:	40 81       	ld	r20, Z
     cd4:	51 81       	ldd	r21, Z+1	; 0x01
     cd6:	02 81       	ldd	r16, Z+2	; 0x02
     cd8:	13 81       	ldd	r17, Z+3	; 0x03
     cda:	48 17       	cp	r20, r24
     cdc:	59 07       	cpc	r21, r25
     cde:	c8 f0       	brcs	.+50     	; 0xd12 <malloc+0x66>
     ce0:	84 17       	cp	r24, r20
     ce2:	95 07       	cpc	r25, r21
     ce4:	69 f4       	brne	.+26     	; 0xd00 <malloc+0x54>
     ce6:	10 97       	sbiw	r26, 0x00	; 0
     ce8:	31 f0       	breq	.+12     	; 0xcf6 <malloc+0x4a>
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	0c 93       	st	X, r16
     cee:	12 97       	sbiw	r26, 0x02	; 2
     cf0:	13 96       	adiw	r26, 0x03	; 3
     cf2:	1c 93       	st	X, r17
     cf4:	27 c0       	rjmp	.+78     	; 0xd44 <malloc+0x98>
     cf6:	00 93 a7 01 	sts	0x01A7, r16	; 0x8001a7 <__flp>
     cfa:	10 93 a8 01 	sts	0x01A8, r17	; 0x8001a8 <__flp+0x1>
     cfe:	22 c0       	rjmp	.+68     	; 0xd44 <malloc+0x98>
     d00:	21 15       	cp	r18, r1
     d02:	31 05       	cpc	r19, r1
     d04:	19 f0       	breq	.+6      	; 0xd0c <malloc+0x60>
     d06:	42 17       	cp	r20, r18
     d08:	53 07       	cpc	r21, r19
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <malloc+0x66>
     d0c:	9a 01       	movw	r18, r20
     d0e:	bd 01       	movw	r22, r26
     d10:	ef 01       	movw	r28, r30
     d12:	df 01       	movw	r26, r30
     d14:	f8 01       	movw	r30, r16
     d16:	db cf       	rjmp	.-74     	; 0xcce <malloc+0x22>
     d18:	21 15       	cp	r18, r1
     d1a:	31 05       	cpc	r19, r1
     d1c:	f9 f0       	breq	.+62     	; 0xd5c <malloc+0xb0>
     d1e:	28 1b       	sub	r18, r24
     d20:	39 0b       	sbc	r19, r25
     d22:	24 30       	cpi	r18, 0x04	; 4
     d24:	31 05       	cpc	r19, r1
     d26:	80 f4       	brcc	.+32     	; 0xd48 <malloc+0x9c>
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	9b 81       	ldd	r25, Y+3	; 0x03
     d2c:	61 15       	cp	r22, r1
     d2e:	71 05       	cpc	r23, r1
     d30:	21 f0       	breq	.+8      	; 0xd3a <malloc+0x8e>
     d32:	fb 01       	movw	r30, r22
     d34:	93 83       	std	Z+3, r25	; 0x03
     d36:	82 83       	std	Z+2, r24	; 0x02
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <malloc+0x96>
     d3a:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__flp+0x1>
     d3e:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <__flp>
     d42:	fe 01       	movw	r30, r28
     d44:	32 96       	adiw	r30, 0x02	; 2
     d46:	44 c0       	rjmp	.+136    	; 0xdd0 <malloc+0x124>
     d48:	fe 01       	movw	r30, r28
     d4a:	e2 0f       	add	r30, r18
     d4c:	f3 1f       	adc	r31, r19
     d4e:	81 93       	st	Z+, r24
     d50:	91 93       	st	Z+, r25
     d52:	22 50       	subi	r18, 0x02	; 2
     d54:	31 09       	sbc	r19, r1
     d56:	39 83       	std	Y+1, r19	; 0x01
     d58:	28 83       	st	Y, r18
     d5a:	3a c0       	rjmp	.+116    	; 0xdd0 <malloc+0x124>
     d5c:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
     d60:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
     d64:	23 2b       	or	r18, r19
     d66:	41 f4       	brne	.+16     	; 0xd78 <malloc+0xcc>
     d68:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d6c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d70:	30 93 a6 01 	sts	0x01A6, r19	; 0x8001a6 <__brkval+0x1>
     d74:	20 93 a5 01 	sts	0x01A5, r18	; 0x8001a5 <__brkval>
     d78:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d7c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d80:	21 15       	cp	r18, r1
     d82:	31 05       	cpc	r19, r1
     d84:	41 f4       	brne	.+16     	; 0xd96 <malloc+0xea>
     d86:	2d b7       	in	r18, 0x3d	; 61
     d88:	3e b7       	in	r19, 0x3e	; 62
     d8a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d8e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d92:	24 1b       	sub	r18, r20
     d94:	35 0b       	sbc	r19, r21
     d96:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <__brkval>
     d9a:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <__brkval+0x1>
     d9e:	e2 17       	cp	r30, r18
     da0:	f3 07       	cpc	r31, r19
     da2:	a0 f4       	brcc	.+40     	; 0xdcc <malloc+0x120>
     da4:	2e 1b       	sub	r18, r30
     da6:	3f 0b       	sbc	r19, r31
     da8:	28 17       	cp	r18, r24
     daa:	39 07       	cpc	r19, r25
     dac:	78 f0       	brcs	.+30     	; 0xdcc <malloc+0x120>
     dae:	ac 01       	movw	r20, r24
     db0:	4e 5f       	subi	r20, 0xFE	; 254
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	24 17       	cp	r18, r20
     db6:	35 07       	cpc	r19, r21
     db8:	48 f0       	brcs	.+18     	; 0xdcc <malloc+0x120>
     dba:	4e 0f       	add	r20, r30
     dbc:	5f 1f       	adc	r21, r31
     dbe:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <__brkval+0x1>
     dc2:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <__brkval>
     dc6:	81 93       	st	Z+, r24
     dc8:	91 93       	st	Z+, r25
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <malloc+0x124>
     dcc:	e0 e0       	ldi	r30, 0x00	; 0
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	cf 01       	movw	r24, r30
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	08 95       	ret

00000ddc <free>:
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	09 f4       	brne	.+2      	; 0xde6 <free+0xa>
     de4:	81 c0       	rjmp	.+258    	; 0xee8 <free+0x10c>
     de6:	fc 01       	movw	r30, r24
     de8:	32 97       	sbiw	r30, 0x02	; 2
     dea:	13 82       	std	Z+3, r1	; 0x03
     dec:	12 82       	std	Z+2, r1	; 0x02
     dee:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <__flp>
     df2:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <__flp+0x1>
     df6:	10 97       	sbiw	r26, 0x00	; 0
     df8:	81 f4       	brne	.+32     	; 0xe1a <free+0x3e>
     dfa:	20 81       	ld	r18, Z
     dfc:	31 81       	ldd	r19, Z+1	; 0x01
     dfe:	82 0f       	add	r24, r18
     e00:	93 1f       	adc	r25, r19
     e02:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
     e06:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
     e0a:	28 17       	cp	r18, r24
     e0c:	39 07       	cpc	r19, r25
     e0e:	51 f5       	brne	.+84     	; 0xe64 <free+0x88>
     e10:	f0 93 a6 01 	sts	0x01A6, r31	; 0x8001a6 <__brkval+0x1>
     e14:	e0 93 a5 01 	sts	0x01A5, r30	; 0x8001a5 <__brkval>
     e18:	67 c0       	rjmp	.+206    	; 0xee8 <free+0x10c>
     e1a:	ed 01       	movw	r28, r26
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	ce 17       	cp	r28, r30
     e22:	df 07       	cpc	r29, r31
     e24:	40 f4       	brcc	.+16     	; 0xe36 <free+0x5a>
     e26:	4a 81       	ldd	r20, Y+2	; 0x02
     e28:	5b 81       	ldd	r21, Y+3	; 0x03
     e2a:	9e 01       	movw	r18, r28
     e2c:	41 15       	cp	r20, r1
     e2e:	51 05       	cpc	r21, r1
     e30:	f1 f0       	breq	.+60     	; 0xe6e <free+0x92>
     e32:	ea 01       	movw	r28, r20
     e34:	f5 cf       	rjmp	.-22     	; 0xe20 <free+0x44>
     e36:	d3 83       	std	Z+3, r29	; 0x03
     e38:	c2 83       	std	Z+2, r28	; 0x02
     e3a:	40 81       	ld	r20, Z
     e3c:	51 81       	ldd	r21, Z+1	; 0x01
     e3e:	84 0f       	add	r24, r20
     e40:	95 1f       	adc	r25, r21
     e42:	c8 17       	cp	r28, r24
     e44:	d9 07       	cpc	r29, r25
     e46:	59 f4       	brne	.+22     	; 0xe5e <free+0x82>
     e48:	88 81       	ld	r24, Y
     e4a:	99 81       	ldd	r25, Y+1	; 0x01
     e4c:	84 0f       	add	r24, r20
     e4e:	95 1f       	adc	r25, r21
     e50:	02 96       	adiw	r24, 0x02	; 2
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	93 83       	std	Z+3, r25	; 0x03
     e5c:	82 83       	std	Z+2, r24	; 0x02
     e5e:	21 15       	cp	r18, r1
     e60:	31 05       	cpc	r19, r1
     e62:	29 f4       	brne	.+10     	; 0xe6e <free+0x92>
     e64:	f0 93 a8 01 	sts	0x01A8, r31	; 0x8001a8 <__flp+0x1>
     e68:	e0 93 a7 01 	sts	0x01A7, r30	; 0x8001a7 <__flp>
     e6c:	3d c0       	rjmp	.+122    	; 0xee8 <free+0x10c>
     e6e:	e9 01       	movw	r28, r18
     e70:	fb 83       	std	Y+3, r31	; 0x03
     e72:	ea 83       	std	Y+2, r30	; 0x02
     e74:	49 91       	ld	r20, Y+
     e76:	59 91       	ld	r21, Y+
     e78:	c4 0f       	add	r28, r20
     e7a:	d5 1f       	adc	r29, r21
     e7c:	ec 17       	cp	r30, r28
     e7e:	fd 07       	cpc	r31, r29
     e80:	61 f4       	brne	.+24     	; 0xe9a <free+0xbe>
     e82:	80 81       	ld	r24, Z
     e84:	91 81       	ldd	r25, Z+1	; 0x01
     e86:	84 0f       	add	r24, r20
     e88:	95 1f       	adc	r25, r21
     e8a:	02 96       	adiw	r24, 0x02	; 2
     e8c:	e9 01       	movw	r28, r18
     e8e:	99 83       	std	Y+1, r25	; 0x01
     e90:	88 83       	st	Y, r24
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	9b 83       	std	Y+3, r25	; 0x03
     e98:	8a 83       	std	Y+2, r24	; 0x02
     e9a:	e0 e0       	ldi	r30, 0x00	; 0
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	12 96       	adiw	r26, 0x02	; 2
     ea0:	8d 91       	ld	r24, X+
     ea2:	9c 91       	ld	r25, X
     ea4:	13 97       	sbiw	r26, 0x03	; 3
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <free+0xd4>
     eaa:	fd 01       	movw	r30, r26
     eac:	dc 01       	movw	r26, r24
     eae:	f7 cf       	rjmp	.-18     	; 0xe9e <free+0xc2>
     eb0:	8d 91       	ld	r24, X+
     eb2:	9c 91       	ld	r25, X
     eb4:	11 97       	sbiw	r26, 0x01	; 1
     eb6:	9d 01       	movw	r18, r26
     eb8:	2e 5f       	subi	r18, 0xFE	; 254
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
     ec4:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
     ec8:	28 17       	cp	r18, r24
     eca:	39 07       	cpc	r19, r25
     ecc:	69 f4       	brne	.+26     	; 0xee8 <free+0x10c>
     ece:	30 97       	sbiw	r30, 0x00	; 0
     ed0:	29 f4       	brne	.+10     	; 0xedc <free+0x100>
     ed2:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__flp+0x1>
     ed6:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <__flp>
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <free+0x104>
     edc:	13 82       	std	Z+3, r1	; 0x03
     ede:	12 82       	std	Z+2, r1	; 0x02
     ee0:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <__brkval+0x1>
     ee4:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <__brkval>
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <strnlen_P>:
     eee:	fc 01       	movw	r30, r24
     ef0:	05 90       	lpm	r0, Z+
     ef2:	61 50       	subi	r22, 0x01	; 1
     ef4:	70 40       	sbci	r23, 0x00	; 0
     ef6:	01 10       	cpse	r0, r1
     ef8:	d8 f7       	brcc	.-10     	; 0xef0 <strnlen_P+0x2>
     efa:	80 95       	com	r24
     efc:	90 95       	com	r25
     efe:	8e 0f       	add	r24, r30
     f00:	9f 1f       	adc	r25, r31
     f02:	08 95       	ret

00000f04 <memset>:
     f04:	dc 01       	movw	r26, r24
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <memset+0x6>
     f08:	6d 93       	st	X+, r22
     f0a:	41 50       	subi	r20, 0x01	; 1
     f0c:	50 40       	sbci	r21, 0x00	; 0
     f0e:	e0 f7       	brcc	.-8      	; 0xf08 <memset+0x4>
     f10:	08 95       	ret

00000f12 <strnlen>:
     f12:	fc 01       	movw	r30, r24
     f14:	61 50       	subi	r22, 0x01	; 1
     f16:	70 40       	sbci	r23, 0x00	; 0
     f18:	01 90       	ld	r0, Z+
     f1a:	01 10       	cpse	r0, r1
     f1c:	d8 f7       	brcc	.-10     	; 0xf14 <strnlen+0x2>
     f1e:	80 95       	com	r24
     f20:	90 95       	com	r25
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	08 95       	ret

00000f28 <fputc>:
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	fb 01       	movw	r30, r22
     f32:	23 81       	ldd	r18, Z+3	; 0x03
     f34:	21 fd       	sbrc	r18, 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <fputc+0x16>
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	9f ef       	ldi	r25, 0xFF	; 255
     f3c:	2c c0       	rjmp	.+88     	; 0xf96 <fputc+0x6e>
     f3e:	22 ff       	sbrs	r18, 2
     f40:	16 c0       	rjmp	.+44     	; 0xf6e <fputc+0x46>
     f42:	46 81       	ldd	r20, Z+6	; 0x06
     f44:	57 81       	ldd	r21, Z+7	; 0x07
     f46:	24 81       	ldd	r18, Z+4	; 0x04
     f48:	35 81       	ldd	r19, Z+5	; 0x05
     f4a:	42 17       	cp	r20, r18
     f4c:	53 07       	cpc	r21, r19
     f4e:	44 f4       	brge	.+16     	; 0xf60 <fputc+0x38>
     f50:	a0 81       	ld	r26, Z
     f52:	b1 81       	ldd	r27, Z+1	; 0x01
     f54:	9d 01       	movw	r18, r26
     f56:	2f 5f       	subi	r18, 0xFF	; 255
     f58:	3f 4f       	sbci	r19, 0xFF	; 255
     f5a:	31 83       	std	Z+1, r19	; 0x01
     f5c:	20 83       	st	Z, r18
     f5e:	8c 93       	st	X, r24
     f60:	26 81       	ldd	r18, Z+6	; 0x06
     f62:	37 81       	ldd	r19, Z+7	; 0x07
     f64:	2f 5f       	subi	r18, 0xFF	; 255
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	37 83       	std	Z+7, r19	; 0x07
     f6a:	26 83       	std	Z+6, r18	; 0x06
     f6c:	14 c0       	rjmp	.+40     	; 0xf96 <fputc+0x6e>
     f6e:	8b 01       	movw	r16, r22
     f70:	ec 01       	movw	r28, r24
     f72:	fb 01       	movw	r30, r22
     f74:	00 84       	ldd	r0, Z+8	; 0x08
     f76:	f1 85       	ldd	r31, Z+9	; 0x09
     f78:	e0 2d       	mov	r30, r0
     f7a:	09 95       	icall
     f7c:	89 2b       	or	r24, r25
     f7e:	e1 f6       	brne	.-72     	; 0xf38 <fputc+0x10>
     f80:	d8 01       	movw	r26, r16
     f82:	16 96       	adiw	r26, 0x06	; 6
     f84:	8d 91       	ld	r24, X+
     f86:	9c 91       	ld	r25, X
     f88:	17 97       	sbiw	r26, 0x07	; 7
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	17 96       	adiw	r26, 0x07	; 7
     f8e:	9c 93       	st	X, r25
     f90:	8e 93       	st	-X, r24
     f92:	16 97       	sbiw	r26, 0x06	; 6
     f94:	ce 01       	movw	r24, r28
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	08 95       	ret

00000fa0 <__ultoa_invert>:
     fa0:	fa 01       	movw	r30, r20
     fa2:	aa 27       	eor	r26, r26
     fa4:	28 30       	cpi	r18, 0x08	; 8
     fa6:	51 f1       	breq	.+84     	; 0xffc <__ultoa_invert+0x5c>
     fa8:	20 31       	cpi	r18, 0x10	; 16
     faa:	81 f1       	breq	.+96     	; 0x100c <__ultoa_invert+0x6c>
     fac:	e8 94       	clt
     fae:	6f 93       	push	r22
     fb0:	6e 7f       	andi	r22, 0xFE	; 254
     fb2:	6e 5f       	subi	r22, 0xFE	; 254
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	af 4f       	sbci	r26, 0xFF	; 255
     fbc:	b1 e0       	ldi	r27, 0x01	; 1
     fbe:	3e d0       	rcall	.+124    	; 0x103c <__ultoa_invert+0x9c>
     fc0:	b4 e0       	ldi	r27, 0x04	; 4
     fc2:	3c d0       	rcall	.+120    	; 0x103c <__ultoa_invert+0x9c>
     fc4:	67 0f       	add	r22, r23
     fc6:	78 1f       	adc	r23, r24
     fc8:	89 1f       	adc	r24, r25
     fca:	9a 1f       	adc	r25, r26
     fcc:	a1 1d       	adc	r26, r1
     fce:	68 0f       	add	r22, r24
     fd0:	79 1f       	adc	r23, r25
     fd2:	8a 1f       	adc	r24, r26
     fd4:	91 1d       	adc	r25, r1
     fd6:	a1 1d       	adc	r26, r1
     fd8:	6a 0f       	add	r22, r26
     fda:	71 1d       	adc	r23, r1
     fdc:	81 1d       	adc	r24, r1
     fde:	91 1d       	adc	r25, r1
     fe0:	a1 1d       	adc	r26, r1
     fe2:	20 d0       	rcall	.+64     	; 0x1024 <__ultoa_invert+0x84>
     fe4:	09 f4       	brne	.+2      	; 0xfe8 <__ultoa_invert+0x48>
     fe6:	68 94       	set
     fe8:	3f 91       	pop	r19
     fea:	2a e0       	ldi	r18, 0x0A	; 10
     fec:	26 9f       	mul	r18, r22
     fee:	11 24       	eor	r1, r1
     ff0:	30 19       	sub	r19, r0
     ff2:	30 5d       	subi	r19, 0xD0	; 208
     ff4:	31 93       	st	Z+, r19
     ff6:	de f6       	brtc	.-74     	; 0xfae <__ultoa_invert+0xe>
     ff8:	cf 01       	movw	r24, r30
     ffa:	08 95       	ret
     ffc:	46 2f       	mov	r20, r22
     ffe:	47 70       	andi	r20, 0x07	; 7
    1000:	40 5d       	subi	r20, 0xD0	; 208
    1002:	41 93       	st	Z+, r20
    1004:	b3 e0       	ldi	r27, 0x03	; 3
    1006:	0f d0       	rcall	.+30     	; 0x1026 <__ultoa_invert+0x86>
    1008:	c9 f7       	brne	.-14     	; 0xffc <__ultoa_invert+0x5c>
    100a:	f6 cf       	rjmp	.-20     	; 0xff8 <__ultoa_invert+0x58>
    100c:	46 2f       	mov	r20, r22
    100e:	4f 70       	andi	r20, 0x0F	; 15
    1010:	40 5d       	subi	r20, 0xD0	; 208
    1012:	4a 33       	cpi	r20, 0x3A	; 58
    1014:	18 f0       	brcs	.+6      	; 0x101c <__ultoa_invert+0x7c>
    1016:	49 5d       	subi	r20, 0xD9	; 217
    1018:	31 fd       	sbrc	r19, 1
    101a:	40 52       	subi	r20, 0x20	; 32
    101c:	41 93       	st	Z+, r20
    101e:	02 d0       	rcall	.+4      	; 0x1024 <__ultoa_invert+0x84>
    1020:	a9 f7       	brne	.-22     	; 0x100c <__ultoa_invert+0x6c>
    1022:	ea cf       	rjmp	.-44     	; 0xff8 <__ultoa_invert+0x58>
    1024:	b4 e0       	ldi	r27, 0x04	; 4
    1026:	a6 95       	lsr	r26
    1028:	97 95       	ror	r25
    102a:	87 95       	ror	r24
    102c:	77 95       	ror	r23
    102e:	67 95       	ror	r22
    1030:	ba 95       	dec	r27
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__ultoa_invert+0x86>
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	61 05       	cpc	r22, r1
    1038:	71 05       	cpc	r23, r1
    103a:	08 95       	ret
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	0a 2e       	mov	r0, r26
    1042:	06 94       	lsr	r0
    1044:	57 95       	ror	r21
    1046:	47 95       	ror	r20
    1048:	37 95       	ror	r19
    104a:	27 95       	ror	r18
    104c:	ba 95       	dec	r27
    104e:	c9 f7       	brne	.-14     	; 0x1042 <__ultoa_invert+0xa2>
    1050:	62 0f       	add	r22, r18
    1052:	73 1f       	adc	r23, r19
    1054:	84 1f       	adc	r24, r20
    1056:	95 1f       	adc	r25, r21
    1058:	a0 1d       	adc	r26, r0
    105a:	08 95       	ret

0000105c <__prologue_saves__>:
    105c:	2f 92       	push	r2
    105e:	3f 92       	push	r3
    1060:	4f 92       	push	r4
    1062:	5f 92       	push	r5
    1064:	6f 92       	push	r6
    1066:	7f 92       	push	r7
    1068:	8f 92       	push	r8
    106a:	9f 92       	push	r9
    106c:	af 92       	push	r10
    106e:	bf 92       	push	r11
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	cd b7       	in	r28, 0x3d	; 61
    1082:	de b7       	in	r29, 0x3e	; 62
    1084:	ca 1b       	sub	r28, r26
    1086:	db 0b       	sbc	r29, r27
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	09 94       	ijmp

00001094 <__epilogue_restores__>:
    1094:	2a 88       	ldd	r2, Y+18	; 0x12
    1096:	39 88       	ldd	r3, Y+17	; 0x11
    1098:	48 88       	ldd	r4, Y+16	; 0x10
    109a:	5f 84       	ldd	r5, Y+15	; 0x0f
    109c:	6e 84       	ldd	r6, Y+14	; 0x0e
    109e:	7d 84       	ldd	r7, Y+13	; 0x0d
    10a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    10a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    10a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    10a6:	b9 84       	ldd	r11, Y+9	; 0x09
    10a8:	c8 84       	ldd	r12, Y+8	; 0x08
    10aa:	df 80       	ldd	r13, Y+7	; 0x07
    10ac:	ee 80       	ldd	r14, Y+6	; 0x06
    10ae:	fd 80       	ldd	r15, Y+5	; 0x05
    10b0:	0c 81       	ldd	r16, Y+4	; 0x04
    10b2:	1b 81       	ldd	r17, Y+3	; 0x03
    10b4:	aa 81       	ldd	r26, Y+2	; 0x02
    10b6:	b9 81       	ldd	r27, Y+1	; 0x01
    10b8:	ce 0f       	add	r28, r30
    10ba:	d1 1d       	adc	r29, r1
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	ed 01       	movw	r28, r26
    10c8:	08 95       	ret

000010ca <_exit>:
    10ca:	f8 94       	cli

000010cc <__stop_program>:
    10cc:	ff cf       	rjmp	.-2      	; 0x10cc <__stop_program>

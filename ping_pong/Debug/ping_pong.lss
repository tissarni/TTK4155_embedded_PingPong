
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000057a  0000060e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  00000614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001908  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d0e  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ceb  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f9  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000776  00000000  00000000  00004541  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004cb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e7       	ldi	r30, 0x7A	; 122
  84:	f5 e0       	ldi	r31, 0x05	; 5
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 31       	cpi	r26, 0x16	; 22
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 99 00 	call	0x132	; 0x132 <main>
  a6:	0c 94 bb 02 	jmp	0x576	; 0x576 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:

}
*/

void ADC_Init() {
	DDRB = (1 << DDB1);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	87 bb       	out	0x17, r24	; 23
	OCR2 = 128;
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	82 bd       	out	0x22, r24	; 34
	TCCR2 |= (1 << COM21);
  b6:	87 b5       	in	r24, 0x27	; 39
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << WGM21) | (1 << WGM20);
  bc:	87 b5       	in	r24, 0x27	; 39
  be:	88 64       	ori	r24, 0x48	; 72
  c0:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << CS20);
  c2:	87 b5       	in	r24, 0x27	; 39
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	87 bd       	out	0x27, r24	; 39
  c8:	08 95       	ret

000000ca <ADC_Read>:
int ADC_Read (int channel) {
	//Pulse on WR
	

	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x12ea>
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
	int Tconv = (9*4*2)/4912000;
	_delay_ms(Tconv);

	int  value=0;
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <ADC_Read+0x28>
		uint8_t  read = ext_mem[0x1400];
  da:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <__bss_end+0x12ea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	5c e3       	ldi	r21, 0x3C	; 60
  e0:	5a 95       	dec	r21
  e2:	f1 f7       	brne	.-4      	; 0xe0 <ADC_Read+0x16>
		_delay_ms(0.18);
		if (i == channel){
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	11 f4       	brne	.+4      	; 0xee <ADC_Read+0x24>
			 value = read;
  ea:	64 2f       	mov	r22, r20
  ec:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	24 30       	cpi	r18, 0x04	; 4
  f4:	31 05       	cpc	r19, r1
  f6:	8c f3       	brlt	.-30     	; 0xda <ADC_Read+0x10>
		if (i == channel){
			 value = read;
		}
	}
	return value;
}
  f8:	cb 01       	movw	r24, r22
  fa:	08 95       	ret

000000fc <joystick_calibrate>:
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 108:	c6 e0       	ldi	r28, 0x06	; 6
 10a:	d1 e0       	ldi	r29, 0x01	; 1
 10c:	99 83       	std	Y+1, r25	; 0x01
 10e:	88 83       	st	Y, r24
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 118:	9b 83       	std	Y+3, r25	; 0x03
 11a:	8a 83       	std	Y+2, r24	; 0x02
 11c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
 120:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x1>
 124:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 128:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <main>:
int main(void)
{
			

	//Drivers init
	UART_Init(MYUBRR);
 132:	8f e1       	ldi	r24, 0x1F	; 31
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 1f 01 	call	0x23e	; 0x23e <UART_Init>
	SRAM_Init();
 13a:	0e 94 0c 01 	call	0x218	; 0x218 <SRAM_Init>
	ADC_Init();
 13e:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	joystick_calibrate();
 142:	0e 94 7e 00 	call	0xfc	; 0xfc <joystick_calibrate>
	OLED_init();
 146:	0e 94 b4 00 	call	0x168	; 0x168 <OLED_init>
	SPI_MasterInit();
 14a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <SPI_MasterInit>
	//OLED_test();
	//OLED_home();
	//OLED_score();
	//OLED_scenario();
	////Ports setting 
	DDRE = 0b11111111;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	86 b9       	out	0x06, r24	; 6
    //DDRA = 0b11111111; 
	//DDRD |= 0b11000000;
	//DDRC = DDRC | 0b00001111;
	PORTE = 0b00000010;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	87 b9       	out	0x07, r24	; 7
	//SRAM_test();
	//SRAM_mapping_test();
  
    while (1)
    {
		SPI_MasterTransmit('c');
 156:	83 e6       	ldi	r24, 0x63	; 99
 158:	0e 94 08 01 	call	0x210	; 0x210 <SPI_MasterTransmit>
 15c:	fc cf       	rjmp	.-8      	; 0x156 <main+0x24>

0000015e <oled_write_c>:
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 13 01 	call	0x226	; 0x226 <xmem_write>
 166:	08 95       	ret

00000168 <OLED_init>:
 168:	ea e0       	ldi	r30, 0x0A	; 10
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	10 82       	st	Z, r1
 16e:	11 82       	std	Z+1, r1	; 0x01
 170:	8e ea       	ldi	r24, 0xAE	; 174
 172:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 176:	81 ea       	ldi	r24, 0xA1	; 161
 178:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 17c:	8a ed       	ldi	r24, 0xDA	; 218
 17e:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 182:	82 e1       	ldi	r24, 0x12	; 18
 184:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 188:	88 ec       	ldi	r24, 0xC8	; 200
 18a:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 18e:	88 ea       	ldi	r24, 0xA8	; 168
 190:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 194:	8f e3       	ldi	r24, 0x3F	; 63
 196:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 19a:	85 ed       	ldi	r24, 0xD5	; 213
 19c:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1a6:	81 e8       	ldi	r24, 0x81	; 129
 1a8:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1ac:	80 e5       	ldi	r24, 0x50	; 80
 1ae:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1b2:	89 ed       	ldi	r24, 0xD9	; 217
 1b4:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1b8:	81 e2       	ldi	r24, 0x21	; 33
 1ba:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1ca:	8b ed       	ldi	r24, 0xDB	; 219
 1cc:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1d0:	80 e3       	ldi	r24, 0x30	; 48
 1d2:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1d6:	8d ea       	ldi	r24, 0xAD	; 173
 1d8:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1e2:	84 ea       	ldi	r24, 0xA4	; 164
 1e4:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1e8:	86 ea       	ldi	r24, 0xA6	; 166
 1ea:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1ee:	8f ea       	ldi	r24, 0xAF	; 175
 1f0:	0e 94 af 00 	call	0x15e	; 0x15e <oled_write_c>
 1f4:	08 95       	ret

000001f6 <SPI_MasterInit>:
#include <avr/io.h>

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1 << DDB5) | (1 << DDB7) | (1 << DDB4);
 1f6:	87 b3       	in	r24, 0x17	; 23
 1f8:	80 6b       	ori	r24, 0xB0	; 176
 1fa:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);
 1fc:	8d b1       	in	r24, 0x0d	; 13
 1fe:	81 65       	ori	r24, 0x51	; 81
 200:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << CPOL);
 202:	8d b1       	in	r24, 0x0d	; 13
 204:	87 7f       	andi	r24, 0xF7	; 247
 206:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << CPHA);
 208:	8d b1       	in	r24, 0x0d	; 13
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	8d b9       	out	0x0d, r24	; 13
 20e:	08 95       	ret

00000210 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 210:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 212:	77 9b       	sbis	0x0e, 7	; 14
 214:	fe cf       	rjmp	.-4      	; 0x212 <SPI_MasterTransmit+0x2>
	;
}
 216:	08 95       	ret

00000218 <SRAM_Init>:
#include "SRAM.h"


void SRAM_Init()
{
	MCUCR |= (1 << SRE);
 218:	85 b7       	in	r24, 0x35	; 53
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM0 );
 21e:	80 b7       	in	r24, 0x30	; 48
 220:	88 60       	ori	r24, 0x08	; 8
 222:	80 bf       	out	0x30, r24	; 48
 224:	08 95       	ret

00000226 <xmem_write>:
}

void xmem_write ( uint8_t data , uint16_t addr ) {
	volatile char * ext_mem = ( char *) 0x1000 ;
	ext_mem [ addr ]= data;
 226:	fb 01       	movw	r30, r22
 228:	f0 5f       	subi	r31, 0xF0	; 240
 22a:	80 83       	st	Z, r24
 22c:	08 95       	ret

0000022e <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1 << UDRE0)) );
 22e:	5d 9b       	sbis	0x0b, 5	; 11
 230:	fe cf       	rjmp	.-4      	; 0x22e <UART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 232:	8c b9       	out	0x0c, r24	; 12
 234:	08 95       	ret

00000236 <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 236:	5f 9b       	sbis	0x0b, 7	; 11
 238:	fe cf       	rjmp	.-4      	; 0x236 <UART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 23a:	8c b1       	in	r24, 0x0c	; 12
 23c:	08 95       	ret

0000023e <UART_Init>:
#include "UART.h"

void UART_Init(unsigned int my_ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr >> 8);
 23e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)my_ubrr;
 240:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
 246:	8e e8       	ldi	r24, 0x8E	; 142
 248:	80 bd       	out	0x20, r24	; 32

	fdevopen(UART_Transmit, UART_Receive);
 24a:	6b e1       	ldi	r22, 0x1B	; 27
 24c:	71 e0       	ldi	r23, 0x01	; 1
 24e:	87 e1       	ldi	r24, 0x17	; 23
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 2c 01 	call	0x258	; 0x258 <fdevopen>
 256:	08 95       	ret

00000258 <fdevopen>:
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	31 f4       	brne	.+12     	; 0x270 <fdevopen+0x18>
 264:	61 15       	cp	r22, r1
 266:	71 05       	cpc	r23, r1
 268:	19 f4       	brne	.+6      	; 0x270 <fdevopen+0x18>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	3a c0       	rjmp	.+116    	; 0x2e4 <fdevopen+0x8c>
 270:	8b 01       	movw	r16, r22
 272:	ec 01       	movw	r28, r24
 274:	6e e0       	ldi	r22, 0x0E	; 14
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 77 01 	call	0x2ee	; 0x2ee <calloc>
 280:	fc 01       	movw	r30, r24
 282:	89 2b       	or	r24, r25
 284:	91 f3       	breq	.-28     	; 0x26a <fdevopen+0x12>
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	83 83       	std	Z+3, r24	; 0x03
 28a:	01 15       	cp	r16, r1
 28c:	11 05       	cpc	r17, r1
 28e:	71 f0       	breq	.+28     	; 0x2ac <fdevopen+0x54>
 290:	13 87       	std	Z+11, r17	; 0x0b
 292:	02 87       	std	Z+10, r16	; 0x0a
 294:	81 e8       	ldi	r24, 0x81	; 129
 296:	83 83       	std	Z+3, r24	; 0x03
 298:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__iob>
 29c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__iob+0x1>
 2a0:	89 2b       	or	r24, r25
 2a2:	21 f4       	brne	.+8      	; 0x2ac <fdevopen+0x54>
 2a4:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__iob+0x1>
 2a8:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__iob>
 2ac:	20 97       	sbiw	r28, 0x00	; 0
 2ae:	c9 f0       	breq	.+50     	; 0x2e2 <fdevopen+0x8a>
 2b0:	d1 87       	std	Z+9, r29	; 0x09
 2b2:	c0 87       	std	Z+8, r28	; 0x08
 2b4:	83 81       	ldd	r24, Z+3	; 0x03
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	83 83       	std	Z+3, r24	; 0x03
 2ba:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__iob+0x2>
 2be:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__iob+0x3>
 2c2:	89 2b       	or	r24, r25
 2c4:	71 f4       	brne	.+28     	; 0x2e2 <fdevopen+0x8a>
 2c6:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__iob+0x3>
 2ca:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__iob+0x2>
 2ce:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__iob+0x4>
 2d2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__iob+0x5>
 2d6:	89 2b       	or	r24, r25
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <fdevopen+0x8a>
 2da:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__iob+0x5>
 2de:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__iob+0x4>
 2e2:	cf 01       	movw	r24, r30
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <calloc>:
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	86 9f       	mul	r24, r22
 2f8:	80 01       	movw	r16, r0
 2fa:	87 9f       	mul	r24, r23
 2fc:	10 0d       	add	r17, r0
 2fe:	96 9f       	mul	r25, r22
 300:	10 0d       	add	r17, r0
 302:	11 24       	eor	r1, r1
 304:	c8 01       	movw	r24, r16
 306:	0e 94 93 01 	call	0x326	; 0x326 <malloc>
 30a:	ec 01       	movw	r28, r24
 30c:	00 97       	sbiw	r24, 0x00	; 0
 30e:	29 f0       	breq	.+10     	; 0x31a <calloc+0x2c>
 310:	a8 01       	movw	r20, r16
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	0e 94 b4 02 	call	0x568	; 0x568 <memset>
 31a:	ce 01       	movw	r24, r28
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <malloc>:
 326:	0f 93       	push	r16
 328:	1f 93       	push	r17
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	91 05       	cpc	r25, r1
 332:	10 f4       	brcc	.+4      	; 0x338 <malloc+0x12>
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__flp>
 33c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__flp+0x1>
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	a0 e0       	ldi	r26, 0x00	; 0
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	30 97       	sbiw	r30, 0x00	; 0
 34a:	19 f1       	breq	.+70     	; 0x392 <malloc+0x6c>
 34c:	40 81       	ld	r20, Z
 34e:	51 81       	ldd	r21, Z+1	; 0x01
 350:	02 81       	ldd	r16, Z+2	; 0x02
 352:	13 81       	ldd	r17, Z+3	; 0x03
 354:	48 17       	cp	r20, r24
 356:	59 07       	cpc	r21, r25
 358:	c8 f0       	brcs	.+50     	; 0x38c <malloc+0x66>
 35a:	84 17       	cp	r24, r20
 35c:	95 07       	cpc	r25, r21
 35e:	69 f4       	brne	.+26     	; 0x37a <malloc+0x54>
 360:	10 97       	sbiw	r26, 0x00	; 0
 362:	31 f0       	breq	.+12     	; 0x370 <malloc+0x4a>
 364:	12 96       	adiw	r26, 0x02	; 2
 366:	0c 93       	st	X, r16
 368:	12 97       	sbiw	r26, 0x02	; 2
 36a:	13 96       	adiw	r26, 0x03	; 3
 36c:	1c 93       	st	X, r17
 36e:	27 c0       	rjmp	.+78     	; 0x3be <malloc+0x98>
 370:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <__flp>
 374:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <__flp+0x1>
 378:	22 c0       	rjmp	.+68     	; 0x3be <malloc+0x98>
 37a:	21 15       	cp	r18, r1
 37c:	31 05       	cpc	r19, r1
 37e:	19 f0       	breq	.+6      	; 0x386 <malloc+0x60>
 380:	42 17       	cp	r20, r18
 382:	53 07       	cpc	r21, r19
 384:	18 f4       	brcc	.+6      	; 0x38c <malloc+0x66>
 386:	9a 01       	movw	r18, r20
 388:	bd 01       	movw	r22, r26
 38a:	ef 01       	movw	r28, r30
 38c:	df 01       	movw	r26, r30
 38e:	f8 01       	movw	r30, r16
 390:	db cf       	rjmp	.-74     	; 0x348 <malloc+0x22>
 392:	21 15       	cp	r18, r1
 394:	31 05       	cpc	r19, r1
 396:	f9 f0       	breq	.+62     	; 0x3d6 <malloc+0xb0>
 398:	28 1b       	sub	r18, r24
 39a:	39 0b       	sbc	r19, r25
 39c:	24 30       	cpi	r18, 0x04	; 4
 39e:	31 05       	cpc	r19, r1
 3a0:	80 f4       	brcc	.+32     	; 0x3c2 <malloc+0x9c>
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	9b 81       	ldd	r25, Y+3	; 0x03
 3a6:	61 15       	cp	r22, r1
 3a8:	71 05       	cpc	r23, r1
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <malloc+0x8e>
 3ac:	fb 01       	movw	r30, r22
 3ae:	93 83       	std	Z+3, r25	; 0x03
 3b0:	82 83       	std	Z+2, r24	; 0x02
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <malloc+0x96>
 3b4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__flp+0x1>
 3b8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__flp>
 3bc:	fe 01       	movw	r30, r28
 3be:	32 96       	adiw	r30, 0x02	; 2
 3c0:	44 c0       	rjmp	.+136    	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 3c2:	fe 01       	movw	r30, r28
 3c4:	e2 0f       	add	r30, r18
 3c6:	f3 1f       	adc	r31, r19
 3c8:	81 93       	st	Z+, r24
 3ca:	91 93       	st	Z+, r25
 3cc:	22 50       	subi	r18, 0x02	; 2
 3ce:	31 09       	sbc	r19, r1
 3d0:	39 83       	std	Y+1, r19	; 0x01
 3d2:	28 83       	st	Y, r18
 3d4:	3a c0       	rjmp	.+116    	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 3d6:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 3da:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 3de:	23 2b       	or	r18, r19
 3e0:	41 f4       	brne	.+16     	; 0x3f2 <malloc+0xcc>
 3e2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 3e6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 3ea:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <__brkval+0x1>
 3ee:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__brkval>
 3f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3fa:	21 15       	cp	r18, r1
 3fc:	31 05       	cpc	r19, r1
 3fe:	41 f4       	brne	.+16     	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 400:	2d b7       	in	r18, 0x3d	; 61
 402:	3e b7       	in	r19, 0x3e	; 62
 404:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 408:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 40c:	24 1b       	sub	r18, r20
 40e:	35 0b       	sbc	r19, r21
 410:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__brkval>
 414:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__brkval+0x1>
 418:	e2 17       	cp	r30, r18
 41a:	f3 07       	cpc	r31, r19
 41c:	a0 f4       	brcc	.+40     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 41e:	2e 1b       	sub	r18, r30
 420:	3f 0b       	sbc	r19, r31
 422:	28 17       	cp	r18, r24
 424:	39 07       	cpc	r19, r25
 426:	78 f0       	brcs	.+30     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 428:	ac 01       	movw	r20, r24
 42a:	4e 5f       	subi	r20, 0xFE	; 254
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	24 17       	cp	r18, r20
 430:	35 07       	cpc	r19, r21
 432:	48 f0       	brcs	.+18     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 434:	4e 0f       	add	r20, r30
 436:	5f 1f       	adc	r21, r31
 438:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <__brkval+0x1>
 43c:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <__brkval>
 440:	81 93       	st	Z+, r24
 442:	91 93       	st	Z+, r25
 444:	02 c0       	rjmp	.+4      	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 446:	e0 e0       	ldi	r30, 0x00	; 0
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	cf 01       	movw	r24, r30
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <free>:
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	00 97       	sbiw	r24, 0x00	; 0
 45c:	09 f4       	brne	.+2      	; 0x460 <free+0xa>
 45e:	81 c0       	rjmp	.+258    	; 0x562 <__stack+0x63>
 460:	fc 01       	movw	r30, r24
 462:	32 97       	sbiw	r30, 0x02	; 2
 464:	13 82       	std	Z+3, r1	; 0x03
 466:	12 82       	std	Z+2, r1	; 0x02
 468:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <__flp>
 46c:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <__flp+0x1>
 470:	10 97       	sbiw	r26, 0x00	; 0
 472:	81 f4       	brne	.+32     	; 0x494 <free+0x3e>
 474:	20 81       	ld	r18, Z
 476:	31 81       	ldd	r19, Z+1	; 0x01
 478:	82 0f       	add	r24, r18
 47a:	93 1f       	adc	r25, r19
 47c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 480:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 484:	28 17       	cp	r18, r24
 486:	39 07       	cpc	r19, r25
 488:	51 f5       	brne	.+84     	; 0x4de <free+0x88>
 48a:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <__brkval+0x1>
 48e:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <__brkval>
 492:	67 c0       	rjmp	.+206    	; 0x562 <__stack+0x63>
 494:	ed 01       	movw	r28, r26
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	ce 17       	cp	r28, r30
 49c:	df 07       	cpc	r29, r31
 49e:	40 f4       	brcc	.+16     	; 0x4b0 <free+0x5a>
 4a0:	4a 81       	ldd	r20, Y+2	; 0x02
 4a2:	5b 81       	ldd	r21, Y+3	; 0x03
 4a4:	9e 01       	movw	r18, r28
 4a6:	41 15       	cp	r20, r1
 4a8:	51 05       	cpc	r21, r1
 4aa:	f1 f0       	breq	.+60     	; 0x4e8 <free+0x92>
 4ac:	ea 01       	movw	r28, r20
 4ae:	f5 cf       	rjmp	.-22     	; 0x49a <free+0x44>
 4b0:	d3 83       	std	Z+3, r29	; 0x03
 4b2:	c2 83       	std	Z+2, r28	; 0x02
 4b4:	40 81       	ld	r20, Z
 4b6:	51 81       	ldd	r21, Z+1	; 0x01
 4b8:	84 0f       	add	r24, r20
 4ba:	95 1f       	adc	r25, r21
 4bc:	c8 17       	cp	r28, r24
 4be:	d9 07       	cpc	r29, r25
 4c0:	59 f4       	brne	.+22     	; 0x4d8 <free+0x82>
 4c2:	88 81       	ld	r24, Y
 4c4:	99 81       	ldd	r25, Y+1	; 0x01
 4c6:	84 0f       	add	r24, r20
 4c8:	95 1f       	adc	r25, r21
 4ca:	02 96       	adiw	r24, 0x02	; 2
 4cc:	91 83       	std	Z+1, r25	; 0x01
 4ce:	80 83       	st	Z, r24
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	9b 81       	ldd	r25, Y+3	; 0x03
 4d4:	93 83       	std	Z+3, r25	; 0x03
 4d6:	82 83       	std	Z+2, r24	; 0x02
 4d8:	21 15       	cp	r18, r1
 4da:	31 05       	cpc	r19, r1
 4dc:	29 f4       	brne	.+10     	; 0x4e8 <free+0x92>
 4de:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__flp+0x1>
 4e2:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__flp>
 4e6:	3d c0       	rjmp	.+122    	; 0x562 <__stack+0x63>
 4e8:	e9 01       	movw	r28, r18
 4ea:	fb 83       	std	Y+3, r31	; 0x03
 4ec:	ea 83       	std	Y+2, r30	; 0x02
 4ee:	49 91       	ld	r20, Y+
 4f0:	59 91       	ld	r21, Y+
 4f2:	c4 0f       	add	r28, r20
 4f4:	d5 1f       	adc	r29, r21
 4f6:	ec 17       	cp	r30, r28
 4f8:	fd 07       	cpc	r31, r29
 4fa:	61 f4       	brne	.+24     	; 0x514 <__stack+0x15>
 4fc:	80 81       	ld	r24, Z
 4fe:	91 81       	ldd	r25, Z+1	; 0x01
 500:	84 0f       	add	r24, r20
 502:	95 1f       	adc	r25, r21
 504:	02 96       	adiw	r24, 0x02	; 2
 506:	e9 01       	movw	r28, r18
 508:	99 83       	std	Y+1, r25	; 0x01
 50a:	88 83       	st	Y, r24
 50c:	82 81       	ldd	r24, Z+2	; 0x02
 50e:	93 81       	ldd	r25, Z+3	; 0x03
 510:	9b 83       	std	Y+3, r25	; 0x03
 512:	8a 83       	std	Y+2, r24	; 0x02
 514:	e0 e0       	ldi	r30, 0x00	; 0
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	12 96       	adiw	r26, 0x02	; 2
 51a:	8d 91       	ld	r24, X+
 51c:	9c 91       	ld	r25, X
 51e:	13 97       	sbiw	r26, 0x03	; 3
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	19 f0       	breq	.+6      	; 0x52a <__stack+0x2b>
 524:	fd 01       	movw	r30, r26
 526:	dc 01       	movw	r26, r24
 528:	f7 cf       	rjmp	.-18     	; 0x518 <__stack+0x19>
 52a:	8d 91       	ld	r24, X+
 52c:	9c 91       	ld	r25, X
 52e:	11 97       	sbiw	r26, 0x01	; 1
 530:	9d 01       	movw	r18, r26
 532:	2e 5f       	subi	r18, 0xFE	; 254
 534:	3f 4f       	sbci	r19, 0xFF	; 255
 536:	82 0f       	add	r24, r18
 538:	93 1f       	adc	r25, r19
 53a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 53e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 542:	28 17       	cp	r18, r24
 544:	39 07       	cpc	r19, r25
 546:	69 f4       	brne	.+26     	; 0x562 <__stack+0x63>
 548:	30 97       	sbiw	r30, 0x00	; 0
 54a:	29 f4       	brne	.+10     	; 0x556 <__stack+0x57>
 54c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__flp+0x1>
 550:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__flp>
 554:	02 c0       	rjmp	.+4      	; 0x55a <__stack+0x5b>
 556:	13 82       	std	Z+3, r1	; 0x03
 558:	12 82       	std	Z+2, r1	; 0x02
 55a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__brkval+0x1>
 55e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__brkval>
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <memset>:
 568:	dc 01       	movw	r26, r24
 56a:	01 c0       	rjmp	.+2      	; 0x56e <memset+0x6>
 56c:	6d 93       	st	X+, r22
 56e:	41 50       	subi	r20, 0x01	; 1
 570:	50 40       	sbci	r21, 0x00	; 0
 572:	e0 f7       	brcc	.-8      	; 0x56c <memset+0x4>
 574:	08 95       	ret

00000576 <_exit>:
 576:	f8 94       	cli

00000578 <__stop_program>:
 578:	ff cf       	rjmp	.-2      	; 0x578 <__stop_program>

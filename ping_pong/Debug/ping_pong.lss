
ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023c  00800100  000009bc  00000a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080033c  0080033c  00000c8c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001af0  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e5c  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df4  00000000  00000000  000037fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003fc  00000000  00000000  000045f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ce  00000000  00000000  000049ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adc  00000000  00000000  000050ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005b96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <_etext+0x186>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	13 e0       	ldi	r17, 0x03	; 3
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	ec eb       	ldi	r30, 0xBC	; 188
 37c:	f9 e0       	ldi	r31, 0x09	; 9
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	ac 33       	cpi	r26, 0x3C	; 60
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	23 e0       	ldi	r18, 0x03	; 3
 38c:	ac e3       	ldi	r26, 0x3C	; 60
 38e:	b3 e0       	ldi	r27, 0x03	; 3
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	ac 34       	cpi	r26, 0x4C	; 76
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 15 02 	call	0x42a	; 0x42a <main>
 39e:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_Init>:

}
*/

void ADC_Init() {
	DDRB = (1 << DDB1);
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	87 bb       	out	0x17, r24	; 23
	OCR2 = 128;
 3aa:	80 e8       	ldi	r24, 0x80	; 128
 3ac:	82 bd       	out	0x22, r24	; 34
	TCCR2 |= (1 << COM21);
 3ae:	87 b5       	in	r24, 0x27	; 39
 3b0:	80 62       	ori	r24, 0x20	; 32
 3b2:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << WGM21) | (1 << WGM20);
 3b4:	87 b5       	in	r24, 0x27	; 39
 3b6:	88 64       	ori	r24, 0x48	; 72
 3b8:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << CS20);
 3ba:	87 b5       	in	r24, 0x27	; 39
 3bc:	81 60       	ori	r24, 0x01	; 1
 3be:	87 bd       	out	0x27, r24	; 39
 3c0:	08 95       	ret

000003c2 <ADC_Read>:
int ADC_Read (int channel) {
	//Pulse on WR
	

	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x10b4>
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
	int Tconv = (9*4*2)/4912000;
	_delay_ms(Tconv);

	int  value=0;
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	70 e0       	ldi	r23, 0x00	; 0
	
	//Pulses on RD
	for (int i=0;i<4;i++){
 3d0:	0c c0       	rjmp	.+24     	; 0x3ea <ADC_Read+0x28>
		uint8_t  read = ext_mem[0x1400];
 3d2:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <__bss_end+0x10b4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d6:	5c e3       	ldi	r21, 0x3C	; 60
 3d8:	5a 95       	dec	r21
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <ADC_Read+0x16>
		_delay_ms(0.18);
		if (i == channel){
 3dc:	28 17       	cp	r18, r24
 3de:	39 07       	cpc	r19, r25
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <ADC_Read+0x24>
			 value = read;
 3e2:	64 2f       	mov	r22, r20
 3e4:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ea:	24 30       	cpi	r18, 0x04	; 4
 3ec:	31 05       	cpc	r19, r1
 3ee:	8c f3       	brlt	.-30     	; 0x3d2 <ADC_Read+0x10>
		if (i == channel){
			 value = read;
		}
	}
	return value;
}
 3f0:	cb 01       	movw	r24, r22
 3f2:	08 95       	ret

000003f4 <joystick_calibrate>:
#include "JOYSTICK.h"
#include "ADC.h"

volatile joystick_pos mean_pos;

joystick_pos joystick_calibrate(){
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
	
	mean_pos.x = ADC_Read(0);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <ADC_Read>
 400:	cc e3       	ldi	r28, 0x3C	; 60
 402:	d3 e0       	ldi	r29, 0x03	; 3
 404:	99 83       	std	Y+1, r25	; 0x01
 406:	88 83       	st	Y, r24
	mean_pos.y = ADC_Read(1);
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <ADC_Read>
 410:	9b 83       	std	Y+3, r25	; 0x03
 412:	8a 83       	std	Y+2, r24	; 0x02
	
	return mean_pos;
 414:	60 91 3c 03 	lds	r22, 0x033C	; 0x80033c <__data_end>
 418:	70 91 3d 03 	lds	r23, 0x033D	; 0x80033d <__data_end+0x1>
 41c:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <__data_end+0x2>
 420:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <__data_end+0x3>
}
 424:	df 91       	pop	r29
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <main>:
int main(void)
{
			

	//Drivers init
	UART_Init(MYUBRR);
 42a:	8f e1       	ldi	r24, 0x1F	; 31
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 40 03 	call	0x680	; 0x680 <UART_Init>
	SRAM_Init();
 432:	0e 94 1a 03 	call	0x634	; 0x634 <SRAM_Init>
	ADC_Init();
 436:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_Init>
	joystick_calibrate();
 43a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <joystick_calibrate>
	OLED_init();
 43e:	0e 94 2f 02 	call	0x45e	; 0x45e <OLED_init>
	
	OLED_test();
 442:	0e 94 25 03 	call	0x64a	; 0x64a <OLED_test>
	
	
	//Ports setting 
	DDRE = 0b11111111;
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	86 b9       	out	0x06, r24	; 6
    //DDRA = 0b11111111; 
	//DDRD |= 0b11000000;
	//DDRC = DDRC | 0b00001111;
	PORTE = 0b00000010;
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	87 b9       	out	0x07, r24	; 7
	//get_joystick_pos();
	
	//_delay_ms(100);
	
    //}
}
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	08 95       	ret

00000454 <oled_write_c>:
		OLED_go_to_page();
	}
	
}
	
void OLED_home(){}
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	0e 94 21 03 	call	0x642	; 0x642 <xmem_write>
 45c:	08 95       	ret

0000045e <OLED_init>:
 45e:	e0 e4       	ldi	r30, 0x40	; 64
 460:	f3 e0       	ldi	r31, 0x03	; 3
 462:	10 82       	st	Z, r1
 464:	11 82       	std	Z+1, r1	; 0x01
 466:	8e ea       	ldi	r24, 0xAE	; 174
 468:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 46c:	81 ea       	ldi	r24, 0xA1	; 161
 46e:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 472:	8a ed       	ldi	r24, 0xDA	; 218
 474:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 478:	82 e1       	ldi	r24, 0x12	; 18
 47a:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 47e:	88 ec       	ldi	r24, 0xC8	; 200
 480:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 484:	88 ea       	ldi	r24, 0xA8	; 168
 486:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 48a:	8f e3       	ldi	r24, 0x3F	; 63
 48c:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 490:	85 ed       	ldi	r24, 0xD5	; 213
 492:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 496:	80 e8       	ldi	r24, 0x80	; 128
 498:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 49c:	81 e8       	ldi	r24, 0x81	; 129
 49e:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4a2:	80 e5       	ldi	r24, 0x50	; 80
 4a4:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4a8:	89 ed       	ldi	r24, 0xD9	; 217
 4aa:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4ae:	81 e2       	ldi	r24, 0x21	; 33
 4b0:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4b4:	80 e2       	ldi	r24, 0x20	; 32
 4b6:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4c0:	8b ed       	ldi	r24, 0xDB	; 219
 4c2:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4c6:	80 e3       	ldi	r24, 0x30	; 48
 4c8:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4cc:	8d ea       	ldi	r24, 0xAD	; 173
 4ce:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4d8:	84 ea       	ldi	r24, 0xA4	; 164
 4da:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4de:	86 ea       	ldi	r24, 0xA6	; 166
 4e0:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4e4:	8f ea       	ldi	r24, 0xAF	; 175
 4e6:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4ea:	08 95       	ret

000004ec <OLED_set_page>:


void OLED_set_page(uint8_t page) {
	uint8_t mask = 0xB0;
	uint8_t command = mask | page;
	current_pos.page = page;
 4ec:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <current_pos>
	oled_write_c(command);
 4f0:	80 6b       	ori	r24, 0xB0	; 176
 4f2:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
 4f6:	08 95       	ret

000004f8 <oled_write_d>:
void oled_write_c(uint8_t command) {
	xmem_write(command, 0x0000);
}


void oled_write_d(uint8_t data) {
 4f8:	cf 93       	push	r28
 4fa:	c8 2f       	mov	r28, r24
	OLED_set_page(current_pos.page);
 4fc:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <current_pos>
 500:	0e 94 76 02 	call	0x4ec	; 0x4ec <OLED_set_page>
	xmem_write(data, 0x0200);
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	72 e0       	ldi	r23, 0x02	; 2
 508:	8c 2f       	mov	r24, r28
 50a:	0e 94 21 03 	call	0x642	; 0x642 <xmem_write>
}
 50e:	cf 91       	pop	r28
 510:	08 95       	ret

00000512 <OLED_set_column>:
	uint8_t command = mask | page;
	current_pos.page = page;
	oled_write_c(command);
}

void OLED_set_column(uint8_t column) {
 512:	cf 93       	push	r28
 514:	c8 2f       	mov	r28, r24
	current_pos.column = column;
 516:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <current_pos+0x1>
	uint8_t mask_lsb = 0x0F;
	uint8_t command = mask_lsb & column;
	oled_write_c(command);
 51a:	8f 70       	andi	r24, 0x0F	; 15
 51c:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
	uint8_t mask_msb = 0xF0;
	command = mask_msb & column;
 520:	8c 2f       	mov	r24, r28
 522:	80 7f       	andi	r24, 0xF0	; 240
	for(int i=0;i<4;i++){
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	03 c0       	rjmp	.+6      	; 0x530 <OLED_set_column+0x1e>
		command = command >> 1;
 52a:	86 95       	lsr	r24
	uint8_t mask_lsb = 0x0F;
	uint8_t command = mask_lsb & column;
	oled_write_c(command);
	uint8_t mask_msb = 0xF0;
	command = mask_msb & column;
	for(int i=0;i<4;i++){
 52c:	2f 5f       	subi	r18, 0xFF	; 255
 52e:	3f 4f       	sbci	r19, 0xFF	; 255
 530:	24 30       	cpi	r18, 0x04	; 4
 532:	31 05       	cpc	r19, r1
 534:	d4 f3       	brlt	.-12     	; 0x52a <OLED_set_column+0x18>
		command = command >> 1;
	}
	command = 0x10 | command;
	oled_write_c(command);
 536:	80 61       	ori	r24, 0x10	; 16
 538:	0e 94 2a 02 	call	0x454	; 0x454 <oled_write_c>
}
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <OLED_clear_page>:
void oled_write_d(uint8_t data) {
	OLED_set_page(current_pos.page);
	xmem_write(data, 0x0200);
}

void OLED_clear_page(){
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
	OLED_set_column(0x00);
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 89 02 	call	0x512	; 0x512 <OLED_set_column>
	for (int column = 0; column < 128; column++) {
 54c:	c0 e0       	ldi	r28, 0x00	; 0
 54e:	d0 e0       	ldi	r29, 0x00	; 0
 550:	04 c0       	rjmp	.+8      	; 0x55a <OLED_clear_page+0x1a>
		oled_write_d(0x00);
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <oled_write_d>
	xmem_write(data, 0x0200);
}

void OLED_clear_page(){
	OLED_set_column(0x00);
	for (int column = 0; column < 128; column++) {
 558:	21 96       	adiw	r28, 0x01	; 1
 55a:	c0 38       	cpi	r28, 0x80	; 128
 55c:	d1 05       	cpc	r29, r1
 55e:	cc f3       	brlt	.-14     	; 0x552 <OLED_clear_page+0x12>
		oled_write_d(0x00);
	}
	OLED_set_column(0x00);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 89 02 	call	0x512	; 0x512 <OLED_set_column>
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <OLED_go_to_page>:
}
	
void OLED_home(){}
	
void OLED_go_to_page() {
	uint8_t next_page = current_pos.page + 0x01;
 56e:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <current_pos>
	OLED_set_page(next_page);
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	0e 94 76 02 	call	0x4ec	; 0x4ec <OLED_set_page>
	OLED_set_column(0x00);	
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	0e 94 89 02 	call	0x512	; 0x512 <OLED_set_column>
 580:	08 95       	ret

00000582 <OLED_reset>:
	}
	OLED_set_column(0x00);
}


void OLED_reset() {
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
	OLED_set_page(0x00);
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	0e 94 76 02 	call	0x4ec	; 0x4ec <OLED_set_page>
	
	for (int page = 0; page < 8; page++) {
 58c:	c0 e0       	ldi	r28, 0x00	; 0
 58e:	d0 e0       	ldi	r29, 0x00	; 0
 590:	06 c0       	rjmp	.+12     	; 0x59e <OLED_reset+0x1c>
		OLED_clear_page(page);
 592:	ce 01       	movw	r24, r28
 594:	0e 94 a0 02 	call	0x540	; 0x540 <OLED_clear_page>
		OLED_go_to_page();
 598:	0e 94 b7 02 	call	0x56e	; 0x56e <OLED_go_to_page>


void OLED_reset() {
	OLED_set_page(0x00);
	
	for (int page = 0; page < 8; page++) {
 59c:	21 96       	adiw	r28, 0x01	; 1
 59e:	c8 30       	cpi	r28, 0x08	; 8
 5a0:	d1 05       	cpc	r29, r1
 5a2:	bc f3       	brlt	.-18     	; 0x592 <OLED_reset+0x10>
		OLED_clear_page(page);
		OLED_go_to_page();
	}
	
}
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <OLED_print_char>:
	}
	command = 0x10 | command;
	oled_write_c(command);
}

void OLED_print_char(unsigned char c){ // typo for calling func -> 'A' and not "A"
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
	int to_print = (int)c - 32;
 5b2:	08 2f       	mov	r16, r24
 5b4:	10 e0       	ldi	r17, 0x00	; 0
 5b6:	00 52       	subi	r16, 0x20	; 32
 5b8:	11 09       	sbc	r17, r1
	
	for (int i = 0; i < 8; i++){
 5ba:	c0 e0       	ldi	r28, 0x00	; 0
 5bc:	d0 e0       	ldi	r29, 0x00	; 0
 5be:	0f c0       	rjmp	.+30     	; 0x5de <OLED_print_char+0x34>
		oled_write_d(pgm_read_byte(&font8[to_print][i]));
 5c0:	f8 01       	movw	r30, r16
 5c2:	ee 0f       	add	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	ee 0f       	add	r30, r30
 5c8:	ff 1f       	adc	r31, r31
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	ec 0f       	add	r30, r28
 5d0:	fd 1f       	adc	r31, r29
 5d2:	e0 59       	subi	r30, 0x90	; 144
 5d4:	ff 4f       	sbci	r31, 0xFF	; 255
 5d6:	84 91       	lpm	r24, Z
 5d8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <oled_write_d>
}

void OLED_print_char(unsigned char c){ // typo for calling func -> 'A' and not "A"
	int to_print = (int)c - 32;
	
	for (int i = 0; i < 8; i++){
 5dc:	21 96       	adiw	r28, 0x01	; 1
 5de:	c8 30       	cpi	r28, 0x08	; 8
 5e0:	d1 05       	cpc	r29, r1
 5e2:	74 f3       	brlt	.-36     	; 0x5c0 <OLED_print_char+0x16>
		oled_write_d(pgm_read_byte(&font8[to_print][i]));
	}
	
}
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <OLED_print_string>:

void OLED_print_string(char* string) {
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	7c 01       	movw	r14, r24
	int string_length = strlen(string);
 5fc:	fc 01       	movw	r30, r24
 5fe:	01 90       	ld	r0, Z+
 600:	00 20       	and	r0, r0
 602:	e9 f7       	brne	.-6      	; 0x5fe <OLED_print_string+0x10>
 604:	31 97       	sbiw	r30, 0x01	; 1
 606:	8f 01       	movw	r16, r30
 608:	08 1b       	sub	r16, r24
 60a:	19 0b       	sbc	r17, r25
	for (int i = 0; i < string_length; i++) {
 60c:	c0 e0       	ldi	r28, 0x00	; 0
 60e:	d0 e0       	ldi	r29, 0x00	; 0
 610:	07 c0       	rjmp	.+14     	; 0x620 <OLED_print_string+0x32>
		OLED_print_char(string[i]); 
 612:	f7 01       	movw	r30, r14
 614:	ec 0f       	add	r30, r28
 616:	fd 1f       	adc	r31, r29
 618:	80 81       	ld	r24, Z
 61a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <OLED_print_char>
	
}

void OLED_print_string(char* string) {
	int string_length = strlen(string);
	for (int i = 0; i < string_length; i++) {
 61e:	21 96       	adiw	r28, 0x01	; 1
 620:	c0 17       	cp	r28, r16
 622:	d1 07       	cpc	r29, r17
 624:	b4 f3       	brlt	.-20     	; 0x612 <OLED_print_string+0x24>
		OLED_print_char(string[i]); 
	}
	
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	08 95       	ret

00000634 <SRAM_Init>:
#include "SRAM.h"


void SRAM_Init()
{
	MCUCR |= (1 << SRE);
 634:	85 b7       	in	r24, 0x35	; 53
 636:	80 68       	ori	r24, 0x80	; 128
 638:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM0 ) ;
 63a:	80 b7       	in	r24, 0x30	; 48
 63c:	88 60       	ori	r24, 0x08	; 8
 63e:	80 bf       	out	0x30, r24	; 48
 640:	08 95       	ret

00000642 <xmem_write>:
}

void xmem_write ( uint8_t data , uint16_t addr ) {
	volatile char * ext_mem = ( char *) 0x1000 ;
	ext_mem [ addr ]= data;
 642:	fb 01       	movw	r30, r22
 644:	f0 5f       	subi	r31, 0xF0	; 240
 646:	80 83       	st	Z, r24
 648:	08 95       	ret

0000064a <OLED_test>:
}


void OLED_test() {
	
	OLED_reset();
 64a:	0e 94 c1 02 	call	0x582	; 0x582 <OLED_reset>
	
	OLED_set_page(0x00);
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	0e 94 76 02 	call	0x4ec	; 0x4ec <OLED_set_page>
	OLED_set_column(0x00);
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 89 02 	call	0x512	; 0x512 <OLED_set_column>
	
	OLED_print_char('A');
 65c:	81 e4       	ldi	r24, 0x41	; 65
 65e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <OLED_print_char>
	OLED_go_to_page();
 662:	0e 94 b7 02 	call	0x56e	; 0x56e <OLED_go_to_page>
	OLED_print_string("VIVE LA FRANCE !");
 666:	8a e2       	ldi	r24, 0x2A	; 42
 668:	93 e0       	ldi	r25, 0x03	; 3
 66a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <OLED_print_string>
 66e:	08 95       	ret

00000670 <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1 << UDRE0)) );
 670:	5d 9b       	sbis	0x0b, 5	; 11
 672:	fe cf       	rjmp	.-4      	; 0x670 <UART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 674:	8c b9       	out	0x0c, r24	; 12
 676:	08 95       	ret

00000678 <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 678:	5f 9b       	sbis	0x0b, 7	; 11
 67a:	fe cf       	rjmp	.-4      	; 0x678 <UART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 67c:	8c b1       	in	r24, 0x0c	; 12
 67e:	08 95       	ret

00000680 <UART_Init>:
#include "UART.h"

void UART_Init(unsigned int my_ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr >> 8);
 680:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)my_ubrr;
 682:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 684:	88 e1       	ldi	r24, 0x18	; 24
 686:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
 688:	8e e8       	ldi	r24, 0x8E	; 142
 68a:	80 bd       	out	0x20, r24	; 32

	fdevopen(UART_Transmit, UART_Receive);
 68c:	6c e3       	ldi	r22, 0x3C	; 60
 68e:	73 e0       	ldi	r23, 0x03	; 3
 690:	88 e3       	ldi	r24, 0x38	; 56
 692:	93 e0       	ldi	r25, 0x03	; 3
 694:	0e 94 4d 03 	call	0x69a	; 0x69a <fdevopen>
 698:	08 95       	ret

0000069a <fdevopen>:
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	00 97       	sbiw	r24, 0x00	; 0
 6a4:	31 f4       	brne	.+12     	; 0x6b2 <fdevopen+0x18>
 6a6:	61 15       	cp	r22, r1
 6a8:	71 05       	cpc	r23, r1
 6aa:	19 f4       	brne	.+6      	; 0x6b2 <fdevopen+0x18>
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	3a c0       	rjmp	.+116    	; 0x726 <fdevopen+0x8c>
 6b2:	8b 01       	movw	r16, r22
 6b4:	ec 01       	movw	r28, r24
 6b6:	6e e0       	ldi	r22, 0x0E	; 14
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 98 03 	call	0x730	; 0x730 <calloc>
 6c2:	fc 01       	movw	r30, r24
 6c4:	89 2b       	or	r24, r25
 6c6:	91 f3       	breq	.-28     	; 0x6ac <fdevopen+0x12>
 6c8:	80 e8       	ldi	r24, 0x80	; 128
 6ca:	83 83       	std	Z+3, r24	; 0x03
 6cc:	01 15       	cp	r16, r1
 6ce:	11 05       	cpc	r17, r1
 6d0:	71 f0       	breq	.+28     	; 0x6ee <fdevopen+0x54>
 6d2:	13 87       	std	Z+11, r17	; 0x0b
 6d4:	02 87       	std	Z+10, r16	; 0x0a
 6d6:	81 e8       	ldi	r24, 0x81	; 129
 6d8:	83 83       	std	Z+3, r24	; 0x03
 6da:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <__iob>
 6de:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <__iob+0x1>
 6e2:	89 2b       	or	r24, r25
 6e4:	21 f4       	brne	.+8      	; 0x6ee <fdevopen+0x54>
 6e6:	f0 93 43 03 	sts	0x0343, r31	; 0x800343 <__iob+0x1>
 6ea:	e0 93 42 03 	sts	0x0342, r30	; 0x800342 <__iob>
 6ee:	20 97       	sbiw	r28, 0x00	; 0
 6f0:	c9 f0       	breq	.+50     	; 0x724 <fdevopen+0x8a>
 6f2:	d1 87       	std	Z+9, r29	; 0x09
 6f4:	c0 87       	std	Z+8, r28	; 0x08
 6f6:	83 81       	ldd	r24, Z+3	; 0x03
 6f8:	82 60       	ori	r24, 0x02	; 2
 6fa:	83 83       	std	Z+3, r24	; 0x03
 6fc:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <__iob+0x2>
 700:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <__iob+0x3>
 704:	89 2b       	or	r24, r25
 706:	71 f4       	brne	.+28     	; 0x724 <fdevopen+0x8a>
 708:	f0 93 45 03 	sts	0x0345, r31	; 0x800345 <__iob+0x3>
 70c:	e0 93 44 03 	sts	0x0344, r30	; 0x800344 <__iob+0x2>
 710:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <__iob+0x4>
 714:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <__iob+0x5>
 718:	89 2b       	or	r24, r25
 71a:	21 f4       	brne	.+8      	; 0x724 <fdevopen+0x8a>
 71c:	f0 93 47 03 	sts	0x0347, r31	; 0x800347 <__iob+0x5>
 720:	e0 93 46 03 	sts	0x0346, r30	; 0x800346 <__iob+0x4>
 724:	cf 01       	movw	r24, r30
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	1f 91       	pop	r17
 72c:	0f 91       	pop	r16
 72e:	08 95       	ret

00000730 <calloc>:
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	86 9f       	mul	r24, r22
 73a:	80 01       	movw	r16, r0
 73c:	87 9f       	mul	r24, r23
 73e:	10 0d       	add	r17, r0
 740:	96 9f       	mul	r25, r22
 742:	10 0d       	add	r17, r0
 744:	11 24       	eor	r1, r1
 746:	c8 01       	movw	r24, r16
 748:	0e 94 b4 03 	call	0x768	; 0x768 <malloc>
 74c:	ec 01       	movw	r28, r24
 74e:	00 97       	sbiw	r24, 0x00	; 0
 750:	29 f0       	breq	.+10     	; 0x75c <calloc+0x2c>
 752:	a8 01       	movw	r20, r16
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	70 e0       	ldi	r23, 0x00	; 0
 758:	0e 94 d5 04 	call	0x9aa	; 0x9aa <memset>
 75c:	ce 01       	movw	r24, r28
 75e:	df 91       	pop	r29
 760:	cf 91       	pop	r28
 762:	1f 91       	pop	r17
 764:	0f 91       	pop	r16
 766:	08 95       	ret

00000768 <malloc>:
 768:	0f 93       	push	r16
 76a:	1f 93       	push	r17
 76c:	cf 93       	push	r28
 76e:	df 93       	push	r29
 770:	82 30       	cpi	r24, 0x02	; 2
 772:	91 05       	cpc	r25, r1
 774:	10 f4       	brcc	.+4      	; 0x77a <malloc+0x12>
 776:	82 e0       	ldi	r24, 0x02	; 2
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <__flp>
 77e:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <__flp+0x1>
 782:	20 e0       	ldi	r18, 0x00	; 0
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	a0 e0       	ldi	r26, 0x00	; 0
 788:	b0 e0       	ldi	r27, 0x00	; 0
 78a:	30 97       	sbiw	r30, 0x00	; 0
 78c:	19 f1       	breq	.+70     	; 0x7d4 <malloc+0x6c>
 78e:	40 81       	ld	r20, Z
 790:	51 81       	ldd	r21, Z+1	; 0x01
 792:	02 81       	ldd	r16, Z+2	; 0x02
 794:	13 81       	ldd	r17, Z+3	; 0x03
 796:	48 17       	cp	r20, r24
 798:	59 07       	cpc	r21, r25
 79a:	c8 f0       	brcs	.+50     	; 0x7ce <malloc+0x66>
 79c:	84 17       	cp	r24, r20
 79e:	95 07       	cpc	r25, r21
 7a0:	69 f4       	brne	.+26     	; 0x7bc <malloc+0x54>
 7a2:	10 97       	sbiw	r26, 0x00	; 0
 7a4:	31 f0       	breq	.+12     	; 0x7b2 <malloc+0x4a>
 7a6:	12 96       	adiw	r26, 0x02	; 2
 7a8:	0c 93       	st	X, r16
 7aa:	12 97       	sbiw	r26, 0x02	; 2
 7ac:	13 96       	adiw	r26, 0x03	; 3
 7ae:	1c 93       	st	X, r17
 7b0:	27 c0       	rjmp	.+78     	; 0x800 <malloc+0x98>
 7b2:	00 93 4a 03 	sts	0x034A, r16	; 0x80034a <__flp>
 7b6:	10 93 4b 03 	sts	0x034B, r17	; 0x80034b <__flp+0x1>
 7ba:	22 c0       	rjmp	.+68     	; 0x800 <malloc+0x98>
 7bc:	21 15       	cp	r18, r1
 7be:	31 05       	cpc	r19, r1
 7c0:	19 f0       	breq	.+6      	; 0x7c8 <malloc+0x60>
 7c2:	42 17       	cp	r20, r18
 7c4:	53 07       	cpc	r21, r19
 7c6:	18 f4       	brcc	.+6      	; 0x7ce <malloc+0x66>
 7c8:	9a 01       	movw	r18, r20
 7ca:	bd 01       	movw	r22, r26
 7cc:	ef 01       	movw	r28, r30
 7ce:	df 01       	movw	r26, r30
 7d0:	f8 01       	movw	r30, r16
 7d2:	db cf       	rjmp	.-74     	; 0x78a <malloc+0x22>
 7d4:	21 15       	cp	r18, r1
 7d6:	31 05       	cpc	r19, r1
 7d8:	f9 f0       	breq	.+62     	; 0x818 <malloc+0xb0>
 7da:	28 1b       	sub	r18, r24
 7dc:	39 0b       	sbc	r19, r25
 7de:	24 30       	cpi	r18, 0x04	; 4
 7e0:	31 05       	cpc	r19, r1
 7e2:	80 f4       	brcc	.+32     	; 0x804 <malloc+0x9c>
 7e4:	8a 81       	ldd	r24, Y+2	; 0x02
 7e6:	9b 81       	ldd	r25, Y+3	; 0x03
 7e8:	61 15       	cp	r22, r1
 7ea:	71 05       	cpc	r23, r1
 7ec:	21 f0       	breq	.+8      	; 0x7f6 <malloc+0x8e>
 7ee:	fb 01       	movw	r30, r22
 7f0:	93 83       	std	Z+3, r25	; 0x03
 7f2:	82 83       	std	Z+2, r24	; 0x02
 7f4:	04 c0       	rjmp	.+8      	; 0x7fe <malloc+0x96>
 7f6:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <__flp+0x1>
 7fa:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <__flp>
 7fe:	fe 01       	movw	r30, r28
 800:	32 96       	adiw	r30, 0x02	; 2
 802:	44 c0       	rjmp	.+136    	; 0x88c <malloc+0x124>
 804:	fe 01       	movw	r30, r28
 806:	e2 0f       	add	r30, r18
 808:	f3 1f       	adc	r31, r19
 80a:	81 93       	st	Z+, r24
 80c:	91 93       	st	Z+, r25
 80e:	22 50       	subi	r18, 0x02	; 2
 810:	31 09       	sbc	r19, r1
 812:	39 83       	std	Y+1, r19	; 0x01
 814:	28 83       	st	Y, r18
 816:	3a c0       	rjmp	.+116    	; 0x88c <malloc+0x124>
 818:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <__brkval>
 81c:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <__brkval+0x1>
 820:	23 2b       	or	r18, r19
 822:	41 f4       	brne	.+16     	; 0x834 <malloc+0xcc>
 824:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 828:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 82c:	30 93 49 03 	sts	0x0349, r19	; 0x800349 <__brkval+0x1>
 830:	20 93 48 03 	sts	0x0348, r18	; 0x800348 <__brkval>
 834:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 838:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 83c:	21 15       	cp	r18, r1
 83e:	31 05       	cpc	r19, r1
 840:	41 f4       	brne	.+16     	; 0x852 <malloc+0xea>
 842:	2d b7       	in	r18, 0x3d	; 61
 844:	3e b7       	in	r19, 0x3e	; 62
 846:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 84a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 84e:	24 1b       	sub	r18, r20
 850:	35 0b       	sbc	r19, r21
 852:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <__brkval>
 856:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <__brkval+0x1>
 85a:	e2 17       	cp	r30, r18
 85c:	f3 07       	cpc	r31, r19
 85e:	a0 f4       	brcc	.+40     	; 0x888 <malloc+0x120>
 860:	2e 1b       	sub	r18, r30
 862:	3f 0b       	sbc	r19, r31
 864:	28 17       	cp	r18, r24
 866:	39 07       	cpc	r19, r25
 868:	78 f0       	brcs	.+30     	; 0x888 <malloc+0x120>
 86a:	ac 01       	movw	r20, r24
 86c:	4e 5f       	subi	r20, 0xFE	; 254
 86e:	5f 4f       	sbci	r21, 0xFF	; 255
 870:	24 17       	cp	r18, r20
 872:	35 07       	cpc	r19, r21
 874:	48 f0       	brcs	.+18     	; 0x888 <malloc+0x120>
 876:	4e 0f       	add	r20, r30
 878:	5f 1f       	adc	r21, r31
 87a:	50 93 49 03 	sts	0x0349, r21	; 0x800349 <__brkval+0x1>
 87e:	40 93 48 03 	sts	0x0348, r20	; 0x800348 <__brkval>
 882:	81 93       	st	Z+, r24
 884:	91 93       	st	Z+, r25
 886:	02 c0       	rjmp	.+4      	; 0x88c <malloc+0x124>
 888:	e0 e0       	ldi	r30, 0x00	; 0
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	cf 01       	movw	r24, r30
 88e:	df 91       	pop	r29
 890:	cf 91       	pop	r28
 892:	1f 91       	pop	r17
 894:	0f 91       	pop	r16
 896:	08 95       	ret

00000898 <free>:
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
 89c:	00 97       	sbiw	r24, 0x00	; 0
 89e:	09 f4       	brne	.+2      	; 0x8a2 <free+0xa>
 8a0:	81 c0       	rjmp	.+258    	; 0x9a4 <free+0x10c>
 8a2:	fc 01       	movw	r30, r24
 8a4:	32 97       	sbiw	r30, 0x02	; 2
 8a6:	13 82       	std	Z+3, r1	; 0x03
 8a8:	12 82       	std	Z+2, r1	; 0x02
 8aa:	a0 91 4a 03 	lds	r26, 0x034A	; 0x80034a <__flp>
 8ae:	b0 91 4b 03 	lds	r27, 0x034B	; 0x80034b <__flp+0x1>
 8b2:	10 97       	sbiw	r26, 0x00	; 0
 8b4:	81 f4       	brne	.+32     	; 0x8d6 <free+0x3e>
 8b6:	20 81       	ld	r18, Z
 8b8:	31 81       	ldd	r19, Z+1	; 0x01
 8ba:	82 0f       	add	r24, r18
 8bc:	93 1f       	adc	r25, r19
 8be:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <__brkval>
 8c2:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <__brkval+0x1>
 8c6:	28 17       	cp	r18, r24
 8c8:	39 07       	cpc	r19, r25
 8ca:	51 f5       	brne	.+84     	; 0x920 <free+0x88>
 8cc:	f0 93 49 03 	sts	0x0349, r31	; 0x800349 <__brkval+0x1>
 8d0:	e0 93 48 03 	sts	0x0348, r30	; 0x800348 <__brkval>
 8d4:	67 c0       	rjmp	.+206    	; 0x9a4 <free+0x10c>
 8d6:	ed 01       	movw	r28, r26
 8d8:	20 e0       	ldi	r18, 0x00	; 0
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	ce 17       	cp	r28, r30
 8de:	df 07       	cpc	r29, r31
 8e0:	40 f4       	brcc	.+16     	; 0x8f2 <free+0x5a>
 8e2:	4a 81       	ldd	r20, Y+2	; 0x02
 8e4:	5b 81       	ldd	r21, Y+3	; 0x03
 8e6:	9e 01       	movw	r18, r28
 8e8:	41 15       	cp	r20, r1
 8ea:	51 05       	cpc	r21, r1
 8ec:	f1 f0       	breq	.+60     	; 0x92a <free+0x92>
 8ee:	ea 01       	movw	r28, r20
 8f0:	f5 cf       	rjmp	.-22     	; 0x8dc <free+0x44>
 8f2:	d3 83       	std	Z+3, r29	; 0x03
 8f4:	c2 83       	std	Z+2, r28	; 0x02
 8f6:	40 81       	ld	r20, Z
 8f8:	51 81       	ldd	r21, Z+1	; 0x01
 8fa:	84 0f       	add	r24, r20
 8fc:	95 1f       	adc	r25, r21
 8fe:	c8 17       	cp	r28, r24
 900:	d9 07       	cpc	r29, r25
 902:	59 f4       	brne	.+22     	; 0x91a <free+0x82>
 904:	88 81       	ld	r24, Y
 906:	99 81       	ldd	r25, Y+1	; 0x01
 908:	84 0f       	add	r24, r20
 90a:	95 1f       	adc	r25, r21
 90c:	02 96       	adiw	r24, 0x02	; 2
 90e:	91 83       	std	Z+1, r25	; 0x01
 910:	80 83       	st	Z, r24
 912:	8a 81       	ldd	r24, Y+2	; 0x02
 914:	9b 81       	ldd	r25, Y+3	; 0x03
 916:	93 83       	std	Z+3, r25	; 0x03
 918:	82 83       	std	Z+2, r24	; 0x02
 91a:	21 15       	cp	r18, r1
 91c:	31 05       	cpc	r19, r1
 91e:	29 f4       	brne	.+10     	; 0x92a <free+0x92>
 920:	f0 93 4b 03 	sts	0x034B, r31	; 0x80034b <__flp+0x1>
 924:	e0 93 4a 03 	sts	0x034A, r30	; 0x80034a <__flp>
 928:	3d c0       	rjmp	.+122    	; 0x9a4 <free+0x10c>
 92a:	e9 01       	movw	r28, r18
 92c:	fb 83       	std	Y+3, r31	; 0x03
 92e:	ea 83       	std	Y+2, r30	; 0x02
 930:	49 91       	ld	r20, Y+
 932:	59 91       	ld	r21, Y+
 934:	c4 0f       	add	r28, r20
 936:	d5 1f       	adc	r29, r21
 938:	ec 17       	cp	r30, r28
 93a:	fd 07       	cpc	r31, r29
 93c:	61 f4       	brne	.+24     	; 0x956 <free+0xbe>
 93e:	80 81       	ld	r24, Z
 940:	91 81       	ldd	r25, Z+1	; 0x01
 942:	84 0f       	add	r24, r20
 944:	95 1f       	adc	r25, r21
 946:	02 96       	adiw	r24, 0x02	; 2
 948:	e9 01       	movw	r28, r18
 94a:	99 83       	std	Y+1, r25	; 0x01
 94c:	88 83       	st	Y, r24
 94e:	82 81       	ldd	r24, Z+2	; 0x02
 950:	93 81       	ldd	r25, Z+3	; 0x03
 952:	9b 83       	std	Y+3, r25	; 0x03
 954:	8a 83       	std	Y+2, r24	; 0x02
 956:	e0 e0       	ldi	r30, 0x00	; 0
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	12 96       	adiw	r26, 0x02	; 2
 95c:	8d 91       	ld	r24, X+
 95e:	9c 91       	ld	r25, X
 960:	13 97       	sbiw	r26, 0x03	; 3
 962:	00 97       	sbiw	r24, 0x00	; 0
 964:	19 f0       	breq	.+6      	; 0x96c <free+0xd4>
 966:	fd 01       	movw	r30, r26
 968:	dc 01       	movw	r26, r24
 96a:	f7 cf       	rjmp	.-18     	; 0x95a <free+0xc2>
 96c:	8d 91       	ld	r24, X+
 96e:	9c 91       	ld	r25, X
 970:	11 97       	sbiw	r26, 0x01	; 1
 972:	9d 01       	movw	r18, r26
 974:	2e 5f       	subi	r18, 0xFE	; 254
 976:	3f 4f       	sbci	r19, 0xFF	; 255
 978:	82 0f       	add	r24, r18
 97a:	93 1f       	adc	r25, r19
 97c:	20 91 48 03 	lds	r18, 0x0348	; 0x800348 <__brkval>
 980:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <__brkval+0x1>
 984:	28 17       	cp	r18, r24
 986:	39 07       	cpc	r19, r25
 988:	69 f4       	brne	.+26     	; 0x9a4 <free+0x10c>
 98a:	30 97       	sbiw	r30, 0x00	; 0
 98c:	29 f4       	brne	.+10     	; 0x998 <free+0x100>
 98e:	10 92 4b 03 	sts	0x034B, r1	; 0x80034b <__flp+0x1>
 992:	10 92 4a 03 	sts	0x034A, r1	; 0x80034a <__flp>
 996:	02 c0       	rjmp	.+4      	; 0x99c <free+0x104>
 998:	13 82       	std	Z+3, r1	; 0x03
 99a:	12 82       	std	Z+2, r1	; 0x02
 99c:	b0 93 49 03 	sts	0x0349, r27	; 0x800349 <__brkval+0x1>
 9a0:	a0 93 48 03 	sts	0x0348, r26	; 0x800348 <__brkval>
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	08 95       	ret

000009aa <memset>:
 9aa:	dc 01       	movw	r26, r24
 9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <memset+0x6>
 9ae:	6d 93       	st	X+, r22
 9b0:	41 50       	subi	r20, 0x01	; 1
 9b2:	50 40       	sbci	r21, 0x00	; 0
 9b4:	e0 f7       	brcc	.-8      	; 0x9ae <memset+0x4>
 9b6:	08 95       	ret

000009b8 <_exit>:
 9b8:	f8 94       	cli

000009ba <__stop_program>:
 9ba:	ff cf       	rjmp	.-2      	; 0x9ba <__stop_program>


ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000664  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  000006fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000151b  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c46  00000000  00000000  00001dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7b  00000000  00000000  00002a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000590  00000000  00000000  00003704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000566  00000000  00000000  00003c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000041fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e6       	ldi	r30, 0x64	; 100
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 31       	cpi	r26, 0x16	; 22
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 99 00 	call	0x132	; 0x132 <main>
  a6:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:

}
*/

void ADC_Init() {
	DDRB = (1 << DDB1);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	87 bb       	out	0x17, r24	; 23
	OCR2 = 128;
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	82 bd       	out	0x22, r24	; 34
	TCCR2 |= (1 << COM21);
  b6:	87 b5       	in	r24, 0x27	; 39
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << WGM21) | (1 << WGM20);
  bc:	87 b5       	in	r24, 0x27	; 39
  be:	88 64       	ori	r24, 0x48	; 72
  c0:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << CS20);
  c2:	87 b5       	in	r24, 0x27	; 39
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	87 bd       	out	0x27, r24	; 39
  c8:	08 95       	ret

000000ca <ADC_Read>:
int ADC_Read (int channel) {
	//Pulse on WR
	

	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x12ea>
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
	int Tconv = (9*4*2)/4912000;
	_delay_ms(Tconv);

	int  value=0;
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <ADC_Read+0x28>
		uint8_t  read = ext_mem[0x1400];
  da:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <__bss_end+0x12ea>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	5c e3       	ldi	r21, 0x3C	; 60
  e0:	5a 95       	dec	r21
  e2:	f1 f7       	brne	.-4      	; 0xe0 <ADC_Read+0x16>
		_delay_ms(0.18);
		if (i == channel){
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	11 f4       	brne	.+4      	; 0xee <ADC_Read+0x24>
			 value = read;
  ea:	64 2f       	mov	r22, r20
  ec:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	24 30       	cpi	r18, 0x04	; 4
  f4:	31 05       	cpc	r19, r1
  f6:	8c f3       	brlt	.-30     	; 0xda <ADC_Read+0x10>
		if (i == channel){
			 value = read;
		}
	}
	return value;
}
  f8:	cb 01       	movw	r24, r22
  fa:	08 95       	ret

000000fc <joystick_calibrate>:
#include "JOYSTICK.h"
#include "ADC.h"

volatile joystick_pos mean_pos;

joystick_pos joystick_calibrate(){
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	
	mean_pos.x = ADC_Read(0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 108:	c6 e0       	ldi	r28, 0x06	; 6
 10a:	d1 e0       	ldi	r29, 0x01	; 1
 10c:	99 83       	std	Y+1, r25	; 0x01
 10e:	88 83       	st	Y, r24
	mean_pos.y = ADC_Read(1);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 118:	9b 83       	std	Y+3, r25	; 0x03
 11a:	8a 83       	std	Y+2, r24	; 0x02
	
	return mean_pos;
 11c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
 120:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x1>
 124:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
 128:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
}
 12c:	df 91       	pop	r29
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <main>:
int main(void)
{
			

	//Drivers init
	UART_Init(MYUBRR);
 132:	8f e1       	ldi	r24, 0x1F	; 31
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 94 01 	call	0x328	; 0x328 <UART_Init>
	SRAM_Init();
 13a:	0e 94 81 01 	call	0x302	; 0x302 <SRAM_Init>
	ADC_Init();
 13e:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	joystick_calibrate();
 142:	0e 94 7e 00 	call	0xfc	; 0xfc <joystick_calibrate>
	OLED_init();
 146:	0e 94 10 01 	call	0x220	; 0x220 <OLED_init>
	
	
	
	//Ports setting 
	DDRE = 0b11111111;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	86 b9       	out	0x06, r24	; 6
    //DDRA = 0b11111111; 
	//DDRD |= 0b11000000;
	//DDRC = DDRC | 0b00001111;
	PORTE = 0b00000010;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	87 b9       	out	0x07, r24	; 7
	//get_joystick_pos();
	
	//_delay_ms(100);
	
    //}
}
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <oled_write_c>:
		OLED_go_to_page();
	}
	
}
	
void OLED_home(){}
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	0e 94 88 01 	call	0x310	; 0x310 <xmem_write>
 160:	08 95       	ret

00000162 <OLED_set_page>:


void OLED_set_page(uint8_t page) {
	uint8_t mask = 0xB0;
	uint8_t command = mask | page;
	current_pos.page = page;
 162:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_pos>
	oled_write_c(command);
 166:	80 6b       	ori	r24, 0xB0	; 176
 168:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
 16c:	08 95       	ret

0000016e <oled_write_d>:
void oled_write_c(uint8_t command) {
	xmem_write(command, 0x0000);
}


void oled_write_d(uint8_t data) {
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
	OLED_set_page(current_pos.page);
 172:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_pos>
 176:	0e 94 b1 00 	call	0x162	; 0x162 <OLED_set_page>
	xmem_write(data, 0x0200);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	72 e0       	ldi	r23, 0x02	; 2
 17e:	8c 2f       	mov	r24, r28
 180:	0e 94 88 01 	call	0x310	; 0x310 <xmem_write>
}
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <OLED_set_column>:
	uint8_t command = mask | page;
	current_pos.page = page;
	oled_write_c(command);
}

void OLED_set_column(uint8_t column) {
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
	current_pos.column = column;
 18c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <current_pos+0x1>
	uint8_t mask_lsb = 0x0F;
	uint8_t command = mask_lsb & column;
	oled_write_c(command);
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	uint8_t mask_msb = 0xF0;
	command = mask_msb & column;
 196:	8c 2f       	mov	r24, r28
 198:	80 7f       	andi	r24, 0xF0	; 240
	for(int i=0;i<4;i++){
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <OLED_set_column+0x1e>
		command = command >> 1;
 1a0:	86 95       	lsr	r24
	uint8_t mask_lsb = 0x0F;
	uint8_t command = mask_lsb & column;
	oled_write_c(command);
	uint8_t mask_msb = 0xF0;
	command = mask_msb & column;
	for(int i=0;i<4;i++){
 1a2:	2f 5f       	subi	r18, 0xFF	; 255
 1a4:	3f 4f       	sbci	r19, 0xFF	; 255
 1a6:	24 30       	cpi	r18, 0x04	; 4
 1a8:	31 05       	cpc	r19, r1
 1aa:	d4 f3       	brlt	.-12     	; 0x1a0 <OLED_set_column+0x18>
		command = command >> 1;
	}
	command = 0x10 | command;
	oled_write_c(command);
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
}
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <OLED_go_to_page>:
}
	
void OLED_home(){}
	
void OLED_go_to_page() {
	uint8_t next_page = current_pos.page + 0x01;
 1b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_pos>
	OLED_set_page(next_page);
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	0e 94 b1 00 	call	0x162	; 0x162 <OLED_set_page>
	OLED_set_column(0x00);	
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 c4 00 	call	0x188	; 0x188 <OLED_set_column>
 1c8:	08 95       	ret

000001ca <OLED_clear_page>:
}
	
void OLED_clear_page(int page){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
	OLED_set_column(0x00);	
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 c4 00 	call	0x188	; 0x188 <OLED_set_column>
	for (int column = 0; column < 128; column++) {
 1d6:	c0 e0       	ldi	r28, 0x00	; 0
 1d8:	d0 e0       	ldi	r29, 0x00	; 0
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <OLED_clear_page+0x1a>
		oled_write_d(0x00);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
	OLED_set_column(0x00);	
}
	
void OLED_clear_page(int page){
	OLED_set_column(0x00);	
	for (int column = 0; column < 128; column++) {
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	c0 38       	cpi	r28, 0x80	; 128
 1e6:	d1 05       	cpc	r29, r1
 1e8:	cc f3       	brlt	.-14     	; 0x1dc <OLED_clear_page+0x12>
		oled_write_d(0x00);
	}
	OLED_set_column(0x00);	
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 c4 00 	call	0x188	; 0x188 <OLED_set_column>
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <OLED_reset>:
	OLED_set_page(current_pos.page);
	xmem_write(data, 0x0200);
}


void OLED_reset() {
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
	OLED_set_page(0x00);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 b1 00 	call	0x162	; 0x162 <OLED_set_page>
	
	for (int page = 0; page < 8; page++) {
 202:	c0 e0       	ldi	r28, 0x00	; 0
 204:	d0 e0       	ldi	r29, 0x00	; 0
 206:	06 c0       	rjmp	.+12     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
		OLED_clear_page(page);
 208:	ce 01       	movw	r24, r28
 20a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <OLED_clear_page>
		OLED_go_to_page();
 20e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <OLED_go_to_page>


void OLED_reset() {
	OLED_set_page(0x00);
	
	for (int page = 0; page < 8; page++) {
 212:	21 96       	adiw	r28, 0x01	; 1
 214:	c8 30       	cpi	r28, 0x08	; 8
 216:	d1 05       	cpc	r29, r1
 218:	bc f3       	brlt	.-18     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		OLED_clear_page(page);
		OLED_go_to_page();
	}
	
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <OLED_init>:
volatile oled_pos current_pos;


void OLED_init()
{
	oled_write_c(0xae); // display off
 220:	8e ea       	ldi	r24, 0xAE	; 174
 222:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xa1); //segment remap
 226:	81 ea       	ldi	r24, 0xA1	; 161
 228:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xda); //common pads hardware: alternative
 22c:	8a ed       	ldi	r24, 0xDA	; 218
 22e:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x12);
 232:	82 e1       	ldi	r24, 0x12	; 18
 234:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xc8); //common output scan direction:com63~com0
 238:	88 ec       	ldi	r24, 0xC8	; 200
 23a:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xa8); //multiplex ration mode:63
 23e:	88 ea       	ldi	r24, 0xA8	; 168
 240:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x3f);
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xd5); //display divide ratio/osc. freq. mode
 24a:	85 ed       	ldi	r24, 0xD5	; 213
 24c:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x80);
 250:	80 e8       	ldi	r24, 0x80	; 128
 252:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x81); //contrast control
 256:	81 e8       	ldi	r24, 0x81	; 129
 258:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x50);
 25c:	80 e5       	ldi	r24, 0x50	; 80
 25e:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xd9); //set pre-charge period
 262:	89 ed       	ldi	r24, 0xD9	; 217
 264:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x21);
 268:	81 e2       	ldi	r24, 0x21	; 33
 26a:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x20); //Set Memory Addressing Mode
 26e:	80 e2       	ldi	r24, 0x20	; 32
 270:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x02);
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xdb); //VCOM deselect level mode
 27a:	8b ed       	ldi	r24, 0xDB	; 219
 27c:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x30);
 280:	80 e3       	ldi	r24, 0x30	; 48
 282:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xad); //master configuration
 286:	8d ea       	ldi	r24, 0xAD	; 173
 288:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0x00);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xa4); //out follows RAM content
 292:	84 ea       	ldi	r24, 0xA4	; 164
 294:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	oled_write_c(0xa6); //set normal display
 298:	86 ea       	ldi	r24, 0xA6	; 166
 29a:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	
	oled_write_c(0xaf); // display on
 29e:	8f ea       	ldi	r24, 0xAF	; 175
 2a0:	0e 94 ac 00 	call	0x158	; 0x158 <oled_write_c>
	
	OLED_reset();
 2a4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <OLED_reset>
	
	OLED_set_page(0x04);
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	0e 94 b1 00 	call	0x162	; 0x162 <OLED_set_page>
	OLED_set_column(0x00);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 c4 00 	call	0x188	; 0x188 <OLED_set_column>
	oled_write_d(0xff);
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
	OLED_go_to_page();
 2bc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <OLED_go_to_page>
	oled_write_d(0xff);
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
	oled_write_d(0xff);
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
	oled_write_d(0xff);
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
	oled_write_d(0xff);
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
	oled_write_d(0xff);
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
	oled_write_d(0xff);
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
	oled_write_d(0xff);
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	0e 94 b7 00 	call	0x16e	; 0x16e <oled_write_d>
 2ea:	2f e7       	ldi	r18, 0x7F	; 127
 2ec:	84 e8       	ldi	r24, 0x84	; 132
 2ee:	9e e1       	ldi	r25, 0x1E	; 30
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <OLED_init+0xd0>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <OLED_init+0xda>
 2fa:	00 00       	nop
	
	
	_delay_ms(10000);
	OLED_reset();
 2fc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <OLED_reset>
 300:	08 95       	ret

00000302 <SRAM_Init>:
#include "SRAM.h"


void SRAM_Init()
{
	MCUCR |= (1 << SRE);
 302:	85 b7       	in	r24, 0x35	; 53
 304:	80 68       	ori	r24, 0x80	; 128
 306:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM0 ) ;
 308:	80 b7       	in	r24, 0x30	; 48
 30a:	88 60       	ori	r24, 0x08	; 8
 30c:	80 bf       	out	0x30, r24	; 48
 30e:	08 95       	ret

00000310 <xmem_write>:
}

void xmem_write ( uint8_t data , uint16_t addr ) {
	volatile char * ext_mem = ( char *) 0x1000 ;
	ext_mem [ addr ]= data;
 310:	fb 01       	movw	r30, r22
 312:	f0 5f       	subi	r31, 0xF0	; 240
 314:	80 83       	st	Z, r24
 316:	08 95       	ret

00000318 <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1 << UDRE0)) );
 318:	5d 9b       	sbis	0x0b, 5	; 11
 31a:	fe cf       	rjmp	.-4      	; 0x318 <UART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 31c:	8c b9       	out	0x0c, r24	; 12
 31e:	08 95       	ret

00000320 <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 320:	5f 9b       	sbis	0x0b, 7	; 11
 322:	fe cf       	rjmp	.-4      	; 0x320 <UART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 324:	8c b1       	in	r24, 0x0c	; 12
 326:	08 95       	ret

00000328 <UART_Init>:
#include "UART.h"

void UART_Init(unsigned int my_ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr >> 8);
 328:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)my_ubrr;
 32a:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 32c:	88 e1       	ldi	r24, 0x18	; 24
 32e:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
 330:	8e e8       	ldi	r24, 0x8E	; 142
 332:	80 bd       	out	0x20, r24	; 32

	fdevopen(UART_Transmit, UART_Receive);
 334:	60 e9       	ldi	r22, 0x90	; 144
 336:	71 e0       	ldi	r23, 0x01	; 1
 338:	8c e8       	ldi	r24, 0x8C	; 140
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 a1 01 	call	0x342	; 0x342 <fdevopen>
 340:	08 95       	ret

00000342 <fdevopen>:
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	31 f4       	brne	.+12     	; 0x35a <fdevopen+0x18>
 34e:	61 15       	cp	r22, r1
 350:	71 05       	cpc	r23, r1
 352:	19 f4       	brne	.+6      	; 0x35a <fdevopen+0x18>
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	3a c0       	rjmp	.+116    	; 0x3ce <fdevopen+0x8c>
 35a:	8b 01       	movw	r16, r22
 35c:	ec 01       	movw	r28, r24
 35e:	6e e0       	ldi	r22, 0x0E	; 14
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <calloc>
 36a:	fc 01       	movw	r30, r24
 36c:	89 2b       	or	r24, r25
 36e:	91 f3       	breq	.-28     	; 0x354 <fdevopen+0x12>
 370:	80 e8       	ldi	r24, 0x80	; 128
 372:	83 83       	std	Z+3, r24	; 0x03
 374:	01 15       	cp	r16, r1
 376:	11 05       	cpc	r17, r1
 378:	71 f0       	breq	.+28     	; 0x396 <fdevopen+0x54>
 37a:	13 87       	std	Z+11, r17	; 0x0b
 37c:	02 87       	std	Z+10, r16	; 0x0a
 37e:	81 e8       	ldi	r24, 0x81	; 129
 380:	83 83       	std	Z+3, r24	; 0x03
 382:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__iob>
 386:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__iob+0x1>
 38a:	89 2b       	or	r24, r25
 38c:	21 f4       	brne	.+8      	; 0x396 <fdevopen+0x54>
 38e:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__iob+0x1>
 392:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__iob>
 396:	20 97       	sbiw	r28, 0x00	; 0
 398:	c9 f0       	breq	.+50     	; 0x3cc <fdevopen+0x8a>
 39a:	d1 87       	std	Z+9, r29	; 0x09
 39c:	c0 87       	std	Z+8, r28	; 0x08
 39e:	83 81       	ldd	r24, Z+3	; 0x03
 3a0:	82 60       	ori	r24, 0x02	; 2
 3a2:	83 83       	std	Z+3, r24	; 0x03
 3a4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__iob+0x2>
 3a8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__iob+0x3>
 3ac:	89 2b       	or	r24, r25
 3ae:	71 f4       	brne	.+28     	; 0x3cc <fdevopen+0x8a>
 3b0:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__iob+0x3>
 3b4:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__iob+0x2>
 3b8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__iob+0x4>
 3bc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__iob+0x5>
 3c0:	89 2b       	or	r24, r25
 3c2:	21 f4       	brne	.+8      	; 0x3cc <fdevopen+0x8a>
 3c4:	f0 93 11 01 	sts	0x0111, r31	; 0x800111 <__iob+0x5>
 3c8:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <__iob+0x4>
 3cc:	cf 01       	movw	r24, r30
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	08 95       	ret

000003d8 <calloc>:
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	86 9f       	mul	r24, r22
 3e2:	80 01       	movw	r16, r0
 3e4:	87 9f       	mul	r24, r23
 3e6:	10 0d       	add	r17, r0
 3e8:	96 9f       	mul	r25, r22
 3ea:	10 0d       	add	r17, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	c8 01       	movw	r24, r16
 3f0:	0e 94 08 02 	call	0x410	; 0x410 <malloc>
 3f4:	ec 01       	movw	r28, r24
 3f6:	00 97       	sbiw	r24, 0x00	; 0
 3f8:	29 f0       	breq	.+10     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3fa:	a8 01       	movw	r20, r16
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 29 03 	call	0x652	; 0x652 <memset>
 404:	ce 01       	movw	r24, r28
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	1f 91       	pop	r17
 40c:	0f 91       	pop	r16
 40e:	08 95       	ret

00000410 <malloc>:
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	91 05       	cpc	r25, r1
 41c:	10 f4       	brcc	.+4      	; 0x422 <malloc+0x12>
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__flp>
 426:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <__flp+0x1>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	a0 e0       	ldi	r26, 0x00	; 0
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	30 97       	sbiw	r30, 0x00	; 0
 434:	19 f1       	breq	.+70     	; 0x47c <malloc+0x6c>
 436:	40 81       	ld	r20, Z
 438:	51 81       	ldd	r21, Z+1	; 0x01
 43a:	02 81       	ldd	r16, Z+2	; 0x02
 43c:	13 81       	ldd	r17, Z+3	; 0x03
 43e:	48 17       	cp	r20, r24
 440:	59 07       	cpc	r21, r25
 442:	c8 f0       	brcs	.+50     	; 0x476 <malloc+0x66>
 444:	84 17       	cp	r24, r20
 446:	95 07       	cpc	r25, r21
 448:	69 f4       	brne	.+26     	; 0x464 <malloc+0x54>
 44a:	10 97       	sbiw	r26, 0x00	; 0
 44c:	31 f0       	breq	.+12     	; 0x45a <malloc+0x4a>
 44e:	12 96       	adiw	r26, 0x02	; 2
 450:	0c 93       	st	X, r16
 452:	12 97       	sbiw	r26, 0x02	; 2
 454:	13 96       	adiw	r26, 0x03	; 3
 456:	1c 93       	st	X, r17
 458:	27 c0       	rjmp	.+78     	; 0x4a8 <malloc+0x98>
 45a:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <__flp>
 45e:	10 93 15 01 	sts	0x0115, r17	; 0x800115 <__flp+0x1>
 462:	22 c0       	rjmp	.+68     	; 0x4a8 <malloc+0x98>
 464:	21 15       	cp	r18, r1
 466:	31 05       	cpc	r19, r1
 468:	19 f0       	breq	.+6      	; 0x470 <malloc+0x60>
 46a:	42 17       	cp	r20, r18
 46c:	53 07       	cpc	r21, r19
 46e:	18 f4       	brcc	.+6      	; 0x476 <malloc+0x66>
 470:	9a 01       	movw	r18, r20
 472:	bd 01       	movw	r22, r26
 474:	ef 01       	movw	r28, r30
 476:	df 01       	movw	r26, r30
 478:	f8 01       	movw	r30, r16
 47a:	db cf       	rjmp	.-74     	; 0x432 <malloc+0x22>
 47c:	21 15       	cp	r18, r1
 47e:	31 05       	cpc	r19, r1
 480:	f9 f0       	breq	.+62     	; 0x4c0 <malloc+0xb0>
 482:	28 1b       	sub	r18, r24
 484:	39 0b       	sbc	r19, r25
 486:	24 30       	cpi	r18, 0x04	; 4
 488:	31 05       	cpc	r19, r1
 48a:	80 f4       	brcc	.+32     	; 0x4ac <malloc+0x9c>
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	9b 81       	ldd	r25, Y+3	; 0x03
 490:	61 15       	cp	r22, r1
 492:	71 05       	cpc	r23, r1
 494:	21 f0       	breq	.+8      	; 0x49e <malloc+0x8e>
 496:	fb 01       	movw	r30, r22
 498:	93 83       	std	Z+3, r25	; 0x03
 49a:	82 83       	std	Z+2, r24	; 0x02
 49c:	04 c0       	rjmp	.+8      	; 0x4a6 <malloc+0x96>
 49e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__flp+0x1>
 4a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__flp>
 4a6:	fe 01       	movw	r30, r28
 4a8:	32 96       	adiw	r30, 0x02	; 2
 4aa:	44 c0       	rjmp	.+136    	; 0x534 <__stack+0x35>
 4ac:	fe 01       	movw	r30, r28
 4ae:	e2 0f       	add	r30, r18
 4b0:	f3 1f       	adc	r31, r19
 4b2:	81 93       	st	Z+, r24
 4b4:	91 93       	st	Z+, r25
 4b6:	22 50       	subi	r18, 0x02	; 2
 4b8:	31 09       	sbc	r19, r1
 4ba:	39 83       	std	Y+1, r19	; 0x01
 4bc:	28 83       	st	Y, r18
 4be:	3a c0       	rjmp	.+116    	; 0x534 <__stack+0x35>
 4c0:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 4c4:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 4c8:	23 2b       	or	r18, r19
 4ca:	41 f4       	brne	.+16     	; 0x4dc <malloc+0xcc>
 4cc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 4d0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 4d4:	30 93 13 01 	sts	0x0113, r19	; 0x800113 <__brkval+0x1>
 4d8:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <__brkval>
 4dc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 4e0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 4e4:	21 15       	cp	r18, r1
 4e6:	31 05       	cpc	r19, r1
 4e8:	41 f4       	brne	.+16     	; 0x4fa <malloc+0xea>
 4ea:	2d b7       	in	r18, 0x3d	; 61
 4ec:	3e b7       	in	r19, 0x3e	; 62
 4ee:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 4f2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 4f6:	24 1b       	sub	r18, r20
 4f8:	35 0b       	sbc	r19, r21
 4fa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__brkval>
 4fe:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__brkval+0x1>
 502:	e2 17       	cp	r30, r18
 504:	f3 07       	cpc	r31, r19
 506:	a0 f4       	brcc	.+40     	; 0x530 <__stack+0x31>
 508:	2e 1b       	sub	r18, r30
 50a:	3f 0b       	sbc	r19, r31
 50c:	28 17       	cp	r18, r24
 50e:	39 07       	cpc	r19, r25
 510:	78 f0       	brcs	.+30     	; 0x530 <__stack+0x31>
 512:	ac 01       	movw	r20, r24
 514:	4e 5f       	subi	r20, 0xFE	; 254
 516:	5f 4f       	sbci	r21, 0xFF	; 255
 518:	24 17       	cp	r18, r20
 51a:	35 07       	cpc	r19, r21
 51c:	48 f0       	brcs	.+18     	; 0x530 <__stack+0x31>
 51e:	4e 0f       	add	r20, r30
 520:	5f 1f       	adc	r21, r31
 522:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <__brkval+0x1>
 526:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <__brkval>
 52a:	81 93       	st	Z+, r24
 52c:	91 93       	st	Z+, r25
 52e:	02 c0       	rjmp	.+4      	; 0x534 <__stack+0x35>
 530:	e0 e0       	ldi	r30, 0x00	; 0
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	cf 01       	movw	r24, r30
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	08 95       	ret

00000540 <free>:
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	09 f4       	brne	.+2      	; 0x54a <free+0xa>
 548:	81 c0       	rjmp	.+258    	; 0x64c <free+0x10c>
 54a:	fc 01       	movw	r30, r24
 54c:	32 97       	sbiw	r30, 0x02	; 2
 54e:	13 82       	std	Z+3, r1	; 0x03
 550:	12 82       	std	Z+2, r1	; 0x02
 552:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <__flp>
 556:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <__flp+0x1>
 55a:	10 97       	sbiw	r26, 0x00	; 0
 55c:	81 f4       	brne	.+32     	; 0x57e <free+0x3e>
 55e:	20 81       	ld	r18, Z
 560:	31 81       	ldd	r19, Z+1	; 0x01
 562:	82 0f       	add	r24, r18
 564:	93 1f       	adc	r25, r19
 566:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 56a:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 56e:	28 17       	cp	r18, r24
 570:	39 07       	cpc	r19, r25
 572:	51 f5       	brne	.+84     	; 0x5c8 <free+0x88>
 574:	f0 93 13 01 	sts	0x0113, r31	; 0x800113 <__brkval+0x1>
 578:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <__brkval>
 57c:	67 c0       	rjmp	.+206    	; 0x64c <free+0x10c>
 57e:	ed 01       	movw	r28, r26
 580:	20 e0       	ldi	r18, 0x00	; 0
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	ce 17       	cp	r28, r30
 586:	df 07       	cpc	r29, r31
 588:	40 f4       	brcc	.+16     	; 0x59a <free+0x5a>
 58a:	4a 81       	ldd	r20, Y+2	; 0x02
 58c:	5b 81       	ldd	r21, Y+3	; 0x03
 58e:	9e 01       	movw	r18, r28
 590:	41 15       	cp	r20, r1
 592:	51 05       	cpc	r21, r1
 594:	f1 f0       	breq	.+60     	; 0x5d2 <free+0x92>
 596:	ea 01       	movw	r28, r20
 598:	f5 cf       	rjmp	.-22     	; 0x584 <free+0x44>
 59a:	d3 83       	std	Z+3, r29	; 0x03
 59c:	c2 83       	std	Z+2, r28	; 0x02
 59e:	40 81       	ld	r20, Z
 5a0:	51 81       	ldd	r21, Z+1	; 0x01
 5a2:	84 0f       	add	r24, r20
 5a4:	95 1f       	adc	r25, r21
 5a6:	c8 17       	cp	r28, r24
 5a8:	d9 07       	cpc	r29, r25
 5aa:	59 f4       	brne	.+22     	; 0x5c2 <free+0x82>
 5ac:	88 81       	ld	r24, Y
 5ae:	99 81       	ldd	r25, Y+1	; 0x01
 5b0:	84 0f       	add	r24, r20
 5b2:	95 1f       	adc	r25, r21
 5b4:	02 96       	adiw	r24, 0x02	; 2
 5b6:	91 83       	std	Z+1, r25	; 0x01
 5b8:	80 83       	st	Z, r24
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	9b 81       	ldd	r25, Y+3	; 0x03
 5be:	93 83       	std	Z+3, r25	; 0x03
 5c0:	82 83       	std	Z+2, r24	; 0x02
 5c2:	21 15       	cp	r18, r1
 5c4:	31 05       	cpc	r19, r1
 5c6:	29 f4       	brne	.+10     	; 0x5d2 <free+0x92>
 5c8:	f0 93 15 01 	sts	0x0115, r31	; 0x800115 <__flp+0x1>
 5cc:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <__flp>
 5d0:	3d c0       	rjmp	.+122    	; 0x64c <free+0x10c>
 5d2:	e9 01       	movw	r28, r18
 5d4:	fb 83       	std	Y+3, r31	; 0x03
 5d6:	ea 83       	std	Y+2, r30	; 0x02
 5d8:	49 91       	ld	r20, Y+
 5da:	59 91       	ld	r21, Y+
 5dc:	c4 0f       	add	r28, r20
 5de:	d5 1f       	adc	r29, r21
 5e0:	ec 17       	cp	r30, r28
 5e2:	fd 07       	cpc	r31, r29
 5e4:	61 f4       	brne	.+24     	; 0x5fe <free+0xbe>
 5e6:	80 81       	ld	r24, Z
 5e8:	91 81       	ldd	r25, Z+1	; 0x01
 5ea:	84 0f       	add	r24, r20
 5ec:	95 1f       	adc	r25, r21
 5ee:	02 96       	adiw	r24, 0x02	; 2
 5f0:	e9 01       	movw	r28, r18
 5f2:	99 83       	std	Y+1, r25	; 0x01
 5f4:	88 83       	st	Y, r24
 5f6:	82 81       	ldd	r24, Z+2	; 0x02
 5f8:	93 81       	ldd	r25, Z+3	; 0x03
 5fa:	9b 83       	std	Y+3, r25	; 0x03
 5fc:	8a 83       	std	Y+2, r24	; 0x02
 5fe:	e0 e0       	ldi	r30, 0x00	; 0
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	12 96       	adiw	r26, 0x02	; 2
 604:	8d 91       	ld	r24, X+
 606:	9c 91       	ld	r25, X
 608:	13 97       	sbiw	r26, 0x03	; 3
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	19 f0       	breq	.+6      	; 0x614 <free+0xd4>
 60e:	fd 01       	movw	r30, r26
 610:	dc 01       	movw	r26, r24
 612:	f7 cf       	rjmp	.-18     	; 0x602 <free+0xc2>
 614:	8d 91       	ld	r24, X+
 616:	9c 91       	ld	r25, X
 618:	11 97       	sbiw	r26, 0x01	; 1
 61a:	9d 01       	movw	r18, r26
 61c:	2e 5f       	subi	r18, 0xFE	; 254
 61e:	3f 4f       	sbci	r19, 0xFF	; 255
 620:	82 0f       	add	r24, r18
 622:	93 1f       	adc	r25, r19
 624:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__brkval>
 628:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__brkval+0x1>
 62c:	28 17       	cp	r18, r24
 62e:	39 07       	cpc	r19, r25
 630:	69 f4       	brne	.+26     	; 0x64c <free+0x10c>
 632:	30 97       	sbiw	r30, 0x00	; 0
 634:	29 f4       	brne	.+10     	; 0x640 <free+0x100>
 636:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__flp+0x1>
 63a:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__flp>
 63e:	02 c0       	rjmp	.+4      	; 0x644 <free+0x104>
 640:	13 82       	std	Z+3, r1	; 0x03
 642:	12 82       	std	Z+2, r1	; 0x02
 644:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__brkval+0x1>
 648:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__brkval>
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <memset>:
 652:	dc 01       	movw	r26, r24
 654:	01 c0       	rjmp	.+2      	; 0x658 <memset+0x6>
 656:	6d 93       	st	X+, r22
 658:	41 50       	subi	r20, 0x01	; 1
 65a:	50 40       	sbci	r21, 0x00	; 0
 65c:	e0 f7       	brcc	.-8      	; 0x656 <memset+0x4>
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>


ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000116  00800100  00000e26  00000eba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800216  00800216  00000fd0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000203c  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001043  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109e  00000000  00000000  0000430f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  000053b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c5  00000000  00000000  0000582c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbf  00000000  00000000  00005ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00006bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e2       	ldi	r30, 0x26	; 38
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 31       	cpi	r26, 0x16	; 22
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	a6 e1       	ldi	r26, 0x16	; 22
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 32       	cpi	r26, 0x26	; 38
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  a6:	0c 94 11 07 	jmp	0xe22	; 0xe22 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:

}
*/

void ADC_Init() {
	DDRB = (1 << DDB1);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	87 bb       	out	0x17, r24	; 23
	OCR2 = 128;
  b2:	80 e8       	ldi	r24, 0x80	; 128
  b4:	82 bd       	out	0x22, r24	; 34
	TCCR2 |= (1 << COM21);
  b6:	87 b5       	in	r24, 0x27	; 39
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << WGM21) | (1 << WGM20);
  bc:	87 b5       	in	r24, 0x27	; 39
  be:	88 64       	ori	r24, 0x48	; 72
  c0:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << CS20);
  c2:	87 b5       	in	r24, 0x27	; 39
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	87 bd       	out	0x27, r24	; 39
  c8:	08 95       	ret

000000ca <ADC_Read>:
int ADC_Read (int channel) {
	//Pulse on WR
	

	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x11da>
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
	int Tconv = (9*4*2)/4912000;
	_delay_ms(Tconv);

	int  value=0;
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  d8:	0c c0       	rjmp	.+24     	; 0xf2 <ADC_Read+0x28>
		uint8_t  read = ext_mem[0x1400];
  da:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <__bss_end+0x11da>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	5c e3       	ldi	r21, 0x3C	; 60
  e0:	5a 95       	dec	r21
  e2:	f1 f7       	brne	.-4      	; 0xe0 <ADC_Read+0x16>
		_delay_ms(0.18);
		if (i == channel){
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	11 f4       	brne	.+4      	; 0xee <ADC_Read+0x24>
			 value = read;
  ea:	64 2f       	mov	r22, r20
  ec:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	24 30       	cpi	r18, 0x04	; 4
  f4:	31 05       	cpc	r19, r1
  f6:	8c f3       	brlt	.-30     	; 0xda <ADC_Read+0x10>
		if (i == channel){
			 value = read;
		}
	}
	return value;
}
  f8:	cb 01       	movw	r24, r22
  fa:	08 95       	ret

000000fc <can_init>:
#include "mcp2515.h"
#include "SPI.h"


void can_init() {
	mcp_init();
  fc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <mcp_init>
	
	mcp_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK);
 100:	40 e4       	ldi	r20, 0x40	; 64
 102:	60 ee       	ldi	r22, 0xE0	; 224
 104:	8f e0       	ldi	r24, 0x0F	; 15
 106:	0e 94 04 02 	call	0x408	; 0x408 <mcp_bit_modify>
 10a:	08 95       	ret

0000010c <can_send>:
}

	
void can_send(can_message* message) {  //TODO : Synchro clock noeud
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	8c 01       	movw	r16, r24
	mcp_write(MCP_TXB0SIDH, message->id >> 3);
 116:	fc 01       	movw	r30, r24
 118:	60 81       	ld	r22, Z
 11a:	71 81       	ldd	r23, Z+1	; 0x01
 11c:	75 95       	asr	r23
 11e:	67 95       	ror	r22
 120:	75 95       	asr	r23
 122:	67 95       	ror	r22
 124:	75 95       	asr	r23
 126:	67 95       	ror	r22
 128:	81 e3       	ldi	r24, 0x31	; 49
 12a:	0e 94 a2 01 	call	0x344	; 0x344 <mcp_write>
	mcp_write(MCP_TXB0SIDL, message->id << 5);
 12e:	f8 01       	movw	r30, r16
 130:	60 81       	ld	r22, Z
 132:	62 95       	swap	r22
 134:	66 0f       	add	r22, r22
 136:	60 7e       	andi	r22, 0xE0	; 224
 138:	82 e3       	ldi	r24, 0x32	; 50
 13a:	0e 94 a2 01 	call	0x344	; 0x344 <mcp_write>
	mcp_write(MCP_TXB0DLC, message->length);
 13e:	f8 01       	movw	r30, r16
 140:	62 81       	ldd	r22, Z+2	; 0x02
 142:	85 e3       	ldi	r24, 0x35	; 53
 144:	0e 94 a2 01 	call	0x344	; 0x344 <mcp_write>
	
	for(int i = 0; i < message->length; i++) {
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	09 c0       	rjmp	.+18     	; 0x160 <can_send+0x54>
		mcp_write(MCP_TXB0D0 + i, message->data[i]);
 14e:	f8 01       	movw	r30, r16
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	64 81       	ldd	r22, Z+4	; 0x04
 156:	8c 2f       	mov	r24, r28
 158:	8a 5c       	subi	r24, 0xCA	; 202
 15a:	0e 94 a2 01 	call	0x344	; 0x344 <mcp_write>
void can_send(can_message* message) {  //TODO : Synchro clock noeud
	mcp_write(MCP_TXB0SIDH, message->id >> 3);
	mcp_write(MCP_TXB0SIDL, message->id << 5);
	mcp_write(MCP_TXB0DLC, message->length);
	
	for(int i = 0; i < message->length; i++) {
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	f8 01       	movw	r30, r16
 162:	82 81       	ldd	r24, Z+2	; 0x02
 164:	93 81       	ldd	r25, Z+3	; 0x03
 166:	c8 17       	cp	r28, r24
 168:	d9 07       	cpc	r29, r25
 16a:	8c f3       	brlt	.-30     	; 0x14e <can_send+0x42>
		mcp_write(MCP_TXB0D0 + i, message->data[i]);
	}
	
	mcp_request_send(0);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 b8 01 	call	0x370	; 0x370 <mcp_request_send>
	
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	08 95       	ret

0000017e <can_receive>:
	
can_message can_receive() {
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	7c 01       	movw	r14, r24
	can_message message;
	
	message.length = mcp_read(MCP_RXB0DLC);
 18c:	85 e6       	ldi	r24, 0x65	; 101
 18e:	0e 94 90 01 	call	0x320	; 0x320 <mcp_read>
 192:	08 2f       	mov	r16, r24
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	f7 01       	movw	r30, r14
 198:	13 83       	std	Z+3, r17	; 0x03
 19a:	02 83       	std	Z+2, r16	; 0x02
	message.id = (mcp_read(MCP_RXB0SIDH)  << 3) | (mcp_read(MCP_RXB0SIDL) >> 5);
 19c:	81 e6       	ldi	r24, 0x61	; 97
 19e:	0e 94 90 01 	call	0x320	; 0x320 <mcp_read>
 1a2:	c8 2f       	mov	r28, r24
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
 1a6:	cc 0f       	add	r28, r28
 1a8:	dd 1f       	adc	r29, r29
 1aa:	cc 0f       	add	r28, r28
 1ac:	dd 1f       	adc	r29, r29
 1ae:	cc 0f       	add	r28, r28
 1b0:	dd 1f       	adc	r29, r29
 1b2:	82 e6       	ldi	r24, 0x62	; 98
 1b4:	0e 94 90 01 	call	0x320	; 0x320 <mcp_read>
 1b8:	82 95       	swap	r24
 1ba:	86 95       	lsr	r24
 1bc:	87 70       	andi	r24, 0x07	; 7
 1be:	c8 2b       	or	r28, r24
 1c0:	f7 01       	movw	r30, r14
 1c2:	d1 83       	std	Z+1, r29	; 0x01
 1c4:	c0 83       	st	Z, r28
	
	
	for(int i = 0; i < message.length; i++) {
 1c6:	c0 e0       	ldi	r28, 0x00	; 0
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
 1ca:	09 c0       	rjmp	.+18     	; 0x1de <can_receive+0x60>
		message.data[i] = mcp_read(MCP_RXB0D0 + i);
 1cc:	8c 2f       	mov	r24, r28
 1ce:	8a 59       	subi	r24, 0x9A	; 154
 1d0:	0e 94 90 01 	call	0x320	; 0x320 <mcp_read>
 1d4:	f7 01       	movw	r30, r14
 1d6:	ec 0f       	add	r30, r28
 1d8:	fd 1f       	adc	r31, r29
 1da:	84 83       	std	Z+4, r24	; 0x04
	
	message.length = mcp_read(MCP_RXB0DLC);
	message.id = (mcp_read(MCP_RXB0SIDH)  << 3) | (mcp_read(MCP_RXB0SIDL) >> 5);
	
	
	for(int i = 0; i < message.length; i++) {
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	c0 17       	cp	r28, r16
 1e0:	d1 07       	cpc	r29, r17
 1e2:	a4 f3       	brlt	.-24     	; 0x1cc <can_receive+0x4e>
		message.data[i] = mcp_read(MCP_RXB0D0 + i);
	}
	mcp_reset();
 1e4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mcp_reset>
	return message;
 1e8:	c7 01       	movw	r24, r14
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <joystick_calibrate>:
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 204:	c6 e1       	ldi	r28, 0x16	; 22
 206:	d2 e0       	ldi	r29, 0x02	; 2
 208:	99 83       	std	Y+1, r25	; 0x01
 20a:	88 83       	st	Y, r24
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
 214:	9b 83       	std	Y+3, r25	; 0x03
 216:	8a 83       	std	Y+2, r24	; 0x02
 218:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <__data_end>
 21c:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <__data_end+0x1>
 220:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <__data_end+0x2>
 224:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <__data_end+0x3>
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <main>:
#define FOSC 4915200// Clock Speed
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

int main(void)
{
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	68 97       	sbiw	r28, 0x18	; 24
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
			

	//Drivers init
	UART_Init(MYUBRR);
 246:	8f e1       	ldi	r24, 0x1F	; 31
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 97 02 	call	0x52e	; 0x52e <UART_Init>
	SRAM_Init();
 24e:	0e 94 84 02 	call	0x508	; 0x508 <SRAM_Init>
	ADC_Init();
 252:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	joystick_calibrate();
 256:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <joystick_calibrate>
	OLED_init();
 25a:	0e 94 25 02 	call	0x44a	; 0x44a <OLED_init>
	can_init();
 25e:	0e 94 7e 00 	call	0xfc	; 0xfc <can_init>
	//OLED_test();
	//OLED_home();
	//OLED_score();
	//OLED_scenario();
	////Ports setting 
	DDRE = 0b11111111;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	86 b9       	out	0x06, r24	; 6
    //DDRA = 0b11111111; 
	//DDRD |= 0b11000000;
	//DDRC = DDRC | 0b00001111;
	PORTE = 0b00000010;
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	87 b9       	out	0x07, r24	; 7
	//SRAM_test();
	//SRAM_mapping_test();
  
  
	can_message to_send;
	to_send.id = 43;
 26a:	8b e2       	ldi	r24, 0x2B	; 43
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9a 83       	std	Y+2, r25	; 0x02
 270:	89 83       	std	Y+1, r24	; 0x01
	to_send.length = 8;
 272:	88 e0       	ldi	r24, 0x08	; 8
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	9c 83       	std	Y+4, r25	; 0x04
 278:	8b 83       	std	Y+3, r24	; 0x03
	to_send.data[0] = 'B';
 27a:	82 e4       	ldi	r24, 0x42	; 66
 27c:	8d 83       	std	Y+5, r24	; 0x05
	to_send.data[1] = 'I';
 27e:	89 e4       	ldi	r24, 0x49	; 73
 280:	8e 83       	std	Y+6, r24	; 0x06
	to_send.data[2] = 'E';
 282:	85 e4       	ldi	r24, 0x45	; 69
 284:	8f 83       	std	Y+7, r24	; 0x07
	to_send.data[3] = 'R';
 286:	92 e5       	ldi	r25, 0x52	; 82
 288:	98 87       	std	Y+8, r25	; 0x08
	to_send.data[4] = 'E';
 28a:	89 87       	std	Y+9, r24	; 0x09
	to_send.data[5] = ' ';
 28c:	80 e2       	ldi	r24, 0x20	; 32
 28e:	8a 87       	std	Y+10, r24	; 0x0a
	to_send.data[6] = '!';
 290:	81 e2       	ldi	r24, 0x21	; 33
 292:	8b 87       	std	Y+11, r24	; 0x0b
 	
	 
	 printf("TRANSMIT => length :  %d \n\rid : %d \n\rdata : %s \n\r", to_send.length, to_send.id, to_send.data);
 294:	ce 01       	movw	r24, r28
 296:	05 96       	adiw	r24, 0x05	; 5
 298:	9f 93       	push	r25
 29a:	8f 93       	push	r24
 29c:	1f 92       	push	r1
 29e:	8b e2       	ldi	r24, 0x2B	; 43
 2a0:	8f 93       	push	r24
 2a2:	1f 92       	push	r1
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	8f 93       	push	r24
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	9f 93       	push	r25
 2ae:	8f 93       	push	r24
 2b0:	0e 94 ef 02 	call	0x5de	; 0x5de <printf>
	 can_send(&to_send);
 2b4:	ce 01       	movw	r24, r28
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	0e 94 86 00 	call	0x10c	; 0x10c <can_send>
	 printf("----------------------------------------------------------------------------------------------------------------------\n\r");
 2bc:	08 e3       	ldi	r16, 0x38	; 56
 2be:	11 e0       	ldi	r17, 0x01	; 1
 2c0:	1f 93       	push	r17
 2c2:	0f 93       	push	r16
 2c4:	0e 94 ef 02 	call	0x5de	; 0x5de <printf>
	 can_message receive = can_receive();
 2c8:	ce 01       	movw	r24, r28
 2ca:	0d 96       	adiw	r24, 0x0d	; 13
 2cc:	0e 94 bf 00 	call	0x17e	; 0x17e <can_receive>
	 printf("RECEIVE => length:  %d \n\rid: %d \n\rdata: %s \n\r", receive.length, receive.id, receive.data);
 2d0:	ce 01       	movw	r24, r28
 2d2:	41 96       	adiw	r24, 0x11	; 17
 2d4:	9f 93       	push	r25
 2d6:	8f 93       	push	r24
 2d8:	8e 85       	ldd	r24, Y+14	; 0x0e
 2da:	8f 93       	push	r24
 2dc:	8d 85       	ldd	r24, Y+13	; 0x0d
 2de:	8f 93       	push	r24
 2e0:	88 89       	ldd	r24, Y+16	; 0x10
 2e2:	8f 93       	push	r24
 2e4:	8f 85       	ldd	r24, Y+15	; 0x0f
 2e6:	8f 93       	push	r24
 2e8:	81 eb       	ldi	r24, 0xB1	; 177
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	9f 93       	push	r25
 2ee:	8f 93       	push	r24
 2f0:	0e 94 ef 02 	call	0x5de	; 0x5de <printf>
 
	 printf("----------------------------------------------------------------------------------------------------------------------\n\r");
 2f4:	1f 93       	push	r17
 2f6:	0f 93       	push	r16
 2f8:	0e 94 ef 02 	call	0x5de	; 0x5de <printf>
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
		
		
		
		_delay_ms(1000);
    }*/
}
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	68 96       	adiw	r28, 0x18	; 24
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	08 95       	ret

00000320 <mcp_read>:
		PORTB &= ~(1 << PINB4);
		
		SPI_MasterTransmit(MCP_READ_STATUS);
		result = SPI_MaserRead();
		
		PORTB |= (1 << PINB4);
 320:	cf 93       	push	r28
 322:	c8 2f       	mov	r28, r24
 324:	88 b3       	in	r24, 0x18	; 24
 326:	8f 7e       	andi	r24, 0xEF	; 239
 328:	88 bb       	out	0x18, r24	; 24
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 330:	8c 2f       	mov	r24, r28
 332:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 336:	0e 94 7d 02 	call	0x4fa	; 0x4fa <SPI_MaserRead>
 33a:	98 b3       	in	r25, 0x18	; 24
 33c:	90 61       	ori	r25, 0x10	; 16
 33e:	98 bb       	out	0x18, r25	; 24
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <mcp_write>:
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	d8 2f       	mov	r29, r24
 34a:	c6 2f       	mov	r28, r22
 34c:	88 b3       	in	r24, 0x18	; 24
 34e:	8f 7e       	andi	r24, 0xEF	; 239
 350:	88 bb       	out	0x18, r24	; 24
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 358:	8d 2f       	mov	r24, r29
 35a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 35e:	8c 2f       	mov	r24, r28
 360:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 364:	88 b3       	in	r24, 0x18	; 24
 366:	80 61       	ori	r24, 0x10	; 16
 368:	88 bb       	out	0x18, r24	; 24
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <mcp_request_send>:
 370:	9c 01       	movw	r18, r24
 372:	98 b3       	in	r25, 0x18	; 24
 374:	9f 7e       	andi	r25, 0xEF	; 239
 376:	98 bb       	out	0x18, r25	; 24
 378:	21 30       	cpi	r18, 0x01	; 1
 37a:	31 05       	cpc	r19, r1
 37c:	79 f0       	breq	.+30     	; 0x39c <mcp_request_send+0x2c>
 37e:	1c f4       	brge	.+6      	; 0x386 <mcp_request_send+0x16>
 380:	23 2b       	or	r18, r19
 382:	41 f0       	breq	.+16     	; 0x394 <mcp_request_send+0x24>
 384:	17 c0       	rjmp	.+46     	; 0x3b4 <mcp_request_send+0x44>
 386:	22 30       	cpi	r18, 0x02	; 2
 388:	31 05       	cpc	r19, r1
 38a:	61 f0       	breq	.+24     	; 0x3a4 <mcp_request_send+0x34>
 38c:	23 30       	cpi	r18, 0x03	; 3
 38e:	31 05       	cpc	r19, r1
 390:	69 f0       	breq	.+26     	; 0x3ac <mcp_request_send+0x3c>
 392:	10 c0       	rjmp	.+32     	; 0x3b4 <mcp_request_send+0x44>
 394:	81 e8       	ldi	r24, 0x81	; 129
 396:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 39a:	0f c0       	rjmp	.+30     	; 0x3ba <mcp_request_send+0x4a>
 39c:	82 e8       	ldi	r24, 0x82	; 130
 39e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 3a2:	0b c0       	rjmp	.+22     	; 0x3ba <mcp_request_send+0x4a>
 3a4:	84 e8       	ldi	r24, 0x84	; 132
 3a6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 3aa:	07 c0       	rjmp	.+14     	; 0x3ba <mcp_request_send+0x4a>
 3ac:	87 e8       	ldi	r24, 0x87	; 135
 3ae:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <mcp_request_send+0x4a>
 3b4:	80 e8       	ldi	r24, 0x80	; 128
 3b6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 3ba:	81 e8       	ldi	r24, 0x81	; 129
 3bc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 3c0:	88 b3       	in	r24, 0x18	; 24
 3c2:	80 61       	ori	r24, 0x10	; 16
 3c4:	88 bb       	out	0x18, r24	; 24
 3c6:	08 95       	ret

000003c8 <mcp_reset>:
 3c8:	88 b3       	in	r24, 0x18	; 24
 3ca:	8f 7e       	andi	r24, 0xEF	; 239
 3cc:	88 bb       	out	0x18, r24	; 24
 3ce:	80 ec       	ldi	r24, 0xC0	; 192
 3d0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
 3d4:	88 b3       	in	r24, 0x18	; 24
 3d6:	80 61       	ori	r24, 0x10	; 16
 3d8:	88 bb       	out	0x18, r24	; 24
 3da:	08 95       	ret

000003dc <mcp_init>:
 3dc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <SPI_MasterInit>
 3e0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <mcp_reset>
 3e4:	8e e0       	ldi	r24, 0x0E	; 14
 3e6:	0e 94 90 01 	call	0x320	; 0x320 <mcp_read>
 3ea:	80 7e       	andi	r24, 0xE0	; 224
 3ec:	80 38       	cpi	r24, 0x80	; 128
 3ee:	51 f0       	breq	.+20     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3f0:	8f ed       	ldi	r24, 0xDF	; 223
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	9f 93       	push	r25
 3f6:	8f 93       	push	r24
 3f8:	0e 94 ef 02 	call	0x5de	; 0x5de <printf>
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret

00000408 <mcp_bit_modify>:
		return result ;
	};
	
void mcp_bit_modify(uint8_t address_register, uint8_t mask, uint8_t data) {  // NOT FOR ALL REGISTERS. SEE REGISTER MAP.
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	18 2f       	mov	r17, r24
 410:	d6 2f       	mov	r29, r22
 412:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PINB4);
 414:	88 b3       	in	r24, 0x18	; 24
 416:	8f 7e       	andi	r24, 0xEF	; 239
 418:	88 bb       	out	0x18, r24	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
	SPI_MasterTransmit(address_register);
 420:	81 2f       	mov	r24, r17
 422:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
 426:	8d 2f       	mov	r24, r29
 428:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 42c:	8c 2f       	mov	r24, r28
 42e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
	
	PORTB |= (1 << PINB4);
 432:	88 b3       	in	r24, 0x18	; 24
 434:	80 61       	ori	r24, 0x10	; 16
 436:	88 bb       	out	0x18, r24	; 24
};
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	08 95       	ret

00000440 <oled_write_c>:
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	0e 94 8b 02 	call	0x516	; 0x516 <xmem_write>
 448:	08 95       	ret

0000044a <OLED_init>:
 44a:	ea e1       	ldi	r30, 0x1A	; 26
 44c:	f2 e0       	ldi	r31, 0x02	; 2
 44e:	10 82       	st	Z, r1
 450:	11 82       	std	Z+1, r1	; 0x01
 452:	8e ea       	ldi	r24, 0xAE	; 174
 454:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 458:	81 ea       	ldi	r24, 0xA1	; 161
 45a:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 45e:	8a ed       	ldi	r24, 0xDA	; 218
 460:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 464:	82 e1       	ldi	r24, 0x12	; 18
 466:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 46a:	88 ec       	ldi	r24, 0xC8	; 200
 46c:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 470:	88 ea       	ldi	r24, 0xA8	; 168
 472:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 476:	8f e3       	ldi	r24, 0x3F	; 63
 478:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 47c:	85 ed       	ldi	r24, 0xD5	; 213
 47e:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 482:	80 e8       	ldi	r24, 0x80	; 128
 484:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 488:	81 e8       	ldi	r24, 0x81	; 129
 48a:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 48e:	80 e5       	ldi	r24, 0x50	; 80
 490:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 494:	89 ed       	ldi	r24, 0xD9	; 217
 496:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 49a:	81 e2       	ldi	r24, 0x21	; 33
 49c:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4a0:	80 e2       	ldi	r24, 0x20	; 32
 4a2:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4ac:	8b ed       	ldi	r24, 0xDB	; 219
 4ae:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4b2:	80 e3       	ldi	r24, 0x30	; 48
 4b4:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4b8:	8d ea       	ldi	r24, 0xAD	; 173
 4ba:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4c4:	84 ea       	ldi	r24, 0xA4	; 164
 4c6:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4ca:	86 ea       	ldi	r24, 0xA6	; 166
 4cc:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4d0:	8f ea       	ldi	r24, 0xAF	; 175
 4d2:	0e 94 20 02 	call	0x440	; 0x440 <oled_write_c>
 4d6:	08 95       	ret

000004d8 <SPI_MasterInit>:
#include <avr/io.h>

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1 << DDB5) | (1 << DDB7) | (1 << DDB4);
 4d8:	87 b3       	in	r24, 0x17	; 23
 4da:	80 6b       	ori	r24, 0xB0	; 176
 4dc:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);
 4de:	8d b1       	in	r24, 0x0d	; 13
 4e0:	81 65       	ori	r24, 0x51	; 81
 4e2:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << CPOL);
 4e4:	8d b1       	in	r24, 0x0d	; 13
 4e6:	87 7f       	andi	r24, 0xF7	; 247
 4e8:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << CPHA);
 4ea:	8d b1       	in	r24, 0x0d	; 13
 4ec:	8b 7f       	andi	r24, 0xFB	; 251
 4ee:	8d b9       	out	0x0d, r24	; 13
 4f0:	08 95       	ret

000004f2 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
 4f2:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
 4f4:	77 9b       	sbis	0x0e, 7	; 14
 4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <SPI_MasterTransmit+0x2>
	;
}
 4f8:	08 95       	ret

000004fa <SPI_MaserRead>:

char SPI_MaserRead() {
	
	SPI_MasterTransmit(0);
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <SPI_MasterTransmit>
	
	while(!(SPSR & (1<<SPIF)))
 500:	77 9b       	sbis	0x0e, 7	; 14
 502:	fe cf       	rjmp	.-4      	; 0x500 <__stack+0x1>
	;
	
	return SPDR;
 504:	8f b1       	in	r24, 0x0f	; 15
	
}
 506:	08 95       	ret

00000508 <SRAM_Init>:
#include "SRAM.h"


void SRAM_Init()
{
	MCUCR |= (1 << SRE);
 508:	85 b7       	in	r24, 0x35	; 53
 50a:	80 68       	ori	r24, 0x80	; 128
 50c:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM0 );
 50e:	80 b7       	in	r24, 0x30	; 48
 510:	88 60       	ori	r24, 0x08	; 8
 512:	80 bf       	out	0x30, r24	; 48
 514:	08 95       	ret

00000516 <xmem_write>:
}

void xmem_write ( uint8_t data , uint16_t addr ) {
	volatile char * ext_mem = ( char *) 0x1000 ;
	ext_mem [ addr ]= data;
 516:	fb 01       	movw	r30, r22
 518:	f0 5f       	subi	r31, 0xF0	; 240
 51a:	80 83       	st	Z, r24
 51c:	08 95       	ret

0000051e <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1 << UDRE0)) );
 51e:	5d 9b       	sbis	0x0b, 5	; 11
 520:	fe cf       	rjmp	.-4      	; 0x51e <UART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
 522:	8c b9       	out	0x0c, r24	; 12
 524:	08 95       	ret

00000526 <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
 526:	5f 9b       	sbis	0x0b, 7	; 11
 528:	fe cf       	rjmp	.-4      	; 0x526 <UART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
 52a:	8c b1       	in	r24, 0x0c	; 12
 52c:	08 95       	ret

0000052e <UART_Init>:
#include "UART.h"

void UART_Init(unsigned int my_ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr >> 8);
 52e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)my_ubrr;
 530:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 532:	88 e1       	ldi	r24, 0x18	; 24
 534:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
 536:	8e e8       	ldi	r24, 0x8E	; 142
 538:	80 bd       	out	0x20, r24	; 32

	fdevopen(UART_Transmit, UART_Receive);
 53a:	63 e9       	ldi	r22, 0x93	; 147
 53c:	72 e0       	ldi	r23, 0x02	; 2
 53e:	8f e8       	ldi	r24, 0x8F	; 143
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	0e 94 a4 02 	call	0x548	; 0x548 <fdevopen>
 546:	08 95       	ret

00000548 <fdevopen>:
 548:	0f 93       	push	r16
 54a:	1f 93       	push	r17
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	00 97       	sbiw	r24, 0x00	; 0
 552:	31 f4       	brne	.+12     	; 0x560 <fdevopen+0x18>
 554:	61 15       	cp	r22, r1
 556:	71 05       	cpc	r23, r1
 558:	19 f4       	brne	.+6      	; 0x560 <fdevopen+0x18>
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	3a c0       	rjmp	.+116    	; 0x5d4 <fdevopen+0x8c>
 560:	8b 01       	movw	r16, r22
 562:	ec 01       	movw	r28, r24
 564:	6e e0       	ldi	r22, 0x0E	; 14
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <calloc>
 570:	fc 01       	movw	r30, r24
 572:	89 2b       	or	r24, r25
 574:	91 f3       	breq	.-28     	; 0x55a <fdevopen+0x12>
 576:	80 e8       	ldi	r24, 0x80	; 128
 578:	83 83       	std	Z+3, r24	; 0x03
 57a:	01 15       	cp	r16, r1
 57c:	11 05       	cpc	r17, r1
 57e:	71 f0       	breq	.+28     	; 0x59c <fdevopen+0x54>
 580:	13 87       	std	Z+11, r17	; 0x0b
 582:	02 87       	std	Z+10, r16	; 0x0a
 584:	81 e8       	ldi	r24, 0x81	; 129
 586:	83 83       	std	Z+3, r24	; 0x03
 588:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__iob>
 58c:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <__iob+0x1>
 590:	89 2b       	or	r24, r25
 592:	21 f4       	brne	.+8      	; 0x59c <fdevopen+0x54>
 594:	f0 93 1d 02 	sts	0x021D, r31	; 0x80021d <__iob+0x1>
 598:	e0 93 1c 02 	sts	0x021C, r30	; 0x80021c <__iob>
 59c:	20 97       	sbiw	r28, 0x00	; 0
 59e:	c9 f0       	breq	.+50     	; 0x5d2 <fdevopen+0x8a>
 5a0:	d1 87       	std	Z+9, r29	; 0x09
 5a2:	c0 87       	std	Z+8, r28	; 0x08
 5a4:	83 81       	ldd	r24, Z+3	; 0x03
 5a6:	82 60       	ori	r24, 0x02	; 2
 5a8:	83 83       	std	Z+3, r24	; 0x03
 5aa:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__iob+0x2>
 5ae:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__iob+0x3>
 5b2:	89 2b       	or	r24, r25
 5b4:	71 f4       	brne	.+28     	; 0x5d2 <fdevopen+0x8a>
 5b6:	f0 93 1f 02 	sts	0x021F, r31	; 0x80021f <__iob+0x3>
 5ba:	e0 93 1e 02 	sts	0x021E, r30	; 0x80021e <__iob+0x2>
 5be:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__iob+0x4>
 5c2:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <__iob+0x5>
 5c6:	89 2b       	or	r24, r25
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <fdevopen+0x8a>
 5ca:	f0 93 21 02 	sts	0x0221, r31	; 0x800221 <__iob+0x5>
 5ce:	e0 93 20 02 	sts	0x0220, r30	; 0x800220 <__iob+0x4>
 5d2:	cf 01       	movw	r24, r30
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	08 95       	ret

000005de <printf>:
 5de:	a0 e0       	ldi	r26, 0x00	; 0
 5e0:	b0 e0       	ldi	r27, 0x00	; 0
 5e2:	e5 ef       	ldi	r30, 0xF5	; 245
 5e4:	f2 e0       	ldi	r31, 0x02	; 2
 5e6:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__prologue_saves__+0x20>
 5ea:	ae 01       	movw	r20, r28
 5ec:	4b 5f       	subi	r20, 0xFB	; 251
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	fa 01       	movw	r30, r20
 5f2:	61 91       	ld	r22, Z+
 5f4:	71 91       	ld	r23, Z+
 5f6:	af 01       	movw	r20, r30
 5f8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__iob+0x2>
 5fc:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__iob+0x3>
 600:	0e 94 05 03 	call	0x60a	; 0x60a <vfprintf>
 604:	e2 e0       	ldi	r30, 0x02	; 2
 606:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__epilogue_restores__+0x20>

0000060a <vfprintf>:
 60a:	ab e0       	ldi	r26, 0x0B	; 11
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	eb e0       	ldi	r30, 0x0B	; 11
 610:	f3 e0       	ldi	r31, 0x03	; 3
 612:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__prologue_saves__>
 616:	6c 01       	movw	r12, r24
 618:	7b 01       	movw	r14, r22
 61a:	8a 01       	movw	r16, r20
 61c:	fc 01       	movw	r30, r24
 61e:	17 82       	std	Z+7, r1	; 0x07
 620:	16 82       	std	Z+6, r1	; 0x06
 622:	83 81       	ldd	r24, Z+3	; 0x03
 624:	81 ff       	sbrs	r24, 1
 626:	cc c1       	rjmp	.+920    	; 0x9c0 <vfprintf+0x3b6>
 628:	ce 01       	movw	r24, r28
 62a:	01 96       	adiw	r24, 0x01	; 1
 62c:	3c 01       	movw	r6, r24
 62e:	f6 01       	movw	r30, r12
 630:	93 81       	ldd	r25, Z+3	; 0x03
 632:	f7 01       	movw	r30, r14
 634:	93 fd       	sbrc	r25, 3
 636:	85 91       	lpm	r24, Z+
 638:	93 ff       	sbrs	r25, 3
 63a:	81 91       	ld	r24, Z+
 63c:	7f 01       	movw	r14, r30
 63e:	88 23       	and	r24, r24
 640:	09 f4       	brne	.+2      	; 0x644 <vfprintf+0x3a>
 642:	ba c1       	rjmp	.+884    	; 0x9b8 <vfprintf+0x3ae>
 644:	85 32       	cpi	r24, 0x25	; 37
 646:	39 f4       	brne	.+14     	; 0x656 <vfprintf+0x4c>
 648:	93 fd       	sbrc	r25, 3
 64a:	85 91       	lpm	r24, Z+
 64c:	93 ff       	sbrs	r25, 3
 64e:	81 91       	ld	r24, Z+
 650:	7f 01       	movw	r14, r30
 652:	85 32       	cpi	r24, 0x25	; 37
 654:	29 f4       	brne	.+10     	; 0x660 <vfprintf+0x56>
 656:	b6 01       	movw	r22, r12
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 65e:	e7 cf       	rjmp	.-50     	; 0x62e <vfprintf+0x24>
 660:	91 2c       	mov	r9, r1
 662:	21 2c       	mov	r2, r1
 664:	31 2c       	mov	r3, r1
 666:	ff e1       	ldi	r31, 0x1F	; 31
 668:	f3 15       	cp	r31, r3
 66a:	d8 f0       	brcs	.+54     	; 0x6a2 <vfprintf+0x98>
 66c:	8b 32       	cpi	r24, 0x2B	; 43
 66e:	79 f0       	breq	.+30     	; 0x68e <vfprintf+0x84>
 670:	38 f4       	brcc	.+14     	; 0x680 <vfprintf+0x76>
 672:	80 32       	cpi	r24, 0x20	; 32
 674:	79 f0       	breq	.+30     	; 0x694 <vfprintf+0x8a>
 676:	83 32       	cpi	r24, 0x23	; 35
 678:	a1 f4       	brne	.+40     	; 0x6a2 <vfprintf+0x98>
 67a:	23 2d       	mov	r18, r3
 67c:	20 61       	ori	r18, 0x10	; 16
 67e:	1d c0       	rjmp	.+58     	; 0x6ba <vfprintf+0xb0>
 680:	8d 32       	cpi	r24, 0x2D	; 45
 682:	61 f0       	breq	.+24     	; 0x69c <vfprintf+0x92>
 684:	80 33       	cpi	r24, 0x30	; 48
 686:	69 f4       	brne	.+26     	; 0x6a2 <vfprintf+0x98>
 688:	23 2d       	mov	r18, r3
 68a:	21 60       	ori	r18, 0x01	; 1
 68c:	16 c0       	rjmp	.+44     	; 0x6ba <vfprintf+0xb0>
 68e:	83 2d       	mov	r24, r3
 690:	82 60       	ori	r24, 0x02	; 2
 692:	38 2e       	mov	r3, r24
 694:	e3 2d       	mov	r30, r3
 696:	e4 60       	ori	r30, 0x04	; 4
 698:	3e 2e       	mov	r3, r30
 69a:	2a c0       	rjmp	.+84     	; 0x6f0 <vfprintf+0xe6>
 69c:	f3 2d       	mov	r31, r3
 69e:	f8 60       	ori	r31, 0x08	; 8
 6a0:	1d c0       	rjmp	.+58     	; 0x6dc <vfprintf+0xd2>
 6a2:	37 fc       	sbrc	r3, 7
 6a4:	2d c0       	rjmp	.+90     	; 0x700 <vfprintf+0xf6>
 6a6:	20 ed       	ldi	r18, 0xD0	; 208
 6a8:	28 0f       	add	r18, r24
 6aa:	2a 30       	cpi	r18, 0x0A	; 10
 6ac:	40 f0       	brcs	.+16     	; 0x6be <vfprintf+0xb4>
 6ae:	8e 32       	cpi	r24, 0x2E	; 46
 6b0:	b9 f4       	brne	.+46     	; 0x6e0 <vfprintf+0xd6>
 6b2:	36 fc       	sbrc	r3, 6
 6b4:	81 c1       	rjmp	.+770    	; 0x9b8 <vfprintf+0x3ae>
 6b6:	23 2d       	mov	r18, r3
 6b8:	20 64       	ori	r18, 0x40	; 64
 6ba:	32 2e       	mov	r3, r18
 6bc:	19 c0       	rjmp	.+50     	; 0x6f0 <vfprintf+0xe6>
 6be:	36 fe       	sbrs	r3, 6
 6c0:	06 c0       	rjmp	.+12     	; 0x6ce <vfprintf+0xc4>
 6c2:	8a e0       	ldi	r24, 0x0A	; 10
 6c4:	98 9e       	mul	r9, r24
 6c6:	20 0d       	add	r18, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	92 2e       	mov	r9, r18
 6cc:	11 c0       	rjmp	.+34     	; 0x6f0 <vfprintf+0xe6>
 6ce:	ea e0       	ldi	r30, 0x0A	; 10
 6d0:	2e 9e       	mul	r2, r30
 6d2:	20 0d       	add	r18, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	22 2e       	mov	r2, r18
 6d8:	f3 2d       	mov	r31, r3
 6da:	f0 62       	ori	r31, 0x20	; 32
 6dc:	3f 2e       	mov	r3, r31
 6de:	08 c0       	rjmp	.+16     	; 0x6f0 <vfprintf+0xe6>
 6e0:	8c 36       	cpi	r24, 0x6C	; 108
 6e2:	21 f4       	brne	.+8      	; 0x6ec <vfprintf+0xe2>
 6e4:	83 2d       	mov	r24, r3
 6e6:	80 68       	ori	r24, 0x80	; 128
 6e8:	38 2e       	mov	r3, r24
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <vfprintf+0xe6>
 6ec:	88 36       	cpi	r24, 0x68	; 104
 6ee:	41 f4       	brne	.+16     	; 0x700 <vfprintf+0xf6>
 6f0:	f7 01       	movw	r30, r14
 6f2:	93 fd       	sbrc	r25, 3
 6f4:	85 91       	lpm	r24, Z+
 6f6:	93 ff       	sbrs	r25, 3
 6f8:	81 91       	ld	r24, Z+
 6fa:	7f 01       	movw	r14, r30
 6fc:	81 11       	cpse	r24, r1
 6fe:	b3 cf       	rjmp	.-154    	; 0x666 <vfprintf+0x5c>
 700:	98 2f       	mov	r25, r24
 702:	9f 7d       	andi	r25, 0xDF	; 223
 704:	95 54       	subi	r25, 0x45	; 69
 706:	93 30       	cpi	r25, 0x03	; 3
 708:	28 f4       	brcc	.+10     	; 0x714 <vfprintf+0x10a>
 70a:	0c 5f       	subi	r16, 0xFC	; 252
 70c:	1f 4f       	sbci	r17, 0xFF	; 255
 70e:	9f e3       	ldi	r25, 0x3F	; 63
 710:	99 83       	std	Y+1, r25	; 0x01
 712:	0d c0       	rjmp	.+26     	; 0x72e <vfprintf+0x124>
 714:	83 36       	cpi	r24, 0x63	; 99
 716:	31 f0       	breq	.+12     	; 0x724 <vfprintf+0x11a>
 718:	83 37       	cpi	r24, 0x73	; 115
 71a:	71 f0       	breq	.+28     	; 0x738 <vfprintf+0x12e>
 71c:	83 35       	cpi	r24, 0x53	; 83
 71e:	09 f0       	breq	.+2      	; 0x722 <vfprintf+0x118>
 720:	59 c0       	rjmp	.+178    	; 0x7d4 <vfprintf+0x1ca>
 722:	21 c0       	rjmp	.+66     	; 0x766 <vfprintf+0x15c>
 724:	f8 01       	movw	r30, r16
 726:	80 81       	ld	r24, Z
 728:	89 83       	std	Y+1, r24	; 0x01
 72a:	0e 5f       	subi	r16, 0xFE	; 254
 72c:	1f 4f       	sbci	r17, 0xFF	; 255
 72e:	88 24       	eor	r8, r8
 730:	83 94       	inc	r8
 732:	91 2c       	mov	r9, r1
 734:	53 01       	movw	r10, r6
 736:	13 c0       	rjmp	.+38     	; 0x75e <vfprintf+0x154>
 738:	28 01       	movw	r4, r16
 73a:	f2 e0       	ldi	r31, 0x02	; 2
 73c:	4f 0e       	add	r4, r31
 73e:	51 1c       	adc	r5, r1
 740:	f8 01       	movw	r30, r16
 742:	a0 80       	ld	r10, Z
 744:	b1 80       	ldd	r11, Z+1	; 0x01
 746:	36 fe       	sbrs	r3, 6
 748:	03 c0       	rjmp	.+6      	; 0x750 <vfprintf+0x146>
 74a:	69 2d       	mov	r22, r9
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	02 c0       	rjmp	.+4      	; 0x754 <vfprintf+0x14a>
 750:	6f ef       	ldi	r22, 0xFF	; 255
 752:	7f ef       	ldi	r23, 0xFF	; 255
 754:	c5 01       	movw	r24, r10
 756:	0e 94 35 06 	call	0xc6a	; 0xc6a <strnlen>
 75a:	4c 01       	movw	r8, r24
 75c:	82 01       	movw	r16, r4
 75e:	f3 2d       	mov	r31, r3
 760:	ff 77       	andi	r31, 0x7F	; 127
 762:	3f 2e       	mov	r3, r31
 764:	16 c0       	rjmp	.+44     	; 0x792 <vfprintf+0x188>
 766:	28 01       	movw	r4, r16
 768:	22 e0       	ldi	r18, 0x02	; 2
 76a:	42 0e       	add	r4, r18
 76c:	51 1c       	adc	r5, r1
 76e:	f8 01       	movw	r30, r16
 770:	a0 80       	ld	r10, Z
 772:	b1 80       	ldd	r11, Z+1	; 0x01
 774:	36 fe       	sbrs	r3, 6
 776:	03 c0       	rjmp	.+6      	; 0x77e <vfprintf+0x174>
 778:	69 2d       	mov	r22, r9
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <vfprintf+0x178>
 77e:	6f ef       	ldi	r22, 0xFF	; 255
 780:	7f ef       	ldi	r23, 0xFF	; 255
 782:	c5 01       	movw	r24, r10
 784:	0e 94 23 06 	call	0xc46	; 0xc46 <strnlen_P>
 788:	4c 01       	movw	r8, r24
 78a:	f3 2d       	mov	r31, r3
 78c:	f0 68       	ori	r31, 0x80	; 128
 78e:	3f 2e       	mov	r3, r31
 790:	82 01       	movw	r16, r4
 792:	33 fc       	sbrc	r3, 3
 794:	1b c0       	rjmp	.+54     	; 0x7cc <vfprintf+0x1c2>
 796:	82 2d       	mov	r24, r2
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	88 16       	cp	r8, r24
 79c:	99 06       	cpc	r9, r25
 79e:	b0 f4       	brcc	.+44     	; 0x7cc <vfprintf+0x1c2>
 7a0:	b6 01       	movw	r22, r12
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 7aa:	2a 94       	dec	r2
 7ac:	f4 cf       	rjmp	.-24     	; 0x796 <vfprintf+0x18c>
 7ae:	f5 01       	movw	r30, r10
 7b0:	37 fc       	sbrc	r3, 7
 7b2:	85 91       	lpm	r24, Z+
 7b4:	37 fe       	sbrs	r3, 7
 7b6:	81 91       	ld	r24, Z+
 7b8:	5f 01       	movw	r10, r30
 7ba:	b6 01       	movw	r22, r12
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 7c2:	21 10       	cpse	r2, r1
 7c4:	2a 94       	dec	r2
 7c6:	21 e0       	ldi	r18, 0x01	; 1
 7c8:	82 1a       	sub	r8, r18
 7ca:	91 08       	sbc	r9, r1
 7cc:	81 14       	cp	r8, r1
 7ce:	91 04       	cpc	r9, r1
 7d0:	71 f7       	brne	.-36     	; 0x7ae <vfprintf+0x1a4>
 7d2:	e8 c0       	rjmp	.+464    	; 0x9a4 <vfprintf+0x39a>
 7d4:	84 36       	cpi	r24, 0x64	; 100
 7d6:	11 f0       	breq	.+4      	; 0x7dc <vfprintf+0x1d2>
 7d8:	89 36       	cpi	r24, 0x69	; 105
 7da:	41 f5       	brne	.+80     	; 0x82c <vfprintf+0x222>
 7dc:	f8 01       	movw	r30, r16
 7de:	37 fe       	sbrs	r3, 7
 7e0:	07 c0       	rjmp	.+14     	; 0x7f0 <vfprintf+0x1e6>
 7e2:	60 81       	ld	r22, Z
 7e4:	71 81       	ldd	r23, Z+1	; 0x01
 7e6:	82 81       	ldd	r24, Z+2	; 0x02
 7e8:	93 81       	ldd	r25, Z+3	; 0x03
 7ea:	0c 5f       	subi	r16, 0xFC	; 252
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	08 c0       	rjmp	.+16     	; 0x800 <vfprintf+0x1f6>
 7f0:	60 81       	ld	r22, Z
 7f2:	71 81       	ldd	r23, Z+1	; 0x01
 7f4:	07 2e       	mov	r0, r23
 7f6:	00 0c       	add	r0, r0
 7f8:	88 0b       	sbc	r24, r24
 7fa:	99 0b       	sbc	r25, r25
 7fc:	0e 5f       	subi	r16, 0xFE	; 254
 7fe:	1f 4f       	sbci	r17, 0xFF	; 255
 800:	f3 2d       	mov	r31, r3
 802:	ff 76       	andi	r31, 0x6F	; 111
 804:	3f 2e       	mov	r3, r31
 806:	97 ff       	sbrs	r25, 7
 808:	09 c0       	rjmp	.+18     	; 0x81c <vfprintf+0x212>
 80a:	90 95       	com	r25
 80c:	80 95       	com	r24
 80e:	70 95       	com	r23
 810:	61 95       	neg	r22
 812:	7f 4f       	sbci	r23, 0xFF	; 255
 814:	8f 4f       	sbci	r24, 0xFF	; 255
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	f0 68       	ori	r31, 0x80	; 128
 81a:	3f 2e       	mov	r3, r31
 81c:	2a e0       	ldi	r18, 0x0A	; 10
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	a3 01       	movw	r20, r6
 822:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__ultoa_invert>
 826:	88 2e       	mov	r8, r24
 828:	86 18       	sub	r8, r6
 82a:	45 c0       	rjmp	.+138    	; 0x8b6 <vfprintf+0x2ac>
 82c:	85 37       	cpi	r24, 0x75	; 117
 82e:	31 f4       	brne	.+12     	; 0x83c <vfprintf+0x232>
 830:	23 2d       	mov	r18, r3
 832:	2f 7e       	andi	r18, 0xEF	; 239
 834:	b2 2e       	mov	r11, r18
 836:	2a e0       	ldi	r18, 0x0A	; 10
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	25 c0       	rjmp	.+74     	; 0x886 <vfprintf+0x27c>
 83c:	93 2d       	mov	r25, r3
 83e:	99 7f       	andi	r25, 0xF9	; 249
 840:	b9 2e       	mov	r11, r25
 842:	8f 36       	cpi	r24, 0x6F	; 111
 844:	c1 f0       	breq	.+48     	; 0x876 <vfprintf+0x26c>
 846:	18 f4       	brcc	.+6      	; 0x84e <vfprintf+0x244>
 848:	88 35       	cpi	r24, 0x58	; 88
 84a:	79 f0       	breq	.+30     	; 0x86a <vfprintf+0x260>
 84c:	b5 c0       	rjmp	.+362    	; 0x9b8 <vfprintf+0x3ae>
 84e:	80 37       	cpi	r24, 0x70	; 112
 850:	19 f0       	breq	.+6      	; 0x858 <vfprintf+0x24e>
 852:	88 37       	cpi	r24, 0x78	; 120
 854:	21 f0       	breq	.+8      	; 0x85e <vfprintf+0x254>
 856:	b0 c0       	rjmp	.+352    	; 0x9b8 <vfprintf+0x3ae>
 858:	e9 2f       	mov	r30, r25
 85a:	e0 61       	ori	r30, 0x10	; 16
 85c:	be 2e       	mov	r11, r30
 85e:	b4 fe       	sbrs	r11, 4
 860:	0d c0       	rjmp	.+26     	; 0x87c <vfprintf+0x272>
 862:	fb 2d       	mov	r31, r11
 864:	f4 60       	ori	r31, 0x04	; 4
 866:	bf 2e       	mov	r11, r31
 868:	09 c0       	rjmp	.+18     	; 0x87c <vfprintf+0x272>
 86a:	34 fe       	sbrs	r3, 4
 86c:	0a c0       	rjmp	.+20     	; 0x882 <vfprintf+0x278>
 86e:	29 2f       	mov	r18, r25
 870:	26 60       	ori	r18, 0x06	; 6
 872:	b2 2e       	mov	r11, r18
 874:	06 c0       	rjmp	.+12     	; 0x882 <vfprintf+0x278>
 876:	28 e0       	ldi	r18, 0x08	; 8
 878:	30 e0       	ldi	r19, 0x00	; 0
 87a:	05 c0       	rjmp	.+10     	; 0x886 <vfprintf+0x27c>
 87c:	20 e1       	ldi	r18, 0x10	; 16
 87e:	30 e0       	ldi	r19, 0x00	; 0
 880:	02 c0       	rjmp	.+4      	; 0x886 <vfprintf+0x27c>
 882:	20 e1       	ldi	r18, 0x10	; 16
 884:	32 e0       	ldi	r19, 0x02	; 2
 886:	f8 01       	movw	r30, r16
 888:	b7 fe       	sbrs	r11, 7
 88a:	07 c0       	rjmp	.+14     	; 0x89a <vfprintf+0x290>
 88c:	60 81       	ld	r22, Z
 88e:	71 81       	ldd	r23, Z+1	; 0x01
 890:	82 81       	ldd	r24, Z+2	; 0x02
 892:	93 81       	ldd	r25, Z+3	; 0x03
 894:	0c 5f       	subi	r16, 0xFC	; 252
 896:	1f 4f       	sbci	r17, 0xFF	; 255
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0x29c>
 89a:	60 81       	ld	r22, Z
 89c:	71 81       	ldd	r23, Z+1	; 0x01
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 5f       	subi	r16, 0xFE	; 254
 8a4:	1f 4f       	sbci	r17, 0xFF	; 255
 8a6:	a3 01       	movw	r20, r6
 8a8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__ultoa_invert>
 8ac:	88 2e       	mov	r8, r24
 8ae:	86 18       	sub	r8, r6
 8b0:	fb 2d       	mov	r31, r11
 8b2:	ff 77       	andi	r31, 0x7F	; 127
 8b4:	3f 2e       	mov	r3, r31
 8b6:	36 fe       	sbrs	r3, 6
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <vfprintf+0x2ca>
 8ba:	23 2d       	mov	r18, r3
 8bc:	2e 7f       	andi	r18, 0xFE	; 254
 8be:	a2 2e       	mov	r10, r18
 8c0:	89 14       	cp	r8, r9
 8c2:	58 f4       	brcc	.+22     	; 0x8da <vfprintf+0x2d0>
 8c4:	34 fe       	sbrs	r3, 4
 8c6:	0b c0       	rjmp	.+22     	; 0x8de <vfprintf+0x2d4>
 8c8:	32 fc       	sbrc	r3, 2
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <vfprintf+0x2d4>
 8cc:	83 2d       	mov	r24, r3
 8ce:	8e 7e       	andi	r24, 0xEE	; 238
 8d0:	a8 2e       	mov	r10, r24
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <vfprintf+0x2d4>
 8d4:	b8 2c       	mov	r11, r8
 8d6:	a3 2c       	mov	r10, r3
 8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <vfprintf+0x2d6>
 8da:	b8 2c       	mov	r11, r8
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <vfprintf+0x2d6>
 8de:	b9 2c       	mov	r11, r9
 8e0:	a4 fe       	sbrs	r10, 4
 8e2:	0f c0       	rjmp	.+30     	; 0x902 <vfprintf+0x2f8>
 8e4:	fe 01       	movw	r30, r28
 8e6:	e8 0d       	add	r30, r8
 8e8:	f1 1d       	adc	r31, r1
 8ea:	80 81       	ld	r24, Z
 8ec:	80 33       	cpi	r24, 0x30	; 48
 8ee:	21 f4       	brne	.+8      	; 0x8f8 <vfprintf+0x2ee>
 8f0:	9a 2d       	mov	r25, r10
 8f2:	99 7e       	andi	r25, 0xE9	; 233
 8f4:	a9 2e       	mov	r10, r25
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <vfprintf+0x300>
 8f8:	a2 fe       	sbrs	r10, 2
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <vfprintf+0x2fe>
 8fc:	b3 94       	inc	r11
 8fe:	b3 94       	inc	r11
 900:	04 c0       	rjmp	.+8      	; 0x90a <vfprintf+0x300>
 902:	8a 2d       	mov	r24, r10
 904:	86 78       	andi	r24, 0x86	; 134
 906:	09 f0       	breq	.+2      	; 0x90a <vfprintf+0x300>
 908:	b3 94       	inc	r11
 90a:	a3 fc       	sbrc	r10, 3
 90c:	11 c0       	rjmp	.+34     	; 0x930 <vfprintf+0x326>
 90e:	a0 fe       	sbrs	r10, 0
 910:	06 c0       	rjmp	.+12     	; 0x91e <vfprintf+0x314>
 912:	b2 14       	cp	r11, r2
 914:	88 f4       	brcc	.+34     	; 0x938 <vfprintf+0x32e>
 916:	28 0c       	add	r2, r8
 918:	92 2c       	mov	r9, r2
 91a:	9b 18       	sub	r9, r11
 91c:	0e c0       	rjmp	.+28     	; 0x93a <vfprintf+0x330>
 91e:	b2 14       	cp	r11, r2
 920:	60 f4       	brcc	.+24     	; 0x93a <vfprintf+0x330>
 922:	b6 01       	movw	r22, r12
 924:	80 e2       	ldi	r24, 0x20	; 32
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 92c:	b3 94       	inc	r11
 92e:	f7 cf       	rjmp	.-18     	; 0x91e <vfprintf+0x314>
 930:	b2 14       	cp	r11, r2
 932:	18 f4       	brcc	.+6      	; 0x93a <vfprintf+0x330>
 934:	2b 18       	sub	r2, r11
 936:	02 c0       	rjmp	.+4      	; 0x93c <vfprintf+0x332>
 938:	98 2c       	mov	r9, r8
 93a:	21 2c       	mov	r2, r1
 93c:	a4 fe       	sbrs	r10, 4
 93e:	10 c0       	rjmp	.+32     	; 0x960 <vfprintf+0x356>
 940:	b6 01       	movw	r22, r12
 942:	80 e3       	ldi	r24, 0x30	; 48
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 94a:	a2 fe       	sbrs	r10, 2
 94c:	17 c0       	rjmp	.+46     	; 0x97c <vfprintf+0x372>
 94e:	a1 fc       	sbrc	r10, 1
 950:	03 c0       	rjmp	.+6      	; 0x958 <vfprintf+0x34e>
 952:	88 e7       	ldi	r24, 0x78	; 120
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	02 c0       	rjmp	.+4      	; 0x95c <vfprintf+0x352>
 958:	88 e5       	ldi	r24, 0x58	; 88
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	b6 01       	movw	r22, r12
 95e:	0c c0       	rjmp	.+24     	; 0x978 <vfprintf+0x36e>
 960:	8a 2d       	mov	r24, r10
 962:	86 78       	andi	r24, 0x86	; 134
 964:	59 f0       	breq	.+22     	; 0x97c <vfprintf+0x372>
 966:	a1 fe       	sbrs	r10, 1
 968:	02 c0       	rjmp	.+4      	; 0x96e <vfprintf+0x364>
 96a:	8b e2       	ldi	r24, 0x2B	; 43
 96c:	01 c0       	rjmp	.+2      	; 0x970 <vfprintf+0x366>
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	a7 fc       	sbrc	r10, 7
 972:	8d e2       	ldi	r24, 0x2D	; 45
 974:	b6 01       	movw	r22, r12
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 97c:	89 14       	cp	r8, r9
 97e:	38 f4       	brcc	.+14     	; 0x98e <vfprintf+0x384>
 980:	b6 01       	movw	r22, r12
 982:	80 e3       	ldi	r24, 0x30	; 48
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 98a:	9a 94       	dec	r9
 98c:	f7 cf       	rjmp	.-18     	; 0x97c <vfprintf+0x372>
 98e:	8a 94       	dec	r8
 990:	f3 01       	movw	r30, r6
 992:	e8 0d       	add	r30, r8
 994:	f1 1d       	adc	r31, r1
 996:	80 81       	ld	r24, Z
 998:	b6 01       	movw	r22, r12
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 9a0:	81 10       	cpse	r8, r1
 9a2:	f5 cf       	rjmp	.-22     	; 0x98e <vfprintf+0x384>
 9a4:	22 20       	and	r2, r2
 9a6:	09 f4       	brne	.+2      	; 0x9aa <vfprintf+0x3a0>
 9a8:	42 ce       	rjmp	.-892    	; 0x62e <vfprintf+0x24>
 9aa:	b6 01       	movw	r22, r12
 9ac:	80 e2       	ldi	r24, 0x20	; 32
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 40 06 	call	0xc80	; 0xc80 <fputc>
 9b4:	2a 94       	dec	r2
 9b6:	f6 cf       	rjmp	.-20     	; 0x9a4 <vfprintf+0x39a>
 9b8:	f6 01       	movw	r30, r12
 9ba:	86 81       	ldd	r24, Z+6	; 0x06
 9bc:	97 81       	ldd	r25, Z+7	; 0x07
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <vfprintf+0x3ba>
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	9f ef       	ldi	r25, 0xFF	; 255
 9c4:	2b 96       	adiw	r28, 0x0b	; 11
 9c6:	e2 e1       	ldi	r30, 0x12	; 18
 9c8:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__epilogue_restores__>

000009cc <calloc>:
 9cc:	0f 93       	push	r16
 9ce:	1f 93       	push	r17
 9d0:	cf 93       	push	r28
 9d2:	df 93       	push	r29
 9d4:	86 9f       	mul	r24, r22
 9d6:	80 01       	movw	r16, r0
 9d8:	87 9f       	mul	r24, r23
 9da:	10 0d       	add	r17, r0
 9dc:	96 9f       	mul	r25, r22
 9de:	10 0d       	add	r17, r0
 9e0:	11 24       	eor	r1, r1
 9e2:	c8 01       	movw	r24, r16
 9e4:	0e 94 02 05 	call	0xa04	; 0xa04 <malloc>
 9e8:	ec 01       	movw	r28, r24
 9ea:	00 97       	sbiw	r24, 0x00	; 0
 9ec:	29 f0       	breq	.+10     	; 0x9f8 <calloc+0x2c>
 9ee:	a8 01       	movw	r20, r16
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <memset>
 9f8:	ce 01       	movw	r24, r28
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	1f 91       	pop	r17
 a00:	0f 91       	pop	r16
 a02:	08 95       	ret

00000a04 <malloc>:
 a04:	0f 93       	push	r16
 a06:	1f 93       	push	r17
 a08:	cf 93       	push	r28
 a0a:	df 93       	push	r29
 a0c:	82 30       	cpi	r24, 0x02	; 2
 a0e:	91 05       	cpc	r25, r1
 a10:	10 f4       	brcc	.+4      	; 0xa16 <malloc+0x12>
 a12:	82 e0       	ldi	r24, 0x02	; 2
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <__flp>
 a1a:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <__flp+0x1>
 a1e:	20 e0       	ldi	r18, 0x00	; 0
 a20:	30 e0       	ldi	r19, 0x00	; 0
 a22:	a0 e0       	ldi	r26, 0x00	; 0
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	30 97       	sbiw	r30, 0x00	; 0
 a28:	19 f1       	breq	.+70     	; 0xa70 <malloc+0x6c>
 a2a:	40 81       	ld	r20, Z
 a2c:	51 81       	ldd	r21, Z+1	; 0x01
 a2e:	02 81       	ldd	r16, Z+2	; 0x02
 a30:	13 81       	ldd	r17, Z+3	; 0x03
 a32:	48 17       	cp	r20, r24
 a34:	59 07       	cpc	r21, r25
 a36:	c8 f0       	brcs	.+50     	; 0xa6a <malloc+0x66>
 a38:	84 17       	cp	r24, r20
 a3a:	95 07       	cpc	r25, r21
 a3c:	69 f4       	brne	.+26     	; 0xa58 <malloc+0x54>
 a3e:	10 97       	sbiw	r26, 0x00	; 0
 a40:	31 f0       	breq	.+12     	; 0xa4e <malloc+0x4a>
 a42:	12 96       	adiw	r26, 0x02	; 2
 a44:	0c 93       	st	X, r16
 a46:	12 97       	sbiw	r26, 0x02	; 2
 a48:	13 96       	adiw	r26, 0x03	; 3
 a4a:	1c 93       	st	X, r17
 a4c:	27 c0       	rjmp	.+78     	; 0xa9c <malloc+0x98>
 a4e:	00 93 24 02 	sts	0x0224, r16	; 0x800224 <__flp>
 a52:	10 93 25 02 	sts	0x0225, r17	; 0x800225 <__flp+0x1>
 a56:	22 c0       	rjmp	.+68     	; 0xa9c <malloc+0x98>
 a58:	21 15       	cp	r18, r1
 a5a:	31 05       	cpc	r19, r1
 a5c:	19 f0       	breq	.+6      	; 0xa64 <malloc+0x60>
 a5e:	42 17       	cp	r20, r18
 a60:	53 07       	cpc	r21, r19
 a62:	18 f4       	brcc	.+6      	; 0xa6a <malloc+0x66>
 a64:	9a 01       	movw	r18, r20
 a66:	bd 01       	movw	r22, r26
 a68:	ef 01       	movw	r28, r30
 a6a:	df 01       	movw	r26, r30
 a6c:	f8 01       	movw	r30, r16
 a6e:	db cf       	rjmp	.-74     	; 0xa26 <malloc+0x22>
 a70:	21 15       	cp	r18, r1
 a72:	31 05       	cpc	r19, r1
 a74:	f9 f0       	breq	.+62     	; 0xab4 <malloc+0xb0>
 a76:	28 1b       	sub	r18, r24
 a78:	39 0b       	sbc	r19, r25
 a7a:	24 30       	cpi	r18, 0x04	; 4
 a7c:	31 05       	cpc	r19, r1
 a7e:	80 f4       	brcc	.+32     	; 0xaa0 <malloc+0x9c>
 a80:	8a 81       	ldd	r24, Y+2	; 0x02
 a82:	9b 81       	ldd	r25, Y+3	; 0x03
 a84:	61 15       	cp	r22, r1
 a86:	71 05       	cpc	r23, r1
 a88:	21 f0       	breq	.+8      	; 0xa92 <malloc+0x8e>
 a8a:	fb 01       	movw	r30, r22
 a8c:	93 83       	std	Z+3, r25	; 0x03
 a8e:	82 83       	std	Z+2, r24	; 0x02
 a90:	04 c0       	rjmp	.+8      	; 0xa9a <malloc+0x96>
 a92:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <__flp+0x1>
 a96:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__flp>
 a9a:	fe 01       	movw	r30, r28
 a9c:	32 96       	adiw	r30, 0x02	; 2
 a9e:	44 c0       	rjmp	.+136    	; 0xb28 <malloc+0x124>
 aa0:	fe 01       	movw	r30, r28
 aa2:	e2 0f       	add	r30, r18
 aa4:	f3 1f       	adc	r31, r19
 aa6:	81 93       	st	Z+, r24
 aa8:	91 93       	st	Z+, r25
 aaa:	22 50       	subi	r18, 0x02	; 2
 aac:	31 09       	sbc	r19, r1
 aae:	39 83       	std	Y+1, r19	; 0x01
 ab0:	28 83       	st	Y, r18
 ab2:	3a c0       	rjmp	.+116    	; 0xb28 <malloc+0x124>
 ab4:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <__brkval>
 ab8:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <__brkval+0x1>
 abc:	23 2b       	or	r18, r19
 abe:	41 f4       	brne	.+16     	; 0xad0 <malloc+0xcc>
 ac0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 ac4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 ac8:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <__brkval+0x1>
 acc:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <__brkval>
 ad0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 ad4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 ad8:	21 15       	cp	r18, r1
 ada:	31 05       	cpc	r19, r1
 adc:	41 f4       	brne	.+16     	; 0xaee <malloc+0xea>
 ade:	2d b7       	in	r18, 0x3d	; 61
 ae0:	3e b7       	in	r19, 0x3e	; 62
 ae2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 ae6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 aea:	24 1b       	sub	r18, r20
 aec:	35 0b       	sbc	r19, r21
 aee:	e0 91 22 02 	lds	r30, 0x0222	; 0x800222 <__brkval>
 af2:	f0 91 23 02 	lds	r31, 0x0223	; 0x800223 <__brkval+0x1>
 af6:	e2 17       	cp	r30, r18
 af8:	f3 07       	cpc	r31, r19
 afa:	a0 f4       	brcc	.+40     	; 0xb24 <malloc+0x120>
 afc:	2e 1b       	sub	r18, r30
 afe:	3f 0b       	sbc	r19, r31
 b00:	28 17       	cp	r18, r24
 b02:	39 07       	cpc	r19, r25
 b04:	78 f0       	brcs	.+30     	; 0xb24 <malloc+0x120>
 b06:	ac 01       	movw	r20, r24
 b08:	4e 5f       	subi	r20, 0xFE	; 254
 b0a:	5f 4f       	sbci	r21, 0xFF	; 255
 b0c:	24 17       	cp	r18, r20
 b0e:	35 07       	cpc	r19, r21
 b10:	48 f0       	brcs	.+18     	; 0xb24 <malloc+0x120>
 b12:	4e 0f       	add	r20, r30
 b14:	5f 1f       	adc	r21, r31
 b16:	50 93 23 02 	sts	0x0223, r21	; 0x800223 <__brkval+0x1>
 b1a:	40 93 22 02 	sts	0x0222, r20	; 0x800222 <__brkval>
 b1e:	81 93       	st	Z+, r24
 b20:	91 93       	st	Z+, r25
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <malloc+0x124>
 b24:	e0 e0       	ldi	r30, 0x00	; 0
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	cf 01       	movw	r24, r30
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	08 95       	ret

00000b34 <free>:
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	00 97       	sbiw	r24, 0x00	; 0
 b3a:	09 f4       	brne	.+2      	; 0xb3e <free+0xa>
 b3c:	81 c0       	rjmp	.+258    	; 0xc40 <free+0x10c>
 b3e:	fc 01       	movw	r30, r24
 b40:	32 97       	sbiw	r30, 0x02	; 2
 b42:	13 82       	std	Z+3, r1	; 0x03
 b44:	12 82       	std	Z+2, r1	; 0x02
 b46:	a0 91 24 02 	lds	r26, 0x0224	; 0x800224 <__flp>
 b4a:	b0 91 25 02 	lds	r27, 0x0225	; 0x800225 <__flp+0x1>
 b4e:	10 97       	sbiw	r26, 0x00	; 0
 b50:	81 f4       	brne	.+32     	; 0xb72 <free+0x3e>
 b52:	20 81       	ld	r18, Z
 b54:	31 81       	ldd	r19, Z+1	; 0x01
 b56:	82 0f       	add	r24, r18
 b58:	93 1f       	adc	r25, r19
 b5a:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <__brkval>
 b5e:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <__brkval+0x1>
 b62:	28 17       	cp	r18, r24
 b64:	39 07       	cpc	r19, r25
 b66:	51 f5       	brne	.+84     	; 0xbbc <free+0x88>
 b68:	f0 93 23 02 	sts	0x0223, r31	; 0x800223 <__brkval+0x1>
 b6c:	e0 93 22 02 	sts	0x0222, r30	; 0x800222 <__brkval>
 b70:	67 c0       	rjmp	.+206    	; 0xc40 <free+0x10c>
 b72:	ed 01       	movw	r28, r26
 b74:	20 e0       	ldi	r18, 0x00	; 0
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	ce 17       	cp	r28, r30
 b7a:	df 07       	cpc	r29, r31
 b7c:	40 f4       	brcc	.+16     	; 0xb8e <free+0x5a>
 b7e:	4a 81       	ldd	r20, Y+2	; 0x02
 b80:	5b 81       	ldd	r21, Y+3	; 0x03
 b82:	9e 01       	movw	r18, r28
 b84:	41 15       	cp	r20, r1
 b86:	51 05       	cpc	r21, r1
 b88:	f1 f0       	breq	.+60     	; 0xbc6 <free+0x92>
 b8a:	ea 01       	movw	r28, r20
 b8c:	f5 cf       	rjmp	.-22     	; 0xb78 <free+0x44>
 b8e:	d3 83       	std	Z+3, r29	; 0x03
 b90:	c2 83       	std	Z+2, r28	; 0x02
 b92:	40 81       	ld	r20, Z
 b94:	51 81       	ldd	r21, Z+1	; 0x01
 b96:	84 0f       	add	r24, r20
 b98:	95 1f       	adc	r25, r21
 b9a:	c8 17       	cp	r28, r24
 b9c:	d9 07       	cpc	r29, r25
 b9e:	59 f4       	brne	.+22     	; 0xbb6 <free+0x82>
 ba0:	88 81       	ld	r24, Y
 ba2:	99 81       	ldd	r25, Y+1	; 0x01
 ba4:	84 0f       	add	r24, r20
 ba6:	95 1f       	adc	r25, r21
 ba8:	02 96       	adiw	r24, 0x02	; 2
 baa:	91 83       	std	Z+1, r25	; 0x01
 bac:	80 83       	st	Z, r24
 bae:	8a 81       	ldd	r24, Y+2	; 0x02
 bb0:	9b 81       	ldd	r25, Y+3	; 0x03
 bb2:	93 83       	std	Z+3, r25	; 0x03
 bb4:	82 83       	std	Z+2, r24	; 0x02
 bb6:	21 15       	cp	r18, r1
 bb8:	31 05       	cpc	r19, r1
 bba:	29 f4       	brne	.+10     	; 0xbc6 <free+0x92>
 bbc:	f0 93 25 02 	sts	0x0225, r31	; 0x800225 <__flp+0x1>
 bc0:	e0 93 24 02 	sts	0x0224, r30	; 0x800224 <__flp>
 bc4:	3d c0       	rjmp	.+122    	; 0xc40 <free+0x10c>
 bc6:	e9 01       	movw	r28, r18
 bc8:	fb 83       	std	Y+3, r31	; 0x03
 bca:	ea 83       	std	Y+2, r30	; 0x02
 bcc:	49 91       	ld	r20, Y+
 bce:	59 91       	ld	r21, Y+
 bd0:	c4 0f       	add	r28, r20
 bd2:	d5 1f       	adc	r29, r21
 bd4:	ec 17       	cp	r30, r28
 bd6:	fd 07       	cpc	r31, r29
 bd8:	61 f4       	brne	.+24     	; 0xbf2 <free+0xbe>
 bda:	80 81       	ld	r24, Z
 bdc:	91 81       	ldd	r25, Z+1	; 0x01
 bde:	84 0f       	add	r24, r20
 be0:	95 1f       	adc	r25, r21
 be2:	02 96       	adiw	r24, 0x02	; 2
 be4:	e9 01       	movw	r28, r18
 be6:	99 83       	std	Y+1, r25	; 0x01
 be8:	88 83       	st	Y, r24
 bea:	82 81       	ldd	r24, Z+2	; 0x02
 bec:	93 81       	ldd	r25, Z+3	; 0x03
 bee:	9b 83       	std	Y+3, r25	; 0x03
 bf0:	8a 83       	std	Y+2, r24	; 0x02
 bf2:	e0 e0       	ldi	r30, 0x00	; 0
 bf4:	f0 e0       	ldi	r31, 0x00	; 0
 bf6:	12 96       	adiw	r26, 0x02	; 2
 bf8:	8d 91       	ld	r24, X+
 bfa:	9c 91       	ld	r25, X
 bfc:	13 97       	sbiw	r26, 0x03	; 3
 bfe:	00 97       	sbiw	r24, 0x00	; 0
 c00:	19 f0       	breq	.+6      	; 0xc08 <free+0xd4>
 c02:	fd 01       	movw	r30, r26
 c04:	dc 01       	movw	r26, r24
 c06:	f7 cf       	rjmp	.-18     	; 0xbf6 <free+0xc2>
 c08:	8d 91       	ld	r24, X+
 c0a:	9c 91       	ld	r25, X
 c0c:	11 97       	sbiw	r26, 0x01	; 1
 c0e:	9d 01       	movw	r18, r26
 c10:	2e 5f       	subi	r18, 0xFE	; 254
 c12:	3f 4f       	sbci	r19, 0xFF	; 255
 c14:	82 0f       	add	r24, r18
 c16:	93 1f       	adc	r25, r19
 c18:	20 91 22 02 	lds	r18, 0x0222	; 0x800222 <__brkval>
 c1c:	30 91 23 02 	lds	r19, 0x0223	; 0x800223 <__brkval+0x1>
 c20:	28 17       	cp	r18, r24
 c22:	39 07       	cpc	r19, r25
 c24:	69 f4       	brne	.+26     	; 0xc40 <free+0x10c>
 c26:	30 97       	sbiw	r30, 0x00	; 0
 c28:	29 f4       	brne	.+10     	; 0xc34 <free+0x100>
 c2a:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <__flp+0x1>
 c2e:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <__flp>
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <free+0x104>
 c34:	13 82       	std	Z+3, r1	; 0x03
 c36:	12 82       	std	Z+2, r1	; 0x02
 c38:	b0 93 23 02 	sts	0x0223, r27	; 0x800223 <__brkval+0x1>
 c3c:	a0 93 22 02 	sts	0x0222, r26	; 0x800222 <__brkval>
 c40:	df 91       	pop	r29
 c42:	cf 91       	pop	r28
 c44:	08 95       	ret

00000c46 <strnlen_P>:
 c46:	fc 01       	movw	r30, r24
 c48:	05 90       	lpm	r0, Z+
 c4a:	61 50       	subi	r22, 0x01	; 1
 c4c:	70 40       	sbci	r23, 0x00	; 0
 c4e:	01 10       	cpse	r0, r1
 c50:	d8 f7       	brcc	.-10     	; 0xc48 <strnlen_P+0x2>
 c52:	80 95       	com	r24
 c54:	90 95       	com	r25
 c56:	8e 0f       	add	r24, r30
 c58:	9f 1f       	adc	r25, r31
 c5a:	08 95       	ret

00000c5c <memset>:
 c5c:	dc 01       	movw	r26, r24
 c5e:	01 c0       	rjmp	.+2      	; 0xc62 <memset+0x6>
 c60:	6d 93       	st	X+, r22
 c62:	41 50       	subi	r20, 0x01	; 1
 c64:	50 40       	sbci	r21, 0x00	; 0
 c66:	e0 f7       	brcc	.-8      	; 0xc60 <memset+0x4>
 c68:	08 95       	ret

00000c6a <strnlen>:
 c6a:	fc 01       	movw	r30, r24
 c6c:	61 50       	subi	r22, 0x01	; 1
 c6e:	70 40       	sbci	r23, 0x00	; 0
 c70:	01 90       	ld	r0, Z+
 c72:	01 10       	cpse	r0, r1
 c74:	d8 f7       	brcc	.-10     	; 0xc6c <strnlen+0x2>
 c76:	80 95       	com	r24
 c78:	90 95       	com	r25
 c7a:	8e 0f       	add	r24, r30
 c7c:	9f 1f       	adc	r25, r31
 c7e:	08 95       	ret

00000c80 <fputc>:
 c80:	0f 93       	push	r16
 c82:	1f 93       	push	r17
 c84:	cf 93       	push	r28
 c86:	df 93       	push	r29
 c88:	fb 01       	movw	r30, r22
 c8a:	23 81       	ldd	r18, Z+3	; 0x03
 c8c:	21 fd       	sbrc	r18, 1
 c8e:	03 c0       	rjmp	.+6      	; 0xc96 <fputc+0x16>
 c90:	8f ef       	ldi	r24, 0xFF	; 255
 c92:	9f ef       	ldi	r25, 0xFF	; 255
 c94:	2c c0       	rjmp	.+88     	; 0xcee <fputc+0x6e>
 c96:	22 ff       	sbrs	r18, 2
 c98:	16 c0       	rjmp	.+44     	; 0xcc6 <fputc+0x46>
 c9a:	46 81       	ldd	r20, Z+6	; 0x06
 c9c:	57 81       	ldd	r21, Z+7	; 0x07
 c9e:	24 81       	ldd	r18, Z+4	; 0x04
 ca0:	35 81       	ldd	r19, Z+5	; 0x05
 ca2:	42 17       	cp	r20, r18
 ca4:	53 07       	cpc	r21, r19
 ca6:	44 f4       	brge	.+16     	; 0xcb8 <fputc+0x38>
 ca8:	a0 81       	ld	r26, Z
 caa:	b1 81       	ldd	r27, Z+1	; 0x01
 cac:	9d 01       	movw	r18, r26
 cae:	2f 5f       	subi	r18, 0xFF	; 255
 cb0:	3f 4f       	sbci	r19, 0xFF	; 255
 cb2:	31 83       	std	Z+1, r19	; 0x01
 cb4:	20 83       	st	Z, r18
 cb6:	8c 93       	st	X, r24
 cb8:	26 81       	ldd	r18, Z+6	; 0x06
 cba:	37 81       	ldd	r19, Z+7	; 0x07
 cbc:	2f 5f       	subi	r18, 0xFF	; 255
 cbe:	3f 4f       	sbci	r19, 0xFF	; 255
 cc0:	37 83       	std	Z+7, r19	; 0x07
 cc2:	26 83       	std	Z+6, r18	; 0x06
 cc4:	14 c0       	rjmp	.+40     	; 0xcee <fputc+0x6e>
 cc6:	8b 01       	movw	r16, r22
 cc8:	ec 01       	movw	r28, r24
 cca:	fb 01       	movw	r30, r22
 ccc:	00 84       	ldd	r0, Z+8	; 0x08
 cce:	f1 85       	ldd	r31, Z+9	; 0x09
 cd0:	e0 2d       	mov	r30, r0
 cd2:	09 95       	icall
 cd4:	89 2b       	or	r24, r25
 cd6:	e1 f6       	brne	.-72     	; 0xc90 <fputc+0x10>
 cd8:	d8 01       	movw	r26, r16
 cda:	16 96       	adiw	r26, 0x06	; 6
 cdc:	8d 91       	ld	r24, X+
 cde:	9c 91       	ld	r25, X
 ce0:	17 97       	sbiw	r26, 0x07	; 7
 ce2:	01 96       	adiw	r24, 0x01	; 1
 ce4:	17 96       	adiw	r26, 0x07	; 7
 ce6:	9c 93       	st	X, r25
 ce8:	8e 93       	st	-X, r24
 cea:	16 97       	sbiw	r26, 0x06	; 6
 cec:	ce 01       	movw	r24, r28
 cee:	df 91       	pop	r29
 cf0:	cf 91       	pop	r28
 cf2:	1f 91       	pop	r17
 cf4:	0f 91       	pop	r16
 cf6:	08 95       	ret

00000cf8 <__ultoa_invert>:
 cf8:	fa 01       	movw	r30, r20
 cfa:	aa 27       	eor	r26, r26
 cfc:	28 30       	cpi	r18, 0x08	; 8
 cfe:	51 f1       	breq	.+84     	; 0xd54 <__ultoa_invert+0x5c>
 d00:	20 31       	cpi	r18, 0x10	; 16
 d02:	81 f1       	breq	.+96     	; 0xd64 <__ultoa_invert+0x6c>
 d04:	e8 94       	clt
 d06:	6f 93       	push	r22
 d08:	6e 7f       	andi	r22, 0xFE	; 254
 d0a:	6e 5f       	subi	r22, 0xFE	; 254
 d0c:	7f 4f       	sbci	r23, 0xFF	; 255
 d0e:	8f 4f       	sbci	r24, 0xFF	; 255
 d10:	9f 4f       	sbci	r25, 0xFF	; 255
 d12:	af 4f       	sbci	r26, 0xFF	; 255
 d14:	b1 e0       	ldi	r27, 0x01	; 1
 d16:	3e d0       	rcall	.+124    	; 0xd94 <__ultoa_invert+0x9c>
 d18:	b4 e0       	ldi	r27, 0x04	; 4
 d1a:	3c d0       	rcall	.+120    	; 0xd94 <__ultoa_invert+0x9c>
 d1c:	67 0f       	add	r22, r23
 d1e:	78 1f       	adc	r23, r24
 d20:	89 1f       	adc	r24, r25
 d22:	9a 1f       	adc	r25, r26
 d24:	a1 1d       	adc	r26, r1
 d26:	68 0f       	add	r22, r24
 d28:	79 1f       	adc	r23, r25
 d2a:	8a 1f       	adc	r24, r26
 d2c:	91 1d       	adc	r25, r1
 d2e:	a1 1d       	adc	r26, r1
 d30:	6a 0f       	add	r22, r26
 d32:	71 1d       	adc	r23, r1
 d34:	81 1d       	adc	r24, r1
 d36:	91 1d       	adc	r25, r1
 d38:	a1 1d       	adc	r26, r1
 d3a:	20 d0       	rcall	.+64     	; 0xd7c <__ultoa_invert+0x84>
 d3c:	09 f4       	brne	.+2      	; 0xd40 <__ultoa_invert+0x48>
 d3e:	68 94       	set
 d40:	3f 91       	pop	r19
 d42:	2a e0       	ldi	r18, 0x0A	; 10
 d44:	26 9f       	mul	r18, r22
 d46:	11 24       	eor	r1, r1
 d48:	30 19       	sub	r19, r0
 d4a:	30 5d       	subi	r19, 0xD0	; 208
 d4c:	31 93       	st	Z+, r19
 d4e:	de f6       	brtc	.-74     	; 0xd06 <__ultoa_invert+0xe>
 d50:	cf 01       	movw	r24, r30
 d52:	08 95       	ret
 d54:	46 2f       	mov	r20, r22
 d56:	47 70       	andi	r20, 0x07	; 7
 d58:	40 5d       	subi	r20, 0xD0	; 208
 d5a:	41 93       	st	Z+, r20
 d5c:	b3 e0       	ldi	r27, 0x03	; 3
 d5e:	0f d0       	rcall	.+30     	; 0xd7e <__ultoa_invert+0x86>
 d60:	c9 f7       	brne	.-14     	; 0xd54 <__ultoa_invert+0x5c>
 d62:	f6 cf       	rjmp	.-20     	; 0xd50 <__ultoa_invert+0x58>
 d64:	46 2f       	mov	r20, r22
 d66:	4f 70       	andi	r20, 0x0F	; 15
 d68:	40 5d       	subi	r20, 0xD0	; 208
 d6a:	4a 33       	cpi	r20, 0x3A	; 58
 d6c:	18 f0       	brcs	.+6      	; 0xd74 <__ultoa_invert+0x7c>
 d6e:	49 5d       	subi	r20, 0xD9	; 217
 d70:	31 fd       	sbrc	r19, 1
 d72:	40 52       	subi	r20, 0x20	; 32
 d74:	41 93       	st	Z+, r20
 d76:	02 d0       	rcall	.+4      	; 0xd7c <__ultoa_invert+0x84>
 d78:	a9 f7       	brne	.-22     	; 0xd64 <__ultoa_invert+0x6c>
 d7a:	ea cf       	rjmp	.-44     	; 0xd50 <__ultoa_invert+0x58>
 d7c:	b4 e0       	ldi	r27, 0x04	; 4
 d7e:	a6 95       	lsr	r26
 d80:	97 95       	ror	r25
 d82:	87 95       	ror	r24
 d84:	77 95       	ror	r23
 d86:	67 95       	ror	r22
 d88:	ba 95       	dec	r27
 d8a:	c9 f7       	brne	.-14     	; 0xd7e <__ultoa_invert+0x86>
 d8c:	00 97       	sbiw	r24, 0x00	; 0
 d8e:	61 05       	cpc	r22, r1
 d90:	71 05       	cpc	r23, r1
 d92:	08 95       	ret
 d94:	9b 01       	movw	r18, r22
 d96:	ac 01       	movw	r20, r24
 d98:	0a 2e       	mov	r0, r26
 d9a:	06 94       	lsr	r0
 d9c:	57 95       	ror	r21
 d9e:	47 95       	ror	r20
 da0:	37 95       	ror	r19
 da2:	27 95       	ror	r18
 da4:	ba 95       	dec	r27
 da6:	c9 f7       	brne	.-14     	; 0xd9a <__ultoa_invert+0xa2>
 da8:	62 0f       	add	r22, r18
 daa:	73 1f       	adc	r23, r19
 dac:	84 1f       	adc	r24, r20
 dae:	95 1f       	adc	r25, r21
 db0:	a0 1d       	adc	r26, r0
 db2:	08 95       	ret

00000db4 <__prologue_saves__>:
 db4:	2f 92       	push	r2
 db6:	3f 92       	push	r3
 db8:	4f 92       	push	r4
 dba:	5f 92       	push	r5
 dbc:	6f 92       	push	r6
 dbe:	7f 92       	push	r7
 dc0:	8f 92       	push	r8
 dc2:	9f 92       	push	r9
 dc4:	af 92       	push	r10
 dc6:	bf 92       	push	r11
 dc8:	cf 92       	push	r12
 dca:	df 92       	push	r13
 dcc:	ef 92       	push	r14
 dce:	ff 92       	push	r15
 dd0:	0f 93       	push	r16
 dd2:	1f 93       	push	r17
 dd4:	cf 93       	push	r28
 dd6:	df 93       	push	r29
 dd8:	cd b7       	in	r28, 0x3d	; 61
 dda:	de b7       	in	r29, 0x3e	; 62
 ddc:	ca 1b       	sub	r28, r26
 dde:	db 0b       	sbc	r29, r27
 de0:	0f b6       	in	r0, 0x3f	; 63
 de2:	f8 94       	cli
 de4:	de bf       	out	0x3e, r29	; 62
 de6:	0f be       	out	0x3f, r0	; 63
 de8:	cd bf       	out	0x3d, r28	; 61
 dea:	09 94       	ijmp

00000dec <__epilogue_restores__>:
 dec:	2a 88       	ldd	r2, Y+18	; 0x12
 dee:	39 88       	ldd	r3, Y+17	; 0x11
 df0:	48 88       	ldd	r4, Y+16	; 0x10
 df2:	5f 84       	ldd	r5, Y+15	; 0x0f
 df4:	6e 84       	ldd	r6, Y+14	; 0x0e
 df6:	7d 84       	ldd	r7, Y+13	; 0x0d
 df8:	8c 84       	ldd	r8, Y+12	; 0x0c
 dfa:	9b 84       	ldd	r9, Y+11	; 0x0b
 dfc:	aa 84       	ldd	r10, Y+10	; 0x0a
 dfe:	b9 84       	ldd	r11, Y+9	; 0x09
 e00:	c8 84       	ldd	r12, Y+8	; 0x08
 e02:	df 80       	ldd	r13, Y+7	; 0x07
 e04:	ee 80       	ldd	r14, Y+6	; 0x06
 e06:	fd 80       	ldd	r15, Y+5	; 0x05
 e08:	0c 81       	ldd	r16, Y+4	; 0x04
 e0a:	1b 81       	ldd	r17, Y+3	; 0x03
 e0c:	aa 81       	ldd	r26, Y+2	; 0x02
 e0e:	b9 81       	ldd	r27, Y+1	; 0x01
 e10:	ce 0f       	add	r28, r30
 e12:	d1 1d       	adc	r29, r1
 e14:	0f b6       	in	r0, 0x3f	; 63
 e16:	f8 94       	cli
 e18:	de bf       	out	0x3e, r29	; 62
 e1a:	0f be       	out	0x3f, r0	; 63
 e1c:	cd bf       	out	0x3d, r28	; 61
 e1e:	ed 01       	movw	r28, r26
 e20:	08 95       	ret

00000e22 <_exit>:
 e22:	f8 94       	cli

00000e24 <__stop_program>:
 e24:	ff cf       	rjmp	.-2      	; 0xe24 <__stop_program>


ping_pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  00001094  00001128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001094  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008001be  008001be  000011e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020e4  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001081  00000000  00000000  0000358c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001142  00000000  00000000  0000460d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00005750  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000797  00000000  00000000  00005bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3f  00000000  00000000  00006367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00006fa6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 e9       	ldi	r30, 0x94	; 148
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 3b       	cpi	r26, 0xBE	; 190
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	21 e0       	ldi	r18, 0x01	; 1
      94:	ae eb       	ldi	r26, 0xBE	; 190
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ac 3c       	cpi	r26, 0xCC	; 204
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
      a6:	0c 94 48 08 	jmp	0x1090	; 0x1090 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_Init>:

}
*/

void ADC_Init() {
	DDRB = (1 << DDB1);
      ae:	82 e0       	ldi	r24, 0x02	; 2
      b0:	87 bb       	out	0x17, r24	; 23
	OCR2 = 128;
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	82 bd       	out	0x22, r24	; 34
	TCCR2 |= (1 << COM21);
      b6:	87 b5       	in	r24, 0x27	; 39
      b8:	80 62       	ori	r24, 0x20	; 32
      ba:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << WGM21) | (1 << WGM20);
      bc:	87 b5       	in	r24, 0x27	; 39
      be:	88 64       	ori	r24, 0x48	; 72
      c0:	87 bd       	out	0x27, r24	; 39
	TCCR2 |= (1 << CS20);
      c2:	87 b5       	in	r24, 0x27	; 39
      c4:	81 60       	ori	r24, 0x01	; 1
      c6:	87 bd       	out	0x27, r24	; 39
      c8:	08 95       	ret

000000ca <ADC_Read>:
int ADC_Read (int channel) {
	//Pulse on WR
	

	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
      ca:	21 e0       	ldi	r18, 0x01	; 1
      cc:	20 93 00 14 	sts	0x1400, r18	; 0x801400 <__bss_end+0x1234>
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
	volatile char * ext_mem = ( char *) 0x0000 ;
	ext_mem [ 0x1400 ]= 1;
	int Tconv = (9*4*2)/4912000;
	_delay_ms(Tconv);

	int  value=0;
      d4:	60 e0       	ldi	r22, 0x00	; 0
      d6:	70 e0       	ldi	r23, 0x00	; 0
	
	//Pulses on RD
	for (int i=0;i<4;i++){
      d8:	0c c0       	rjmp	.+24     	; 0xf2 <ADC_Read+0x28>
		uint8_t  read = ext_mem[0x1400];
      da:	40 91 00 14 	lds	r20, 0x1400	; 0x801400 <__bss_end+0x1234>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      de:	5c e3       	ldi	r21, 0x3C	; 60
      e0:	5a 95       	dec	r21
      e2:	f1 f7       	brne	.-4      	; 0xe0 <ADC_Read+0x16>
		_delay_ms(0.18);
		if (i == channel){
      e4:	28 17       	cp	r18, r24
      e6:	39 07       	cpc	r19, r25
      e8:	11 f4       	brne	.+4      	; 0xee <ADC_Read+0x24>
			 value = read;
      ea:	64 2f       	mov	r22, r20
      ec:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(Tconv);

	int  value=0;
	
	//Pulses on RD
	for (int i=0;i<4;i++){
      ee:	2f 5f       	subi	r18, 0xFF	; 255
      f0:	3f 4f       	sbci	r19, 0xFF	; 255
      f2:	24 30       	cpi	r18, 0x04	; 4
      f4:	31 05       	cpc	r19, r1
      f6:	8c f3       	brlt	.-30     	; 0xda <ADC_Read+0x10>
		if (i == channel){
			 value = read;
		}
	}
	return value;
}
      f8:	cb 01       	movw	r24, r22
      fa:	08 95       	ret

000000fc <can_init>:
#include "mcp2515.h"
#include "SPI.h"


void can_init() {
	mcp_init();
      fc:	0e 94 fd 02 	call	0x5fa	; 0x5fa <mcp_init>
	mcp_write(MCP_CNF1, 0x03);
     100:	63 e0       	ldi	r22, 0x03	; 3
     102:	8a e2       	ldi	r24, 0x2A	; 42
     104:	0e 94 b4 02 	call	0x568	; 0x568 <mcp_write>
	mcp_write(MCP_CNF2, 0xb1);
     108:	61 eb       	ldi	r22, 0xB1	; 177
     10a:	89 e2       	ldi	r24, 0x29	; 41
     10c:	0e 94 b4 02 	call	0x568	; 0x568 <mcp_write>
	mcp_write(MCP_CNF3, 0x05);
     110:	65 e0       	ldi	r22, 0x05	; 5
     112:	88 e2       	ldi	r24, 0x28	; 40
     114:	0e 94 b4 02 	call	0x568	; 0x568 <mcp_write>

	
	mcp_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     118:	40 e0       	ldi	r20, 0x00	; 0
     11a:	60 ee       	ldi	r22, 0xE0	; 224
     11c:	8f e0       	ldi	r24, 0x0F	; 15
     11e:	0e 94 13 03 	call	0x626	; 0x626 <mcp_bit_modify>
     122:	08 95       	ret

00000124 <can_send>:
}

	
void can_send(can_message* message) {  //TODO : Synchro clock noeud
     124:	0f 93       	push	r16
     126:	1f 93       	push	r17
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	8c 01       	movw	r16, r24
	mcp_write(MCP_TXB0SIDH, message->id >> 3);
     12e:	fc 01       	movw	r30, r24
     130:	60 81       	ld	r22, Z
     132:	71 81       	ldd	r23, Z+1	; 0x01
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	76 95       	lsr	r23
     13a:	67 95       	ror	r22
     13c:	76 95       	lsr	r23
     13e:	67 95       	ror	r22
     140:	81 e3       	ldi	r24, 0x31	; 49
     142:	0e 94 b4 02 	call	0x568	; 0x568 <mcp_write>
	mcp_write(MCP_TXB0SIDL, message->id << 5);
     146:	f8 01       	movw	r30, r16
     148:	60 81       	ld	r22, Z
     14a:	62 95       	swap	r22
     14c:	66 0f       	add	r22, r22
     14e:	60 7e       	andi	r22, 0xE0	; 224
     150:	82 e3       	ldi	r24, 0x32	; 50
     152:	0e 94 b4 02 	call	0x568	; 0x568 <mcp_write>
	mcp_write(MCP_TXB0DLC, message->length);
     156:	f8 01       	movw	r30, r16
     158:	62 81       	ldd	r22, Z+2	; 0x02
     15a:	85 e3       	ldi	r24, 0x35	; 53
     15c:	0e 94 b4 02 	call	0x568	; 0x568 <mcp_write>
	
	for(int i = 0; i < message->length; i++) {
     160:	c0 e0       	ldi	r28, 0x00	; 0
     162:	d0 e0       	ldi	r29, 0x00	; 0
     164:	09 c0       	rjmp	.+18     	; 0x178 <can_send+0x54>
		mcp_write(MCP_TXB0D0 + (uint8_t)i, message->data[i]);
     166:	f8 01       	movw	r30, r16
     168:	ec 0f       	add	r30, r28
     16a:	fd 1f       	adc	r31, r29
     16c:	63 81       	ldd	r22, Z+3	; 0x03
     16e:	8c 2f       	mov	r24, r28
     170:	8a 5c       	subi	r24, 0xCA	; 202
     172:	0e 94 b4 02 	call	0x568	; 0x568 <mcp_write>
void can_send(can_message* message) {  //TODO : Synchro clock noeud
	mcp_write(MCP_TXB0SIDH, message->id >> 3);
	mcp_write(MCP_TXB0SIDL, message->id << 5);
	mcp_write(MCP_TXB0DLC, message->length);
	
	for(int i = 0; i < message->length; i++) {
     176:	21 96       	adiw	r28, 0x01	; 1
     178:	f8 01       	movw	r30, r16
     17a:	82 81       	ldd	r24, Z+2	; 0x02
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	c8 17       	cp	r28, r24
     180:	d9 07       	cpc	r29, r25
     182:	8c f3       	brlt	.-30     	; 0x166 <can_send+0x42>
		mcp_write(MCP_TXB0D0 + (uint8_t)i, message->data[i]);
	}
	
	mcp_request_send(0);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 ca 02 	call	0x594	; 0x594 <mcp_request_send>
	
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <get_joystick_dir>:

	
	return pos;
}

joystick_dir get_joystick_dir() {
     196:	cf 93       	push	r28
	joystick_dir dir;
	joystick_pos pos;
	pos.x = ADC_Read(1);
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     1a0:	c8 2f       	mov	r28, r24
	pos.y = ADC_Read(0);
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
	dir = NEUTRAL;
	
	
	if (abs(mean_pos.x - pos.x) < 10 & abs(mean_pos.y - pos.y) < 10) 
     1aa:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <__data_end>
     1ae:	6c 2f       	mov	r22, r28
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	26 1b       	sub	r18, r22
     1b6:	37 0b       	sbc	r19, r23
     1b8:	a9 01       	movw	r20, r18
     1ba:	22 f4       	brpl	.+8      	; 0x1c4 <get_joystick_dir+0x2e>
     1bc:	44 27       	eor	r20, r20
     1be:	55 27       	eor	r21, r21
     1c0:	42 1b       	sub	r20, r18
     1c2:	53 0b       	sbc	r21, r19
     1c4:	fa 01       	movw	r30, r20
     1c6:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <__data_end+0x1>
     1ca:	a8 2f       	mov	r26, r24
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	2a 1b       	sub	r18, r26
     1d2:	3b 0b       	sbc	r19, r27
     1d4:	a9 01       	movw	r20, r18
     1d6:	22 f4       	brpl	.+8      	; 0x1e0 <get_joystick_dir+0x4a>
     1d8:	44 27       	eor	r20, r20
     1da:	55 27       	eor	r21, r21
     1dc:	42 1b       	sub	r20, r18
     1de:	53 0b       	sbc	r21, r19
     1e0:	21 e0       	ldi	r18, 0x01	; 1
     1e2:	3a 97       	sbiw	r30, 0x0a	; 10
     1e4:	0c f0       	brlt	.+2      	; 0x1e8 <get_joystick_dir+0x52>
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	4a 30       	cpi	r20, 0x0A	; 10
     1ec:	51 05       	cpc	r21, r1
     1ee:	0c f0       	brlt	.+2      	; 0x1f2 <get_joystick_dir+0x5c>
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	92 23       	and	r25, r18
     1f4:	19 f5       	brne	.+70     	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
	{
		return NEUTRAL;
	} else {
		if (abs(pos.x - mean_pos.x) > abs(pos.y - mean_pos.y)) {
     1f6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <__data_end>
     1fa:	69 1b       	sub	r22, r25
     1fc:	71 09       	sbc	r23, r1
     1fe:	9b 01       	movw	r18, r22
     200:	22 f4       	brpl	.+8      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
     202:	22 27       	eor	r18, r18
     204:	33 27       	eor	r19, r19
     206:	26 1b       	sub	r18, r22
     208:	37 0b       	sbc	r19, r23
     20a:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__data_end+0x1>
     20e:	a9 1b       	sub	r26, r25
     210:	b1 09       	sbc	r27, r1
     212:	ad 01       	movw	r20, r26
     214:	22 f4       	brpl	.+8      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
     216:	44 27       	eor	r20, r20
     218:	55 27       	eor	r21, r21
     21a:	4a 1b       	sub	r20, r26
     21c:	5b 0b       	sbc	r21, r27
     21e:	42 17       	cp	r20, r18
     220:	53 07       	cpc	r21, r19
     222:	34 f4       	brge	.+12     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
			if (pos.x > mean_pos.x) {
     224:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
     228:	8c 17       	cp	r24, r28
     22a:	50 f4       	brcc	.+20     	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
				return RIGHT;
     22c:	83 e0       	ldi	r24, 0x03	; 3
     22e:	0b c0       	rjmp	.+22     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
			} else {
				return LEFT;
			}
		} else {
			if (pos.y > mean_pos.y) {
     230:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__data_end+0x1>
     234:	98 17       	cp	r25, r24
     236:	30 f4       	brcc	.+12     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
				return UP;
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	05 c0       	rjmp	.+10     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
	dir = NEUTRAL;
	
	
	if (abs(mean_pos.x - pos.x) < 10 & abs(mean_pos.y - pos.y) < 10) 
	{
		return NEUTRAL;
     23c:	84 e0       	ldi	r24, 0x04	; 4
     23e:	03 c0       	rjmp	.+6      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
	} else {
		if (abs(pos.x - mean_pos.x) > abs(pos.y - mean_pos.y)) {
			if (pos.x > mean_pos.x) {
				return RIGHT;
			} else {
				return LEFT;
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	01 c0       	rjmp	.+2      	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
			}
		} else {
			if (pos.y > mean_pos.y) {
				return UP;
			} else {
				return DOWN;
     244:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return dir;
	
}
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <get_joystick_pos>:
	mean_pos.y = ADC_Read(0);
	
	return mean_pos;
}

joystick_pos get_joystick_pos(){
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
	joystick_pos pos;
	joystick_dir dir;
	
	dir = get_joystick_dir();
     24e:	0e 94 cb 00 	call	0x196	; 0x196 <get_joystick_dir>
	
	
	switch (dir)
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	09 f4       	brne	.+2      	; 0x258 <get_joystick_pos+0xe>
     256:	96 c0       	rjmp	.+300    	; 0x384 <get_joystick_pos+0x13a>
     258:	30 f4       	brcc	.+12     	; 0x266 <get_joystick_pos+0x1c>
     25a:	88 23       	and	r24, r24
     25c:	59 f0       	breq	.+22     	; 0x274 <get_joystick_pos+0x2a>
     25e:	81 30       	cpi	r24, 0x01	; 1
     260:	09 f4       	brne	.+2      	; 0x264 <get_joystick_pos+0x1a>
     262:	da c0       	rjmp	.+436    	; 0x418 <__DATA_REGION_LENGTH__+0x18>
     264:	2d c1       	rjmp	.+602    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
     266:	83 30       	cpi	r24, 0x03	; 3
     268:	09 f4       	brne	.+2      	; 0x26c <get_joystick_pos+0x22>
     26a:	48 c0       	rjmp	.+144    	; 0x2fc <get_joystick_pos+0xb2>
     26c:	84 30       	cpi	r24, 0x04	; 4
     26e:	09 f4       	brne	.+2      	; 0x272 <get_joystick_pos+0x28>
     270:	1d c1       	rjmp	.+570    	; 0x4ac <__DATA_REGION_LENGTH__+0xac>
     272:	26 c1       	rjmp	.+588    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
	{
	case UP:
		pos.y = (uint8_t)abs(((ADC_Read(0) - mean_pos.y) * 100) / (223 - mean_pos.y));
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     27c:	ee eb       	ldi	r30, 0xBE	; 190
     27e:	f1 e0       	ldi	r31, 0x01	; 1
     280:	21 81       	ldd	r18, Z+1	; 0x01
     282:	82 1b       	sub	r24, r18
     284:	91 09       	sbc	r25, r1
     286:	9c 01       	movw	r18, r24
     288:	44 e6       	ldi	r20, 0x64	; 100
     28a:	42 9f       	mul	r20, r18
     28c:	c0 01       	movw	r24, r0
     28e:	43 9f       	mul	r20, r19
     290:	90 0d       	add	r25, r0
     292:	11 24       	eor	r1, r1
     294:	21 81       	ldd	r18, Z+1	; 0x01
     296:	6f ed       	ldi	r22, 0xDF	; 223
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	62 1b       	sub	r22, r18
     29c:	71 09       	sbc	r23, r1
     29e:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
     2a2:	cb 01       	movw	r24, r22
     2a4:	99 23       	and	r25, r25
     2a6:	24 f4       	brge	.+8      	; 0x2b0 <get_joystick_pos+0x66>
     2a8:	88 27       	eor	r24, r24
     2aa:	99 27       	eor	r25, r25
     2ac:	86 1b       	sub	r24, r22
     2ae:	97 0b       	sbc	r25, r23
     2b0:	d8 2f       	mov	r29, r24
		pos.x = (uint8_t)abs(((ADC_Read(1) - mean_pos.x) * 100) / mean_pos.x);
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     2ba:	ee eb       	ldi	r30, 0xBE	; 190
     2bc:	f1 e0       	ldi	r31, 0x01	; 1
     2be:	20 81       	ld	r18, Z
     2c0:	82 1b       	sub	r24, r18
     2c2:	91 09       	sbc	r25, r1
     2c4:	9c 01       	movw	r18, r24
     2c6:	44 e6       	ldi	r20, 0x64	; 100
     2c8:	42 9f       	mul	r20, r18
     2ca:	c0 01       	movw	r24, r0
     2cc:	43 9f       	mul	r20, r19
     2ce:	90 0d       	add	r25, r0
     2d0:	11 24       	eor	r1, r1
     2d2:	60 81       	ld	r22, Z
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
     2da:	cb 01       	movw	r24, r22
     2dc:	99 23       	and	r25, r25
     2de:	24 f4       	brge	.+8      	; 0x2e8 <get_joystick_pos+0x9e>
     2e0:	88 27       	eor	r24, r24
     2e2:	99 27       	eor	r25, r25
     2e4:	86 1b       	sub	r24, r22
     2e6:	97 0b       	sbc	r25, r23
     2e8:	c8 2f       	mov	r28, r24
		printf("Direction : UP ");
     2ea:	86 e0       	ldi	r24, 0x06	; 6
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	9f 93       	push	r25
     2f0:	8f 93       	push	r24
     2f2:	0e 94 26 04 	call	0x84c	; 0x84c <printf>
		break;
     2f6:	0f 90       	pop	r0
     2f8:	0f 90       	pop	r0
     2fa:	e2 c0       	rjmp	.+452    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
	case RIGHT:
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / (223 - mean_pos.x));
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     304:	ee eb       	ldi	r30, 0xBE	; 190
     306:	f1 e0       	ldi	r31, 0x01	; 1
     308:	20 81       	ld	r18, Z
     30a:	82 1b       	sub	r24, r18
     30c:	91 09       	sbc	r25, r1
     30e:	9c 01       	movw	r18, r24
     310:	44 e6       	ldi	r20, 0x64	; 100
     312:	42 9f       	mul	r20, r18
     314:	c0 01       	movw	r24, r0
     316:	43 9f       	mul	r20, r19
     318:	90 0d       	add	r25, r0
     31a:	11 24       	eor	r1, r1
     31c:	20 81       	ld	r18, Z
     31e:	6f ed       	ldi	r22, 0xDF	; 223
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	62 1b       	sub	r22, r18
     324:	71 09       	sbc	r23, r1
     326:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
     32a:	cb 01       	movw	r24, r22
     32c:	99 23       	and	r25, r25
     32e:	24 f4       	brge	.+8      	; 0x338 <get_joystick_pos+0xee>
     330:	88 27       	eor	r24, r24
     332:	99 27       	eor	r25, r25
     334:	86 1b       	sub	r24, r22
     336:	97 0b       	sbc	r25, r23
     338:	c8 2f       	mov	r28, r24
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / mean_pos.y);
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     342:	ee eb       	ldi	r30, 0xBE	; 190
     344:	f1 e0       	ldi	r31, 0x01	; 1
     346:	21 81       	ldd	r18, Z+1	; 0x01
     348:	82 1b       	sub	r24, r18
     34a:	91 09       	sbc	r25, r1
     34c:	9c 01       	movw	r18, r24
     34e:	44 e6       	ldi	r20, 0x64	; 100
     350:	42 9f       	mul	r20, r18
     352:	c0 01       	movw	r24, r0
     354:	43 9f       	mul	r20, r19
     356:	90 0d       	add	r25, r0
     358:	11 24       	eor	r1, r1
     35a:	61 81       	ldd	r22, Z+1	; 0x01
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
     362:	cb 01       	movw	r24, r22
     364:	99 23       	and	r25, r25
     366:	24 f4       	brge	.+8      	; 0x370 <get_joystick_pos+0x126>
     368:	88 27       	eor	r24, r24
     36a:	99 27       	eor	r25, r25
     36c:	86 1b       	sub	r24, r22
     36e:	97 0b       	sbc	r25, r23
     370:	d8 2f       	mov	r29, r24
		printf("Direction : RIGHT ");
     372:	86 e1       	ldi	r24, 0x16	; 22
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	9f 93       	push	r25
     378:	8f 93       	push	r24
     37a:	0e 94 26 04 	call	0x84c	; 0x84c <printf>
		break;
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	9e c0       	rjmp	.+316    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
	case LEFT:
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / abs(3 - mean_pos.x));
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     38c:	ee eb       	ldi	r30, 0xBE	; 190
     38e:	f1 e0       	ldi	r31, 0x01	; 1
     390:	20 81       	ld	r18, Z
     392:	82 1b       	sub	r24, r18
     394:	91 09       	sbc	r25, r1
     396:	9c 01       	movw	r18, r24
     398:	44 e6       	ldi	r20, 0x64	; 100
     39a:	42 9f       	mul	r20, r18
     39c:	c0 01       	movw	r24, r0
     39e:	43 9f       	mul	r20, r19
     3a0:	90 0d       	add	r25, r0
     3a2:	11 24       	eor	r1, r1
     3a4:	40 81       	ld	r20, Z
     3a6:	23 e0       	ldi	r18, 0x03	; 3
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	24 1b       	sub	r18, r20
     3ac:	31 09       	sbc	r19, r1
     3ae:	b9 01       	movw	r22, r18
     3b0:	22 f4       	brpl	.+8      	; 0x3ba <get_joystick_pos+0x170>
     3b2:	66 27       	eor	r22, r22
     3b4:	77 27       	eor	r23, r23
     3b6:	62 1b       	sub	r22, r18
     3b8:	73 0b       	sbc	r23, r19
     3ba:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
     3be:	cb 01       	movw	r24, r22
     3c0:	99 23       	and	r25, r25
     3c2:	24 f4       	brge	.+8      	; 0x3cc <get_joystick_pos+0x182>
     3c4:	88 27       	eor	r24, r24
     3c6:	99 27       	eor	r25, r25
     3c8:	86 1b       	sub	r24, r22
     3ca:	97 0b       	sbc	r25, r23
     3cc:	c8 2f       	mov	r28, r24
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / mean_pos.y);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     3d6:	ee eb       	ldi	r30, 0xBE	; 190
     3d8:	f1 e0       	ldi	r31, 0x01	; 1
     3da:	21 81       	ldd	r18, Z+1	; 0x01
     3dc:	82 1b       	sub	r24, r18
     3de:	91 09       	sbc	r25, r1
     3e0:	9c 01       	movw	r18, r24
     3e2:	44 e6       	ldi	r20, 0x64	; 100
     3e4:	42 9f       	mul	r20, r18
     3e6:	c0 01       	movw	r24, r0
     3e8:	43 9f       	mul	r20, r19
     3ea:	90 0d       	add	r25, r0
     3ec:	11 24       	eor	r1, r1
     3ee:	61 81       	ldd	r22, Z+1	; 0x01
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
     3f6:	cb 01       	movw	r24, r22
     3f8:	99 23       	and	r25, r25
     3fa:	24 f4       	brge	.+8      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
     3fc:	88 27       	eor	r24, r24
     3fe:	99 27       	eor	r25, r25
     400:	86 1b       	sub	r24, r22
     402:	97 0b       	sbc	r25, r23
     404:	d8 2f       	mov	r29, r24
		printf("Direction : LEFT ");
     406:	89 e2       	ldi	r24, 0x29	; 41
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	9f 93       	push	r25
     40c:	8f 93       	push	r24
     40e:	0e 94 26 04 	call	0x84c	; 0x84c <printf>
		break;
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	54 c0       	rjmp	.+168    	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
	case DOWN:
		pos.y = (int)abs(((ADC_Read(0) - mean_pos.y) * 100) / abs(3 - mean_pos.y));
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     420:	ee eb       	ldi	r30, 0xBE	; 190
     422:	f1 e0       	ldi	r31, 0x01	; 1
     424:	21 81       	ldd	r18, Z+1	; 0x01
     426:	82 1b       	sub	r24, r18
     428:	91 09       	sbc	r25, r1
     42a:	9c 01       	movw	r18, r24
     42c:	44 e6       	ldi	r20, 0x64	; 100
     42e:	42 9f       	mul	r20, r18
     430:	c0 01       	movw	r24, r0
     432:	43 9f       	mul	r20, r19
     434:	90 0d       	add	r25, r0
     436:	11 24       	eor	r1, r1
     438:	41 81       	ldd	r20, Z+1	; 0x01
     43a:	23 e0       	ldi	r18, 0x03	; 3
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	24 1b       	sub	r18, r20
     440:	31 09       	sbc	r19, r1
     442:	b9 01       	movw	r22, r18
     444:	22 f4       	brpl	.+8      	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
     446:	66 27       	eor	r22, r22
     448:	77 27       	eor	r23, r23
     44a:	62 1b       	sub	r22, r18
     44c:	73 0b       	sbc	r23, r19
     44e:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
     452:	cb 01       	movw	r24, r22
     454:	99 23       	and	r25, r25
     456:	24 f4       	brge	.+8      	; 0x460 <__DATA_REGION_LENGTH__+0x60>
     458:	88 27       	eor	r24, r24
     45a:	99 27       	eor	r25, r25
     45c:	86 1b       	sub	r24, r22
     45e:	97 0b       	sbc	r25, r23
     460:	d8 2f       	mov	r29, r24
		pos.x = (int)abs(((ADC_Read(1) - mean_pos.x) * 100) / mean_pos.x);
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 65 00 	call	0xca	; 0xca <ADC_Read>
     46a:	ee eb       	ldi	r30, 0xBE	; 190
     46c:	f1 e0       	ldi	r31, 0x01	; 1
     46e:	20 81       	ld	r18, Z
     470:	82 1b       	sub	r24, r18
     472:	91 09       	sbc	r25, r1
     474:	9c 01       	movw	r18, r24
     476:	44 e6       	ldi	r20, 0x64	; 100
     478:	42 9f       	mul	r20, r18
     47a:	c0 01       	movw	r24, r0
     47c:	43 9f       	mul	r20, r19
     47e:	90 0d       	add	r25, r0
     480:	11 24       	eor	r1, r1
     482:	60 81       	ld	r22, Z
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodhi4>
     48a:	cb 01       	movw	r24, r22
     48c:	99 23       	and	r25, r25
     48e:	24 f4       	brge	.+8      	; 0x498 <__DATA_REGION_LENGTH__+0x98>
     490:	88 27       	eor	r24, r24
     492:	99 27       	eor	r25, r25
     494:	86 1b       	sub	r24, r22
     496:	97 0b       	sbc	r25, r23
     498:	c8 2f       	mov	r28, r24
		printf("Direction : DOWN ");
     49a:	8b e3       	ldi	r24, 0x3B	; 59
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
     4a2:	0e 94 26 04 	call	0x84c	; 0x84c <printf>
		break;
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0a c0       	rjmp	.+20     	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
	case NEUTRAL:
		pos.x = 0;
     4ac:	c0 e0       	ldi	r28, 0x00	; 0
		pos.y = 0;
     4ae:	d0 e0       	ldi	r29, 0x00	; 0
		printf("Direction : NEUTRE ");
     4b0:	8d e4       	ldi	r24, 0x4D	; 77
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	9f 93       	push	r25
     4b6:	8f 93       	push	r24
     4b8:	0e 94 26 04 	call	0x84c	; 0x84c <printf>
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
	}
	

	
	return pos;
}
     4c0:	8c 2f       	mov	r24, r28
     4c2:	9d 2f       	mov	r25, r29
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	08 95       	ret

000004ca <main>:
#define FOSC 4915200// Clock Speed
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

int main(void)
{
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	2b 97       	sbiw	r28, 0x0b	; 11
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	de bf       	out	0x3e, r29	; 62
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	cd bf       	out	0x3d, r28	; 61
			

	//Drivers init
	UART_Init(MYUBRR);
     4de:	8f e1       	ldi	r24, 0x1F	; 31
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 a6 03 	call	0x74c	; 0x74c <UART_Init>
	SRAM_Init();
     4e6:	0e 94 93 03 	call	0x726	; 0x726 <SRAM_Init>
	ADC_Init();
     4ea:	0e 94 57 00 	call	0xae	; 0xae <ADC_Init>
	//joystick_calibrate();
	OLED_init();
     4ee:	0e 94 34 03 	call	0x668	; 0x668 <OLED_init>
	can_init();
     4f2:	0e 94 7e 00 	call	0xfc	; 0xfc <can_init>
	//OLED_test();
	//OLED_home();
	//OLED_score();
	//OLED_scenario();
	////Ports setting 
	DDRE = 0b11111111;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	86 b9       	out	0x06, r24	; 6
    //DDRA = 0b11111111; 
	//DDRD |= 0b11000000;
	//DDRC = DDRC | 0b00001111;
	PORTE = 0b00000010;
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	87 b9       	out	0x07, r24	; 7
	//SRAM_mapping_test();
  
  
	can_message to_send;
	
	to_send.id = 43;
     4fe:	8b e2       	ldi	r24, 0x2B	; 43
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	9a 83       	std	Y+2, r25	; 0x02
     504:	89 83       	std	Y+1, r24	; 0x01
	to_send.length = 3;
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	8b 83       	std	Y+3, r24	; 0x03
		 //printf("RECEIVE => length:  %d \n\rid: %d \n\rdata: %s \n\r", receive.length, receive.id, receive.data);
		 
		 //printf("----------------------------------------------------------------------------------------------------------------------\n\r");
		joystick_pos pos;
		
		pos = get_joystick_pos();
     50a:	0e 94 25 01 	call	0x24a	; 0x24a <get_joystick_pos>
     50e:	08 2f       	mov	r16, r24
     510:	19 2f       	mov	r17, r25
		//to_send.data[0] = pos.x;
		uint8_t a = 0x12;
		to_send.data[0] = pos.y;
     512:	9c 83       	std	Y+4, r25	; 0x04
		to_send.data[1] = pos.x;
     514:	8d 83       	std	Y+5, r24	; 0x05
		to_send.data[2] = 'F';
     516:	86 e4       	ldi	r24, 0x46	; 70
     518:	8e 83       	std	Y+6, r24	; 0x06
		can_send(&to_send);
     51a:	ce 01       	movw	r24, r28
     51c:	01 96       	adiw	r24, 0x01	; 1
     51e:	0e 94 92 00 	call	0x124	; 0x124 <can_send>
		//send_joystick_pos(&to_send);
			
		printf("Vertical : %d      Horizontal  %d \r\n", pos.y,pos.x);
     522:	1f 92       	push	r1
     524:	0f 93       	push	r16
     526:	1f 92       	push	r1
     528:	1f 93       	push	r17
     52a:	81 e6       	ldi	r24, 0x61	; 97
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	9f 93       	push	r25
     530:	8f 93       	push	r24
     532:	0e 94 26 04 	call	0x84c	; 0x84c <printf>
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	e3 cf       	rjmp	.-58     	; 0x50a <__stack+0xb>

00000544 <mcp_read>:
		PORTB &= ~(1 << PINB4);
		
		SPI_MasterTransmit(MCP_READ_STATUS);
		result = SPI_MaserRead();
		
		PORTB |= (1 << PINB4);
     544:	cf 93       	push	r28
     546:	c8 2f       	mov	r28, r24
     548:	88 b3       	in	r24, 0x18	; 24
     54a:	8f 7e       	andi	r24, 0xEF	; 239
     54c:	88 bb       	out	0x18, r24	; 24
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     554:	8c 2f       	mov	r24, r28
     556:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     55a:	0e 94 8c 03 	call	0x718	; 0x718 <SPI_MaserRead>
     55e:	98 b3       	in	r25, 0x18	; 24
     560:	90 61       	ori	r25, 0x10	; 16
     562:	98 bb       	out	0x18, r25	; 24
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <mcp_write>:
     568:	cf 93       	push	r28
     56a:	df 93       	push	r29
     56c:	d8 2f       	mov	r29, r24
     56e:	c6 2f       	mov	r28, r22
     570:	88 b3       	in	r24, 0x18	; 24
     572:	8f 7e       	andi	r24, 0xEF	; 239
     574:	88 bb       	out	0x18, r24	; 24
     576:	82 e0       	ldi	r24, 0x02	; 2
     578:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     57c:	8d 2f       	mov	r24, r29
     57e:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     582:	8c 2f       	mov	r24, r28
     584:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     588:	88 b3       	in	r24, 0x18	; 24
     58a:	80 61       	ori	r24, 0x10	; 16
     58c:	88 bb       	out	0x18, r24	; 24
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <mcp_request_send>:
     594:	9c 01       	movw	r18, r24
     596:	98 b3       	in	r25, 0x18	; 24
     598:	9f 7e       	andi	r25, 0xEF	; 239
     59a:	98 bb       	out	0x18, r25	; 24
     59c:	21 30       	cpi	r18, 0x01	; 1
     59e:	31 05       	cpc	r19, r1
     5a0:	79 f0       	breq	.+30     	; 0x5c0 <mcp_request_send+0x2c>
     5a2:	1c f4       	brge	.+6      	; 0x5aa <mcp_request_send+0x16>
     5a4:	23 2b       	or	r18, r19
     5a6:	41 f0       	breq	.+16     	; 0x5b8 <mcp_request_send+0x24>
     5a8:	17 c0       	rjmp	.+46     	; 0x5d8 <mcp_request_send+0x44>
     5aa:	22 30       	cpi	r18, 0x02	; 2
     5ac:	31 05       	cpc	r19, r1
     5ae:	61 f0       	breq	.+24     	; 0x5c8 <mcp_request_send+0x34>
     5b0:	23 30       	cpi	r18, 0x03	; 3
     5b2:	31 05       	cpc	r19, r1
     5b4:	69 f0       	breq	.+26     	; 0x5d0 <mcp_request_send+0x3c>
     5b6:	10 c0       	rjmp	.+32     	; 0x5d8 <mcp_request_send+0x44>
     5b8:	81 e8       	ldi	r24, 0x81	; 129
     5ba:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     5be:	0f c0       	rjmp	.+30     	; 0x5de <mcp_request_send+0x4a>
     5c0:	82 e8       	ldi	r24, 0x82	; 130
     5c2:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <mcp_request_send+0x4a>
     5c8:	84 e8       	ldi	r24, 0x84	; 132
     5ca:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     5ce:	07 c0       	rjmp	.+14     	; 0x5de <mcp_request_send+0x4a>
     5d0:	87 e8       	ldi	r24, 0x87	; 135
     5d2:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     5d6:	03 c0       	rjmp	.+6      	; 0x5de <mcp_request_send+0x4a>
     5d8:	80 e8       	ldi	r24, 0x80	; 128
     5da:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     5de:	88 b3       	in	r24, 0x18	; 24
     5e0:	80 61       	ori	r24, 0x10	; 16
     5e2:	88 bb       	out	0x18, r24	; 24
     5e4:	08 95       	ret

000005e6 <mcp_reset>:
     5e6:	88 b3       	in	r24, 0x18	; 24
     5e8:	8f 7e       	andi	r24, 0xEF	; 239
     5ea:	88 bb       	out	0x18, r24	; 24
     5ec:	80 ec       	ldi	r24, 0xC0	; 192
     5ee:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
     5f2:	88 b3       	in	r24, 0x18	; 24
     5f4:	80 61       	ori	r24, 0x10	; 16
     5f6:	88 bb       	out	0x18, r24	; 24
     5f8:	08 95       	ret

000005fa <mcp_init>:
     5fa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <SPI_MasterInit>
     5fe:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <mcp_reset>
     602:	8e e0       	ldi	r24, 0x0E	; 14
     604:	0e 94 a2 02 	call	0x544	; 0x544 <mcp_read>
     608:	80 7e       	andi	r24, 0xE0	; 224
     60a:	80 38       	cpi	r24, 0x80	; 128
     60c:	51 f0       	breq	.+20     	; 0x622 <mcp_init+0x28>
     60e:	86 e8       	ldi	r24, 0x86	; 134
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	0e 94 26 04 	call	0x84c	; 0x84c <printf>
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	08 95       	ret
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	08 95       	ret

00000626 <mcp_bit_modify>:
		return result ;
	};
	
void mcp_bit_modify(uint8_t address_register, uint8_t mask, uint8_t data) {  // NOT FOR ALL REGISTERS. SEE REGISTER MAP.
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	18 2f       	mov	r17, r24
     62e:	d6 2f       	mov	r29, r22
     630:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PINB4);
     632:	88 b3       	in	r24, 0x18	; 24
     634:	8f 7e       	andi	r24, 0xEF	; 239
     636:	88 bb       	out	0x18, r24	; 24
	
	SPI_MasterTransmit(MCP_BITMOD);
     638:	85 e0       	ldi	r24, 0x05	; 5
     63a:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
	SPI_MasterTransmit(address_register);
     63e:	81 2f       	mov	r24, r17
     640:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
     644:	8d 2f       	mov	r24, r29
     646:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     64a:	8c 2f       	mov	r24, r28
     64c:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
	
	PORTB |= (1 << PINB4);
     650:	88 b3       	in	r24, 0x18	; 24
     652:	80 61       	ori	r24, 0x10	; 16
     654:	88 bb       	out	0x18, r24	; 24
};
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	08 95       	ret

0000065e <oled_write_c>:
	oled_write_c(0xaf); // display on
	
}

void oled_write_c(uint8_t command) {
	xmem_write(command, 0x0000);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	0e 94 9a 03 	call	0x734	; 0x734 <xmem_write>
     666:	08 95       	ret

00000668 <OLED_init>:
volatile oled_pos current_pos;


void OLED_init()
{
	current_pos.page = 0x00;
     668:	e0 ec       	ldi	r30, 0xC0	; 192
     66a:	f1 e0       	ldi	r31, 0x01	; 1
     66c:	10 82       	st	Z, r1
	current_pos.column = 0x00;
     66e:	11 82       	std	Z+1, r1	; 0x01
	
	
	oled_write_c(0xae); // display off
     670:	8e ea       	ldi	r24, 0xAE	; 174
     672:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xa1); //segment remap
     676:	81 ea       	ldi	r24, 0xA1	; 161
     678:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xda); //common pads hardware: alternative
     67c:	8a ed       	ldi	r24, 0xDA	; 218
     67e:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x12);
     682:	82 e1       	ldi	r24, 0x12	; 18
     684:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xc8); //common output scan direction:com63~com0
     688:	88 ec       	ldi	r24, 0xC8	; 200
     68a:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xa8); //multiplex ration mode:63
     68e:	88 ea       	ldi	r24, 0xA8	; 168
     690:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x3f);
     694:	8f e3       	ldi	r24, 0x3F	; 63
     696:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xd5); //display divide ratio/osc. freq. mode
     69a:	85 ed       	ldi	r24, 0xD5	; 213
     69c:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x80);
     6a0:	80 e8       	ldi	r24, 0x80	; 128
     6a2:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x81); //contrast control
     6a6:	81 e8       	ldi	r24, 0x81	; 129
     6a8:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x50);
     6ac:	80 e5       	ldi	r24, 0x50	; 80
     6ae:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xd9); //set pre-charge period
     6b2:	89 ed       	ldi	r24, 0xD9	; 217
     6b4:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x21);
     6b8:	81 e2       	ldi	r24, 0x21	; 33
     6ba:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x20); //Set Memory Addressing Mode
     6be:	80 e2       	ldi	r24, 0x20	; 32
     6c0:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x02);
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xdb); //VCOM deselect level mode
     6ca:	8b ed       	ldi	r24, 0xDB	; 219
     6cc:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x30);
     6d0:	80 e3       	ldi	r24, 0x30	; 48
     6d2:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xad); //master configuration
     6d6:	8d ea       	ldi	r24, 0xAD	; 173
     6d8:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0x00);
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xa4); //out follows RAM content
     6e2:	84 ea       	ldi	r24, 0xA4	; 164
     6e4:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xa6); //set normal display
     6e8:	86 ea       	ldi	r24, 0xA6	; 166
     6ea:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
	oled_write_c(0xaf); // display on
     6ee:	8f ea       	ldi	r24, 0xAF	; 175
     6f0:	0e 94 2f 03 	call	0x65e	; 0x65e <oled_write_c>
     6f4:	08 95       	ret

000006f6 <SPI_MasterInit>:
#include <avr/io.h>

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1 << DDB5) | (1 << DDB7) | (1 << DDB4);
     6f6:	87 b3       	in	r24, 0x17	; 23
     6f8:	80 6b       	ori	r24, 0xB0	; 176
     6fa:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1 << SPE) | (1 << MSTR) | (1<<SPR0);
     6fc:	8d b1       	in	r24, 0x0d	; 13
     6fe:	81 65       	ori	r24, 0x51	; 81
     700:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << CPOL);
     702:	8d b1       	in	r24, 0x0d	; 13
     704:	87 7f       	andi	r24, 0xF7	; 247
     706:	8d b9       	out	0x0d, r24	; 13
	SPCR &= ~(1 << CPHA);
     708:	8d b1       	in	r24, 0x0d	; 13
     70a:	8b 7f       	andi	r24, 0xFB	; 251
     70c:	8d b9       	out	0x0d, r24	; 13
     70e:	08 95       	ret

00000710 <SPI_MasterTransmit>:
}

void SPI_MasterTransmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     710:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))
     712:	77 9b       	sbis	0x0e, 7	; 14
     714:	fe cf       	rjmp	.-4      	; 0x712 <SPI_MasterTransmit+0x2>
	;
}
     716:	08 95       	ret

00000718 <SPI_MaserRead>:

char SPI_MaserRead() {
	
	SPI_MasterTransmit(0);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	0e 94 88 03 	call	0x710	; 0x710 <SPI_MasterTransmit>
	
	while(!(SPSR & (1<<SPIF)))
     71e:	77 9b       	sbis	0x0e, 7	; 14
     720:	fe cf       	rjmp	.-4      	; 0x71e <SPI_MaserRead+0x6>
	;
	
	return SPDR;
     722:	8f b1       	in	r24, 0x0f	; 15
	
}
     724:	08 95       	ret

00000726 <SRAM_Init>:
#include "SRAM.h"


void SRAM_Init()
{
	MCUCR |= (1 << SRE);
     726:	85 b7       	in	r24, 0x35	; 53
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM0 );
     72c:	80 b7       	in	r24, 0x30	; 48
     72e:	88 60       	ori	r24, 0x08	; 8
     730:	80 bf       	out	0x30, r24	; 48
     732:	08 95       	ret

00000734 <xmem_write>:
}

void xmem_write ( uint8_t data , uint16_t addr ) {
	volatile char * ext_mem = ( char *) 0x1000 ;
	ext_mem [ addr ]= data;
     734:	fb 01       	movw	r30, r22
     736:	f0 5f       	subi	r31, 0xF0	; 240
     738:	80 83       	st	Z, r24
     73a:	08 95       	ret

0000073c <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1 << UDRE0)) );
     73c:	5d 9b       	sbis	0x0b, 5	; 11
     73e:	fe cf       	rjmp	.-4      	; 0x73c <UART_Transmit>
	
	/* Put data into buffer, sends the data */
	UDR0 = data;
     740:	8c b9       	out	0x0c, r24	; 12
     742:	08 95       	ret

00000744 <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1 << RXC0)) );
     744:	5f 9b       	sbis	0x0b, 7	; 11
     746:	fe cf       	rjmp	.-4      	; 0x744 <UART_Receive>
	
	/* Get and return received data from buffer */
	return UDR0;
     748:	8c b1       	in	r24, 0x0c	; 12
     74a:	08 95       	ret

0000074c <UART_Init>:
#include "UART.h"

void UART_Init(unsigned int my_ubrr)
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(my_ubrr >> 8);
     74c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)my_ubrr;
     74e:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     750:	88 e1       	ldi	r24, 0x18	; 24
     752:	8a b9       	out	0x0a, r24	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0) | (1 << USBS0) | (3 << UCSZ00);
     754:	8e e8       	ldi	r24, 0x8E	; 142
     756:	80 bd       	out	0x20, r24	; 32

	fdevopen(UART_Transmit, UART_Receive);
     758:	62 ea       	ldi	r22, 0xA2	; 162
     75a:	73 e0       	ldi	r23, 0x03	; 3
     75c:	8e e9       	ldi	r24, 0x9E	; 158
     75e:	93 e0       	ldi	r25, 0x03	; 3
     760:	0e 94 db 03 	call	0x7b6	; 0x7b6 <fdevopen>
     764:	08 95       	ret

00000766 <__divmodhi4>:
     766:	97 fb       	bst	r25, 7
     768:	07 2e       	mov	r0, r23
     76a:	16 f4       	brtc	.+4      	; 0x770 <__divmodhi4+0xa>
     76c:	00 94       	com	r0
     76e:	07 d0       	rcall	.+14     	; 0x77e <__divmodhi4_neg1>
     770:	77 fd       	sbrc	r23, 7
     772:	09 d0       	rcall	.+18     	; 0x786 <__divmodhi4_neg2>
     774:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodhi4>
     778:	07 fc       	sbrc	r0, 7
     77a:	05 d0       	rcall	.+10     	; 0x786 <__divmodhi4_neg2>
     77c:	3e f4       	brtc	.+14     	; 0x78c <__divmodhi4_exit>

0000077e <__divmodhi4_neg1>:
     77e:	90 95       	com	r25
     780:	81 95       	neg	r24
     782:	9f 4f       	sbci	r25, 0xFF	; 255
     784:	08 95       	ret

00000786 <__divmodhi4_neg2>:
     786:	70 95       	com	r23
     788:	61 95       	neg	r22
     78a:	7f 4f       	sbci	r23, 0xFF	; 255

0000078c <__divmodhi4_exit>:
     78c:	08 95       	ret

0000078e <__udivmodhi4>:
     78e:	aa 1b       	sub	r26, r26
     790:	bb 1b       	sub	r27, r27
     792:	51 e1       	ldi	r21, 0x11	; 17
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <__udivmodhi4_ep>

00000796 <__udivmodhi4_loop>:
     796:	aa 1f       	adc	r26, r26
     798:	bb 1f       	adc	r27, r27
     79a:	a6 17       	cp	r26, r22
     79c:	b7 07       	cpc	r27, r23
     79e:	10 f0       	brcs	.+4      	; 0x7a4 <__udivmodhi4_ep>
     7a0:	a6 1b       	sub	r26, r22
     7a2:	b7 0b       	sbc	r27, r23

000007a4 <__udivmodhi4_ep>:
     7a4:	88 1f       	adc	r24, r24
     7a6:	99 1f       	adc	r25, r25
     7a8:	5a 95       	dec	r21
     7aa:	a9 f7       	brne	.-22     	; 0x796 <__udivmodhi4_loop>
     7ac:	80 95       	com	r24
     7ae:	90 95       	com	r25
     7b0:	bc 01       	movw	r22, r24
     7b2:	cd 01       	movw	r24, r26
     7b4:	08 95       	ret

000007b6 <fdevopen>:
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	31 f4       	brne	.+12     	; 0x7ce <fdevopen+0x18>
     7c2:	61 15       	cp	r22, r1
     7c4:	71 05       	cpc	r23, r1
     7c6:	19 f4       	brne	.+6      	; 0x7ce <fdevopen+0x18>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	3a c0       	rjmp	.+116    	; 0x842 <fdevopen+0x8c>
     7ce:	8b 01       	movw	r16, r22
     7d0:	ec 01       	movw	r28, r24
     7d2:	6e e0       	ldi	r22, 0x0E	; 14
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 1d 06 	call	0xc3a	; 0xc3a <calloc>
     7de:	fc 01       	movw	r30, r24
     7e0:	89 2b       	or	r24, r25
     7e2:	91 f3       	breq	.-28     	; 0x7c8 <fdevopen+0x12>
     7e4:	80 e8       	ldi	r24, 0x80	; 128
     7e6:	83 83       	std	Z+3, r24	; 0x03
     7e8:	01 15       	cp	r16, r1
     7ea:	11 05       	cpc	r17, r1
     7ec:	71 f0       	breq	.+28     	; 0x80a <fdevopen+0x54>
     7ee:	13 87       	std	Z+11, r17	; 0x0b
     7f0:	02 87       	std	Z+10, r16	; 0x0a
     7f2:	81 e8       	ldi	r24, 0x81	; 129
     7f4:	83 83       	std	Z+3, r24	; 0x03
     7f6:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__iob>
     7fa:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <__iob+0x1>
     7fe:	89 2b       	or	r24, r25
     800:	21 f4       	brne	.+8      	; 0x80a <fdevopen+0x54>
     802:	f0 93 c3 01 	sts	0x01C3, r31	; 0x8001c3 <__iob+0x1>
     806:	e0 93 c2 01 	sts	0x01C2, r30	; 0x8001c2 <__iob>
     80a:	20 97       	sbiw	r28, 0x00	; 0
     80c:	c9 f0       	breq	.+50     	; 0x840 <fdevopen+0x8a>
     80e:	d1 87       	std	Z+9, r29	; 0x09
     810:	c0 87       	std	Z+8, r28	; 0x08
     812:	83 81       	ldd	r24, Z+3	; 0x03
     814:	82 60       	ori	r24, 0x02	; 2
     816:	83 83       	std	Z+3, r24	; 0x03
     818:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__iob+0x2>
     81c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <__iob+0x3>
     820:	89 2b       	or	r24, r25
     822:	71 f4       	brne	.+28     	; 0x840 <fdevopen+0x8a>
     824:	f0 93 c5 01 	sts	0x01C5, r31	; 0x8001c5 <__iob+0x3>
     828:	e0 93 c4 01 	sts	0x01C4, r30	; 0x8001c4 <__iob+0x2>
     82c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__iob+0x4>
     830:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__iob+0x5>
     834:	89 2b       	or	r24, r25
     836:	21 f4       	brne	.+8      	; 0x840 <fdevopen+0x8a>
     838:	f0 93 c7 01 	sts	0x01C7, r31	; 0x8001c7 <__iob+0x5>
     83c:	e0 93 c6 01 	sts	0x01C6, r30	; 0x8001c6 <__iob+0x4>
     840:	cf 01       	movw	r24, r30
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	08 95       	ret

0000084c <printf>:
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	ec e2       	ldi	r30, 0x2C	; 44
     852:	f4 e0       	ldi	r31, 0x04	; 4
     854:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__prologue_saves__+0x20>
     858:	ae 01       	movw	r20, r28
     85a:	4b 5f       	subi	r20, 0xFB	; 251
     85c:	5f 4f       	sbci	r21, 0xFF	; 255
     85e:	fa 01       	movw	r30, r20
     860:	61 91       	ld	r22, Z+
     862:	71 91       	ld	r23, Z+
     864:	af 01       	movw	r20, r30
     866:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <__iob+0x2>
     86a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <__iob+0x3>
     86e:	0e 94 3c 04 	call	0x878	; 0x878 <vfprintf>
     872:	e2 e0       	ldi	r30, 0x02	; 2
     874:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__epilogue_restores__+0x20>

00000878 <vfprintf>:
     878:	ab e0       	ldi	r26, 0x0B	; 11
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	e2 e4       	ldi	r30, 0x42	; 66
     87e:	f4 e0       	ldi	r31, 0x04	; 4
     880:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__prologue_saves__>
     884:	6c 01       	movw	r12, r24
     886:	7b 01       	movw	r14, r22
     888:	8a 01       	movw	r16, r20
     88a:	fc 01       	movw	r30, r24
     88c:	17 82       	std	Z+7, r1	; 0x07
     88e:	16 82       	std	Z+6, r1	; 0x06
     890:	83 81       	ldd	r24, Z+3	; 0x03
     892:	81 ff       	sbrs	r24, 1
     894:	cc c1       	rjmp	.+920    	; 0xc2e <vfprintf+0x3b6>
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	3c 01       	movw	r6, r24
     89c:	f6 01       	movw	r30, r12
     89e:	93 81       	ldd	r25, Z+3	; 0x03
     8a0:	f7 01       	movw	r30, r14
     8a2:	93 fd       	sbrc	r25, 3
     8a4:	85 91       	lpm	r24, Z+
     8a6:	93 ff       	sbrs	r25, 3
     8a8:	81 91       	ld	r24, Z+
     8aa:	7f 01       	movw	r14, r30
     8ac:	88 23       	and	r24, r24
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <vfprintf+0x3a>
     8b0:	ba c1       	rjmp	.+884    	; 0xc26 <vfprintf+0x3ae>
     8b2:	85 32       	cpi	r24, 0x25	; 37
     8b4:	39 f4       	brne	.+14     	; 0x8c4 <vfprintf+0x4c>
     8b6:	93 fd       	sbrc	r25, 3
     8b8:	85 91       	lpm	r24, Z+
     8ba:	93 ff       	sbrs	r25, 3
     8bc:	81 91       	ld	r24, Z+
     8be:	7f 01       	movw	r14, r30
     8c0:	85 32       	cpi	r24, 0x25	; 37
     8c2:	29 f4       	brne	.+10     	; 0x8ce <vfprintf+0x56>
     8c4:	b6 01       	movw	r22, r12
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     8cc:	e7 cf       	rjmp	.-50     	; 0x89c <vfprintf+0x24>
     8ce:	91 2c       	mov	r9, r1
     8d0:	21 2c       	mov	r2, r1
     8d2:	31 2c       	mov	r3, r1
     8d4:	ff e1       	ldi	r31, 0x1F	; 31
     8d6:	f3 15       	cp	r31, r3
     8d8:	d8 f0       	brcs	.+54     	; 0x910 <vfprintf+0x98>
     8da:	8b 32       	cpi	r24, 0x2B	; 43
     8dc:	79 f0       	breq	.+30     	; 0x8fc <vfprintf+0x84>
     8de:	38 f4       	brcc	.+14     	; 0x8ee <vfprintf+0x76>
     8e0:	80 32       	cpi	r24, 0x20	; 32
     8e2:	79 f0       	breq	.+30     	; 0x902 <vfprintf+0x8a>
     8e4:	83 32       	cpi	r24, 0x23	; 35
     8e6:	a1 f4       	brne	.+40     	; 0x910 <vfprintf+0x98>
     8e8:	23 2d       	mov	r18, r3
     8ea:	20 61       	ori	r18, 0x10	; 16
     8ec:	1d c0       	rjmp	.+58     	; 0x928 <vfprintf+0xb0>
     8ee:	8d 32       	cpi	r24, 0x2D	; 45
     8f0:	61 f0       	breq	.+24     	; 0x90a <vfprintf+0x92>
     8f2:	80 33       	cpi	r24, 0x30	; 48
     8f4:	69 f4       	brne	.+26     	; 0x910 <vfprintf+0x98>
     8f6:	23 2d       	mov	r18, r3
     8f8:	21 60       	ori	r18, 0x01	; 1
     8fa:	16 c0       	rjmp	.+44     	; 0x928 <vfprintf+0xb0>
     8fc:	83 2d       	mov	r24, r3
     8fe:	82 60       	ori	r24, 0x02	; 2
     900:	38 2e       	mov	r3, r24
     902:	e3 2d       	mov	r30, r3
     904:	e4 60       	ori	r30, 0x04	; 4
     906:	3e 2e       	mov	r3, r30
     908:	2a c0       	rjmp	.+84     	; 0x95e <vfprintf+0xe6>
     90a:	f3 2d       	mov	r31, r3
     90c:	f8 60       	ori	r31, 0x08	; 8
     90e:	1d c0       	rjmp	.+58     	; 0x94a <vfprintf+0xd2>
     910:	37 fc       	sbrc	r3, 7
     912:	2d c0       	rjmp	.+90     	; 0x96e <vfprintf+0xf6>
     914:	20 ed       	ldi	r18, 0xD0	; 208
     916:	28 0f       	add	r18, r24
     918:	2a 30       	cpi	r18, 0x0A	; 10
     91a:	40 f0       	brcs	.+16     	; 0x92c <vfprintf+0xb4>
     91c:	8e 32       	cpi	r24, 0x2E	; 46
     91e:	b9 f4       	brne	.+46     	; 0x94e <vfprintf+0xd6>
     920:	36 fc       	sbrc	r3, 6
     922:	81 c1       	rjmp	.+770    	; 0xc26 <vfprintf+0x3ae>
     924:	23 2d       	mov	r18, r3
     926:	20 64       	ori	r18, 0x40	; 64
     928:	32 2e       	mov	r3, r18
     92a:	19 c0       	rjmp	.+50     	; 0x95e <vfprintf+0xe6>
     92c:	36 fe       	sbrs	r3, 6
     92e:	06 c0       	rjmp	.+12     	; 0x93c <vfprintf+0xc4>
     930:	8a e0       	ldi	r24, 0x0A	; 10
     932:	98 9e       	mul	r9, r24
     934:	20 0d       	add	r18, r0
     936:	11 24       	eor	r1, r1
     938:	92 2e       	mov	r9, r18
     93a:	11 c0       	rjmp	.+34     	; 0x95e <vfprintf+0xe6>
     93c:	ea e0       	ldi	r30, 0x0A	; 10
     93e:	2e 9e       	mul	r2, r30
     940:	20 0d       	add	r18, r0
     942:	11 24       	eor	r1, r1
     944:	22 2e       	mov	r2, r18
     946:	f3 2d       	mov	r31, r3
     948:	f0 62       	ori	r31, 0x20	; 32
     94a:	3f 2e       	mov	r3, r31
     94c:	08 c0       	rjmp	.+16     	; 0x95e <vfprintf+0xe6>
     94e:	8c 36       	cpi	r24, 0x6C	; 108
     950:	21 f4       	brne	.+8      	; 0x95a <vfprintf+0xe2>
     952:	83 2d       	mov	r24, r3
     954:	80 68       	ori	r24, 0x80	; 128
     956:	38 2e       	mov	r3, r24
     958:	02 c0       	rjmp	.+4      	; 0x95e <vfprintf+0xe6>
     95a:	88 36       	cpi	r24, 0x68	; 104
     95c:	41 f4       	brne	.+16     	; 0x96e <vfprintf+0xf6>
     95e:	f7 01       	movw	r30, r14
     960:	93 fd       	sbrc	r25, 3
     962:	85 91       	lpm	r24, Z+
     964:	93 ff       	sbrs	r25, 3
     966:	81 91       	ld	r24, Z+
     968:	7f 01       	movw	r14, r30
     96a:	81 11       	cpse	r24, r1
     96c:	b3 cf       	rjmp	.-154    	; 0x8d4 <vfprintf+0x5c>
     96e:	98 2f       	mov	r25, r24
     970:	9f 7d       	andi	r25, 0xDF	; 223
     972:	95 54       	subi	r25, 0x45	; 69
     974:	93 30       	cpi	r25, 0x03	; 3
     976:	28 f4       	brcc	.+10     	; 0x982 <vfprintf+0x10a>
     978:	0c 5f       	subi	r16, 0xFC	; 252
     97a:	1f 4f       	sbci	r17, 0xFF	; 255
     97c:	9f e3       	ldi	r25, 0x3F	; 63
     97e:	99 83       	std	Y+1, r25	; 0x01
     980:	0d c0       	rjmp	.+26     	; 0x99c <vfprintf+0x124>
     982:	83 36       	cpi	r24, 0x63	; 99
     984:	31 f0       	breq	.+12     	; 0x992 <vfprintf+0x11a>
     986:	83 37       	cpi	r24, 0x73	; 115
     988:	71 f0       	breq	.+28     	; 0x9a6 <vfprintf+0x12e>
     98a:	83 35       	cpi	r24, 0x53	; 83
     98c:	09 f0       	breq	.+2      	; 0x990 <vfprintf+0x118>
     98e:	59 c0       	rjmp	.+178    	; 0xa42 <vfprintf+0x1ca>
     990:	21 c0       	rjmp	.+66     	; 0x9d4 <vfprintf+0x15c>
     992:	f8 01       	movw	r30, r16
     994:	80 81       	ld	r24, Z
     996:	89 83       	std	Y+1, r24	; 0x01
     998:	0e 5f       	subi	r16, 0xFE	; 254
     99a:	1f 4f       	sbci	r17, 0xFF	; 255
     99c:	88 24       	eor	r8, r8
     99e:	83 94       	inc	r8
     9a0:	91 2c       	mov	r9, r1
     9a2:	53 01       	movw	r10, r6
     9a4:	13 c0       	rjmp	.+38     	; 0x9cc <vfprintf+0x154>
     9a6:	28 01       	movw	r4, r16
     9a8:	f2 e0       	ldi	r31, 0x02	; 2
     9aa:	4f 0e       	add	r4, r31
     9ac:	51 1c       	adc	r5, r1
     9ae:	f8 01       	movw	r30, r16
     9b0:	a0 80       	ld	r10, Z
     9b2:	b1 80       	ldd	r11, Z+1	; 0x01
     9b4:	36 fe       	sbrs	r3, 6
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <vfprintf+0x146>
     9b8:	69 2d       	mov	r22, r9
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <vfprintf+0x14a>
     9be:	6f ef       	ldi	r22, 0xFF	; 255
     9c0:	7f ef       	ldi	r23, 0xFF	; 255
     9c2:	c5 01       	movw	r24, r10
     9c4:	0e 94 6c 07 	call	0xed8	; 0xed8 <strnlen>
     9c8:	4c 01       	movw	r8, r24
     9ca:	82 01       	movw	r16, r4
     9cc:	f3 2d       	mov	r31, r3
     9ce:	ff 77       	andi	r31, 0x7F	; 127
     9d0:	3f 2e       	mov	r3, r31
     9d2:	16 c0       	rjmp	.+44     	; 0xa00 <vfprintf+0x188>
     9d4:	28 01       	movw	r4, r16
     9d6:	22 e0       	ldi	r18, 0x02	; 2
     9d8:	42 0e       	add	r4, r18
     9da:	51 1c       	adc	r5, r1
     9dc:	f8 01       	movw	r30, r16
     9de:	a0 80       	ld	r10, Z
     9e0:	b1 80       	ldd	r11, Z+1	; 0x01
     9e2:	36 fe       	sbrs	r3, 6
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <vfprintf+0x174>
     9e6:	69 2d       	mov	r22, r9
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <vfprintf+0x178>
     9ec:	6f ef       	ldi	r22, 0xFF	; 255
     9ee:	7f ef       	ldi	r23, 0xFF	; 255
     9f0:	c5 01       	movw	r24, r10
     9f2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <strnlen_P>
     9f6:	4c 01       	movw	r8, r24
     9f8:	f3 2d       	mov	r31, r3
     9fa:	f0 68       	ori	r31, 0x80	; 128
     9fc:	3f 2e       	mov	r3, r31
     9fe:	82 01       	movw	r16, r4
     a00:	33 fc       	sbrc	r3, 3
     a02:	1b c0       	rjmp	.+54     	; 0xa3a <vfprintf+0x1c2>
     a04:	82 2d       	mov	r24, r2
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	88 16       	cp	r8, r24
     a0a:	99 06       	cpc	r9, r25
     a0c:	b0 f4       	brcc	.+44     	; 0xa3a <vfprintf+0x1c2>
     a0e:	b6 01       	movw	r22, r12
     a10:	80 e2       	ldi	r24, 0x20	; 32
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     a18:	2a 94       	dec	r2
     a1a:	f4 cf       	rjmp	.-24     	; 0xa04 <vfprintf+0x18c>
     a1c:	f5 01       	movw	r30, r10
     a1e:	37 fc       	sbrc	r3, 7
     a20:	85 91       	lpm	r24, Z+
     a22:	37 fe       	sbrs	r3, 7
     a24:	81 91       	ld	r24, Z+
     a26:	5f 01       	movw	r10, r30
     a28:	b6 01       	movw	r22, r12
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     a30:	21 10       	cpse	r2, r1
     a32:	2a 94       	dec	r2
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	82 1a       	sub	r8, r18
     a38:	91 08       	sbc	r9, r1
     a3a:	81 14       	cp	r8, r1
     a3c:	91 04       	cpc	r9, r1
     a3e:	71 f7       	brne	.-36     	; 0xa1c <vfprintf+0x1a4>
     a40:	e8 c0       	rjmp	.+464    	; 0xc12 <vfprintf+0x39a>
     a42:	84 36       	cpi	r24, 0x64	; 100
     a44:	11 f0       	breq	.+4      	; 0xa4a <vfprintf+0x1d2>
     a46:	89 36       	cpi	r24, 0x69	; 105
     a48:	41 f5       	brne	.+80     	; 0xa9a <vfprintf+0x222>
     a4a:	f8 01       	movw	r30, r16
     a4c:	37 fe       	sbrs	r3, 7
     a4e:	07 c0       	rjmp	.+14     	; 0xa5e <vfprintf+0x1e6>
     a50:	60 81       	ld	r22, Z
     a52:	71 81       	ldd	r23, Z+1	; 0x01
     a54:	82 81       	ldd	r24, Z+2	; 0x02
     a56:	93 81       	ldd	r25, Z+3	; 0x03
     a58:	0c 5f       	subi	r16, 0xFC	; 252
     a5a:	1f 4f       	sbci	r17, 0xFF	; 255
     a5c:	08 c0       	rjmp	.+16     	; 0xa6e <vfprintf+0x1f6>
     a5e:	60 81       	ld	r22, Z
     a60:	71 81       	ldd	r23, Z+1	; 0x01
     a62:	07 2e       	mov	r0, r23
     a64:	00 0c       	add	r0, r0
     a66:	88 0b       	sbc	r24, r24
     a68:	99 0b       	sbc	r25, r25
     a6a:	0e 5f       	subi	r16, 0xFE	; 254
     a6c:	1f 4f       	sbci	r17, 0xFF	; 255
     a6e:	f3 2d       	mov	r31, r3
     a70:	ff 76       	andi	r31, 0x6F	; 111
     a72:	3f 2e       	mov	r3, r31
     a74:	97 ff       	sbrs	r25, 7
     a76:	09 c0       	rjmp	.+18     	; 0xa8a <vfprintf+0x212>
     a78:	90 95       	com	r25
     a7a:	80 95       	com	r24
     a7c:	70 95       	com	r23
     a7e:	61 95       	neg	r22
     a80:	7f 4f       	sbci	r23, 0xFF	; 255
     a82:	8f 4f       	sbci	r24, 0xFF	; 255
     a84:	9f 4f       	sbci	r25, 0xFF	; 255
     a86:	f0 68       	ori	r31, 0x80	; 128
     a88:	3f 2e       	mov	r3, r31
     a8a:	2a e0       	ldi	r18, 0x0A	; 10
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	a3 01       	movw	r20, r6
     a90:	0e 94 b3 07 	call	0xf66	; 0xf66 <__ultoa_invert>
     a94:	88 2e       	mov	r8, r24
     a96:	86 18       	sub	r8, r6
     a98:	45 c0       	rjmp	.+138    	; 0xb24 <vfprintf+0x2ac>
     a9a:	85 37       	cpi	r24, 0x75	; 117
     a9c:	31 f4       	brne	.+12     	; 0xaaa <vfprintf+0x232>
     a9e:	23 2d       	mov	r18, r3
     aa0:	2f 7e       	andi	r18, 0xEF	; 239
     aa2:	b2 2e       	mov	r11, r18
     aa4:	2a e0       	ldi	r18, 0x0A	; 10
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	25 c0       	rjmp	.+74     	; 0xaf4 <vfprintf+0x27c>
     aaa:	93 2d       	mov	r25, r3
     aac:	99 7f       	andi	r25, 0xF9	; 249
     aae:	b9 2e       	mov	r11, r25
     ab0:	8f 36       	cpi	r24, 0x6F	; 111
     ab2:	c1 f0       	breq	.+48     	; 0xae4 <vfprintf+0x26c>
     ab4:	18 f4       	brcc	.+6      	; 0xabc <vfprintf+0x244>
     ab6:	88 35       	cpi	r24, 0x58	; 88
     ab8:	79 f0       	breq	.+30     	; 0xad8 <vfprintf+0x260>
     aba:	b5 c0       	rjmp	.+362    	; 0xc26 <vfprintf+0x3ae>
     abc:	80 37       	cpi	r24, 0x70	; 112
     abe:	19 f0       	breq	.+6      	; 0xac6 <vfprintf+0x24e>
     ac0:	88 37       	cpi	r24, 0x78	; 120
     ac2:	21 f0       	breq	.+8      	; 0xacc <vfprintf+0x254>
     ac4:	b0 c0       	rjmp	.+352    	; 0xc26 <vfprintf+0x3ae>
     ac6:	e9 2f       	mov	r30, r25
     ac8:	e0 61       	ori	r30, 0x10	; 16
     aca:	be 2e       	mov	r11, r30
     acc:	b4 fe       	sbrs	r11, 4
     ace:	0d c0       	rjmp	.+26     	; 0xaea <vfprintf+0x272>
     ad0:	fb 2d       	mov	r31, r11
     ad2:	f4 60       	ori	r31, 0x04	; 4
     ad4:	bf 2e       	mov	r11, r31
     ad6:	09 c0       	rjmp	.+18     	; 0xaea <vfprintf+0x272>
     ad8:	34 fe       	sbrs	r3, 4
     ada:	0a c0       	rjmp	.+20     	; 0xaf0 <vfprintf+0x278>
     adc:	29 2f       	mov	r18, r25
     ade:	26 60       	ori	r18, 0x06	; 6
     ae0:	b2 2e       	mov	r11, r18
     ae2:	06 c0       	rjmp	.+12     	; 0xaf0 <vfprintf+0x278>
     ae4:	28 e0       	ldi	r18, 0x08	; 8
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <vfprintf+0x27c>
     aea:	20 e1       	ldi	r18, 0x10	; 16
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x27c>
     af0:	20 e1       	ldi	r18, 0x10	; 16
     af2:	32 e0       	ldi	r19, 0x02	; 2
     af4:	f8 01       	movw	r30, r16
     af6:	b7 fe       	sbrs	r11, 7
     af8:	07 c0       	rjmp	.+14     	; 0xb08 <vfprintf+0x290>
     afa:	60 81       	ld	r22, Z
     afc:	71 81       	ldd	r23, Z+1	; 0x01
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	93 81       	ldd	r25, Z+3	; 0x03
     b02:	0c 5f       	subi	r16, 0xFC	; 252
     b04:	1f 4f       	sbci	r17, 0xFF	; 255
     b06:	06 c0       	rjmp	.+12     	; 0xb14 <vfprintf+0x29c>
     b08:	60 81       	ld	r22, Z
     b0a:	71 81       	ldd	r23, Z+1	; 0x01
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 5f       	subi	r16, 0xFE	; 254
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	a3 01       	movw	r20, r6
     b16:	0e 94 b3 07 	call	0xf66	; 0xf66 <__ultoa_invert>
     b1a:	88 2e       	mov	r8, r24
     b1c:	86 18       	sub	r8, r6
     b1e:	fb 2d       	mov	r31, r11
     b20:	ff 77       	andi	r31, 0x7F	; 127
     b22:	3f 2e       	mov	r3, r31
     b24:	36 fe       	sbrs	r3, 6
     b26:	0d c0       	rjmp	.+26     	; 0xb42 <vfprintf+0x2ca>
     b28:	23 2d       	mov	r18, r3
     b2a:	2e 7f       	andi	r18, 0xFE	; 254
     b2c:	a2 2e       	mov	r10, r18
     b2e:	89 14       	cp	r8, r9
     b30:	58 f4       	brcc	.+22     	; 0xb48 <vfprintf+0x2d0>
     b32:	34 fe       	sbrs	r3, 4
     b34:	0b c0       	rjmp	.+22     	; 0xb4c <vfprintf+0x2d4>
     b36:	32 fc       	sbrc	r3, 2
     b38:	09 c0       	rjmp	.+18     	; 0xb4c <vfprintf+0x2d4>
     b3a:	83 2d       	mov	r24, r3
     b3c:	8e 7e       	andi	r24, 0xEE	; 238
     b3e:	a8 2e       	mov	r10, r24
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <vfprintf+0x2d4>
     b42:	b8 2c       	mov	r11, r8
     b44:	a3 2c       	mov	r10, r3
     b46:	03 c0       	rjmp	.+6      	; 0xb4e <vfprintf+0x2d6>
     b48:	b8 2c       	mov	r11, r8
     b4a:	01 c0       	rjmp	.+2      	; 0xb4e <vfprintf+0x2d6>
     b4c:	b9 2c       	mov	r11, r9
     b4e:	a4 fe       	sbrs	r10, 4
     b50:	0f c0       	rjmp	.+30     	; 0xb70 <vfprintf+0x2f8>
     b52:	fe 01       	movw	r30, r28
     b54:	e8 0d       	add	r30, r8
     b56:	f1 1d       	adc	r31, r1
     b58:	80 81       	ld	r24, Z
     b5a:	80 33       	cpi	r24, 0x30	; 48
     b5c:	21 f4       	brne	.+8      	; 0xb66 <vfprintf+0x2ee>
     b5e:	9a 2d       	mov	r25, r10
     b60:	99 7e       	andi	r25, 0xE9	; 233
     b62:	a9 2e       	mov	r10, r25
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <vfprintf+0x300>
     b66:	a2 fe       	sbrs	r10, 2
     b68:	06 c0       	rjmp	.+12     	; 0xb76 <vfprintf+0x2fe>
     b6a:	b3 94       	inc	r11
     b6c:	b3 94       	inc	r11
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <vfprintf+0x300>
     b70:	8a 2d       	mov	r24, r10
     b72:	86 78       	andi	r24, 0x86	; 134
     b74:	09 f0       	breq	.+2      	; 0xb78 <vfprintf+0x300>
     b76:	b3 94       	inc	r11
     b78:	a3 fc       	sbrc	r10, 3
     b7a:	11 c0       	rjmp	.+34     	; 0xb9e <vfprintf+0x326>
     b7c:	a0 fe       	sbrs	r10, 0
     b7e:	06 c0       	rjmp	.+12     	; 0xb8c <vfprintf+0x314>
     b80:	b2 14       	cp	r11, r2
     b82:	88 f4       	brcc	.+34     	; 0xba6 <vfprintf+0x32e>
     b84:	28 0c       	add	r2, r8
     b86:	92 2c       	mov	r9, r2
     b88:	9b 18       	sub	r9, r11
     b8a:	0e c0       	rjmp	.+28     	; 0xba8 <vfprintf+0x330>
     b8c:	b2 14       	cp	r11, r2
     b8e:	60 f4       	brcc	.+24     	; 0xba8 <vfprintf+0x330>
     b90:	b6 01       	movw	r22, r12
     b92:	80 e2       	ldi	r24, 0x20	; 32
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     b9a:	b3 94       	inc	r11
     b9c:	f7 cf       	rjmp	.-18     	; 0xb8c <vfprintf+0x314>
     b9e:	b2 14       	cp	r11, r2
     ba0:	18 f4       	brcc	.+6      	; 0xba8 <vfprintf+0x330>
     ba2:	2b 18       	sub	r2, r11
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <vfprintf+0x332>
     ba6:	98 2c       	mov	r9, r8
     ba8:	21 2c       	mov	r2, r1
     baa:	a4 fe       	sbrs	r10, 4
     bac:	10 c0       	rjmp	.+32     	; 0xbce <vfprintf+0x356>
     bae:	b6 01       	movw	r22, r12
     bb0:	80 e3       	ldi	r24, 0x30	; 48
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     bb8:	a2 fe       	sbrs	r10, 2
     bba:	17 c0       	rjmp	.+46     	; 0xbea <vfprintf+0x372>
     bbc:	a1 fc       	sbrc	r10, 1
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <vfprintf+0x34e>
     bc0:	88 e7       	ldi	r24, 0x78	; 120
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <vfprintf+0x352>
     bc6:	88 e5       	ldi	r24, 0x58	; 88
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	b6 01       	movw	r22, r12
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <vfprintf+0x36e>
     bce:	8a 2d       	mov	r24, r10
     bd0:	86 78       	andi	r24, 0x86	; 134
     bd2:	59 f0       	breq	.+22     	; 0xbea <vfprintf+0x372>
     bd4:	a1 fe       	sbrs	r10, 1
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <vfprintf+0x364>
     bd8:	8b e2       	ldi	r24, 0x2B	; 43
     bda:	01 c0       	rjmp	.+2      	; 0xbde <vfprintf+0x366>
     bdc:	80 e2       	ldi	r24, 0x20	; 32
     bde:	a7 fc       	sbrc	r10, 7
     be0:	8d e2       	ldi	r24, 0x2D	; 45
     be2:	b6 01       	movw	r22, r12
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     bea:	89 14       	cp	r8, r9
     bec:	38 f4       	brcc	.+14     	; 0xbfc <vfprintf+0x384>
     bee:	b6 01       	movw	r22, r12
     bf0:	80 e3       	ldi	r24, 0x30	; 48
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     bf8:	9a 94       	dec	r9
     bfa:	f7 cf       	rjmp	.-18     	; 0xbea <vfprintf+0x372>
     bfc:	8a 94       	dec	r8
     bfe:	f3 01       	movw	r30, r6
     c00:	e8 0d       	add	r30, r8
     c02:	f1 1d       	adc	r31, r1
     c04:	80 81       	ld	r24, Z
     c06:	b6 01       	movw	r22, r12
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     c0e:	81 10       	cpse	r8, r1
     c10:	f5 cf       	rjmp	.-22     	; 0xbfc <vfprintf+0x384>
     c12:	22 20       	and	r2, r2
     c14:	09 f4       	brne	.+2      	; 0xc18 <vfprintf+0x3a0>
     c16:	42 ce       	rjmp	.-892    	; 0x89c <vfprintf+0x24>
     c18:	b6 01       	movw	r22, r12
     c1a:	80 e2       	ldi	r24, 0x20	; 32
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 77 07 	call	0xeee	; 0xeee <fputc>
     c22:	2a 94       	dec	r2
     c24:	f6 cf       	rjmp	.-20     	; 0xc12 <vfprintf+0x39a>
     c26:	f6 01       	movw	r30, r12
     c28:	86 81       	ldd	r24, Z+6	; 0x06
     c2a:	97 81       	ldd	r25, Z+7	; 0x07
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <vfprintf+0x3ba>
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	2b 96       	adiw	r28, 0x0b	; 11
     c34:	e2 e1       	ldi	r30, 0x12	; 18
     c36:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__epilogue_restores__>

00000c3a <calloc>:
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	86 9f       	mul	r24, r22
     c44:	80 01       	movw	r16, r0
     c46:	87 9f       	mul	r24, r23
     c48:	10 0d       	add	r17, r0
     c4a:	96 9f       	mul	r25, r22
     c4c:	10 0d       	add	r17, r0
     c4e:	11 24       	eor	r1, r1
     c50:	c8 01       	movw	r24, r16
     c52:	0e 94 39 06 	call	0xc72	; 0xc72 <malloc>
     c56:	ec 01       	movw	r28, r24
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	29 f0       	breq	.+10     	; 0xc66 <calloc+0x2c>
     c5c:	a8 01       	movw	r20, r16
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	0e 94 65 07 	call	0xeca	; 0xeca <memset>
     c66:	ce 01       	movw	r24, r28
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <malloc>:
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	91 05       	cpc	r25, r1
     c7e:	10 f4       	brcc	.+4      	; 0xc84 <malloc+0x12>
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <__flp>
     c88:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <__flp+0x1>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	30 97       	sbiw	r30, 0x00	; 0
     c96:	19 f1       	breq	.+70     	; 0xcde <malloc+0x6c>
     c98:	40 81       	ld	r20, Z
     c9a:	51 81       	ldd	r21, Z+1	; 0x01
     c9c:	02 81       	ldd	r16, Z+2	; 0x02
     c9e:	13 81       	ldd	r17, Z+3	; 0x03
     ca0:	48 17       	cp	r20, r24
     ca2:	59 07       	cpc	r21, r25
     ca4:	c8 f0       	brcs	.+50     	; 0xcd8 <malloc+0x66>
     ca6:	84 17       	cp	r24, r20
     ca8:	95 07       	cpc	r25, r21
     caa:	69 f4       	brne	.+26     	; 0xcc6 <malloc+0x54>
     cac:	10 97       	sbiw	r26, 0x00	; 0
     cae:	31 f0       	breq	.+12     	; 0xcbc <malloc+0x4a>
     cb0:	12 96       	adiw	r26, 0x02	; 2
     cb2:	0c 93       	st	X, r16
     cb4:	12 97       	sbiw	r26, 0x02	; 2
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	1c 93       	st	X, r17
     cba:	27 c0       	rjmp	.+78     	; 0xd0a <malloc+0x98>
     cbc:	00 93 ca 01 	sts	0x01CA, r16	; 0x8001ca <__flp>
     cc0:	10 93 cb 01 	sts	0x01CB, r17	; 0x8001cb <__flp+0x1>
     cc4:	22 c0       	rjmp	.+68     	; 0xd0a <malloc+0x98>
     cc6:	21 15       	cp	r18, r1
     cc8:	31 05       	cpc	r19, r1
     cca:	19 f0       	breq	.+6      	; 0xcd2 <malloc+0x60>
     ccc:	42 17       	cp	r20, r18
     cce:	53 07       	cpc	r21, r19
     cd0:	18 f4       	brcc	.+6      	; 0xcd8 <malloc+0x66>
     cd2:	9a 01       	movw	r18, r20
     cd4:	bd 01       	movw	r22, r26
     cd6:	ef 01       	movw	r28, r30
     cd8:	df 01       	movw	r26, r30
     cda:	f8 01       	movw	r30, r16
     cdc:	db cf       	rjmp	.-74     	; 0xc94 <malloc+0x22>
     cde:	21 15       	cp	r18, r1
     ce0:	31 05       	cpc	r19, r1
     ce2:	f9 f0       	breq	.+62     	; 0xd22 <malloc+0xb0>
     ce4:	28 1b       	sub	r18, r24
     ce6:	39 0b       	sbc	r19, r25
     ce8:	24 30       	cpi	r18, 0x04	; 4
     cea:	31 05       	cpc	r19, r1
     cec:	80 f4       	brcc	.+32     	; 0xd0e <malloc+0x9c>
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	9b 81       	ldd	r25, Y+3	; 0x03
     cf2:	61 15       	cp	r22, r1
     cf4:	71 05       	cpc	r23, r1
     cf6:	21 f0       	breq	.+8      	; 0xd00 <malloc+0x8e>
     cf8:	fb 01       	movw	r30, r22
     cfa:	93 83       	std	Z+3, r25	; 0x03
     cfc:	82 83       	std	Z+2, r24	; 0x02
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <malloc+0x96>
     d00:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <__flp+0x1>
     d04:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__flp>
     d08:	fe 01       	movw	r30, r28
     d0a:	32 96       	adiw	r30, 0x02	; 2
     d0c:	44 c0       	rjmp	.+136    	; 0xd96 <malloc+0x124>
     d0e:	fe 01       	movw	r30, r28
     d10:	e2 0f       	add	r30, r18
     d12:	f3 1f       	adc	r31, r19
     d14:	81 93       	st	Z+, r24
     d16:	91 93       	st	Z+, r25
     d18:	22 50       	subi	r18, 0x02	; 2
     d1a:	31 09       	sbc	r19, r1
     d1c:	39 83       	std	Y+1, r19	; 0x01
     d1e:	28 83       	st	Y, r18
     d20:	3a c0       	rjmp	.+116    	; 0xd96 <malloc+0x124>
     d22:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <__brkval>
     d26:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <__brkval+0x1>
     d2a:	23 2b       	or	r18, r19
     d2c:	41 f4       	brne	.+16     	; 0xd3e <malloc+0xcc>
     d2e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     d32:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     d36:	30 93 c9 01 	sts	0x01C9, r19	; 0x8001c9 <__brkval+0x1>
     d3a:	20 93 c8 01 	sts	0x01C8, r18	; 0x8001c8 <__brkval>
     d3e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d42:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d46:	21 15       	cp	r18, r1
     d48:	31 05       	cpc	r19, r1
     d4a:	41 f4       	brne	.+16     	; 0xd5c <malloc+0xea>
     d4c:	2d b7       	in	r18, 0x3d	; 61
     d4e:	3e b7       	in	r19, 0x3e	; 62
     d50:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     d54:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     d58:	24 1b       	sub	r18, r20
     d5a:	35 0b       	sbc	r19, r21
     d5c:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <__brkval>
     d60:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <__brkval+0x1>
     d64:	e2 17       	cp	r30, r18
     d66:	f3 07       	cpc	r31, r19
     d68:	a0 f4       	brcc	.+40     	; 0xd92 <malloc+0x120>
     d6a:	2e 1b       	sub	r18, r30
     d6c:	3f 0b       	sbc	r19, r31
     d6e:	28 17       	cp	r18, r24
     d70:	39 07       	cpc	r19, r25
     d72:	78 f0       	brcs	.+30     	; 0xd92 <malloc+0x120>
     d74:	ac 01       	movw	r20, r24
     d76:	4e 5f       	subi	r20, 0xFE	; 254
     d78:	5f 4f       	sbci	r21, 0xFF	; 255
     d7a:	24 17       	cp	r18, r20
     d7c:	35 07       	cpc	r19, r21
     d7e:	48 f0       	brcs	.+18     	; 0xd92 <malloc+0x120>
     d80:	4e 0f       	add	r20, r30
     d82:	5f 1f       	adc	r21, r31
     d84:	50 93 c9 01 	sts	0x01C9, r21	; 0x8001c9 <__brkval+0x1>
     d88:	40 93 c8 01 	sts	0x01C8, r20	; 0x8001c8 <__brkval>
     d8c:	81 93       	st	Z+, r24
     d8e:	91 93       	st	Z+, r25
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <malloc+0x124>
     d92:	e0 e0       	ldi	r30, 0x00	; 0
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	cf 01       	movw	r24, r30
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	08 95       	ret

00000da2 <free>:
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	09 f4       	brne	.+2      	; 0xdac <free+0xa>
     daa:	81 c0       	rjmp	.+258    	; 0xeae <free+0x10c>
     dac:	fc 01       	movw	r30, r24
     dae:	32 97       	sbiw	r30, 0x02	; 2
     db0:	13 82       	std	Z+3, r1	; 0x03
     db2:	12 82       	std	Z+2, r1	; 0x02
     db4:	a0 91 ca 01 	lds	r26, 0x01CA	; 0x8001ca <__flp>
     db8:	b0 91 cb 01 	lds	r27, 0x01CB	; 0x8001cb <__flp+0x1>
     dbc:	10 97       	sbiw	r26, 0x00	; 0
     dbe:	81 f4       	brne	.+32     	; 0xde0 <free+0x3e>
     dc0:	20 81       	ld	r18, Z
     dc2:	31 81       	ldd	r19, Z+1	; 0x01
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <__brkval>
     dcc:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <__brkval+0x1>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	51 f5       	brne	.+84     	; 0xe2a <free+0x88>
     dd6:	f0 93 c9 01 	sts	0x01C9, r31	; 0x8001c9 <__brkval+0x1>
     dda:	e0 93 c8 01 	sts	0x01C8, r30	; 0x8001c8 <__brkval>
     dde:	67 c0       	rjmp	.+206    	; 0xeae <free+0x10c>
     de0:	ed 01       	movw	r28, r26
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	ce 17       	cp	r28, r30
     de8:	df 07       	cpc	r29, r31
     dea:	40 f4       	brcc	.+16     	; 0xdfc <free+0x5a>
     dec:	4a 81       	ldd	r20, Y+2	; 0x02
     dee:	5b 81       	ldd	r21, Y+3	; 0x03
     df0:	9e 01       	movw	r18, r28
     df2:	41 15       	cp	r20, r1
     df4:	51 05       	cpc	r21, r1
     df6:	f1 f0       	breq	.+60     	; 0xe34 <free+0x92>
     df8:	ea 01       	movw	r28, r20
     dfa:	f5 cf       	rjmp	.-22     	; 0xde6 <free+0x44>
     dfc:	d3 83       	std	Z+3, r29	; 0x03
     dfe:	c2 83       	std	Z+2, r28	; 0x02
     e00:	40 81       	ld	r20, Z
     e02:	51 81       	ldd	r21, Z+1	; 0x01
     e04:	84 0f       	add	r24, r20
     e06:	95 1f       	adc	r25, r21
     e08:	c8 17       	cp	r28, r24
     e0a:	d9 07       	cpc	r29, r25
     e0c:	59 f4       	brne	.+22     	; 0xe24 <free+0x82>
     e0e:	88 81       	ld	r24, Y
     e10:	99 81       	ldd	r25, Y+1	; 0x01
     e12:	84 0f       	add	r24, r20
     e14:	95 1f       	adc	r25, r21
     e16:	02 96       	adiw	r24, 0x02	; 2
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	80 83       	st	Z, r24
     e1c:	8a 81       	ldd	r24, Y+2	; 0x02
     e1e:	9b 81       	ldd	r25, Y+3	; 0x03
     e20:	93 83       	std	Z+3, r25	; 0x03
     e22:	82 83       	std	Z+2, r24	; 0x02
     e24:	21 15       	cp	r18, r1
     e26:	31 05       	cpc	r19, r1
     e28:	29 f4       	brne	.+10     	; 0xe34 <free+0x92>
     e2a:	f0 93 cb 01 	sts	0x01CB, r31	; 0x8001cb <__flp+0x1>
     e2e:	e0 93 ca 01 	sts	0x01CA, r30	; 0x8001ca <__flp>
     e32:	3d c0       	rjmp	.+122    	; 0xeae <free+0x10c>
     e34:	e9 01       	movw	r28, r18
     e36:	fb 83       	std	Y+3, r31	; 0x03
     e38:	ea 83       	std	Y+2, r30	; 0x02
     e3a:	49 91       	ld	r20, Y+
     e3c:	59 91       	ld	r21, Y+
     e3e:	c4 0f       	add	r28, r20
     e40:	d5 1f       	adc	r29, r21
     e42:	ec 17       	cp	r30, r28
     e44:	fd 07       	cpc	r31, r29
     e46:	61 f4       	brne	.+24     	; 0xe60 <free+0xbe>
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	84 0f       	add	r24, r20
     e4e:	95 1f       	adc	r25, r21
     e50:	02 96       	adiw	r24, 0x02	; 2
     e52:	e9 01       	movw	r28, r18
     e54:	99 83       	std	Y+1, r25	; 0x01
     e56:	88 83       	st	Y, r24
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	9b 83       	std	Y+3, r25	; 0x03
     e5e:	8a 83       	std	Y+2, r24	; 0x02
     e60:	e0 e0       	ldi	r30, 0x00	; 0
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	12 96       	adiw	r26, 0x02	; 2
     e66:	8d 91       	ld	r24, X+
     e68:	9c 91       	ld	r25, X
     e6a:	13 97       	sbiw	r26, 0x03	; 3
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	19 f0       	breq	.+6      	; 0xe76 <free+0xd4>
     e70:	fd 01       	movw	r30, r26
     e72:	dc 01       	movw	r26, r24
     e74:	f7 cf       	rjmp	.-18     	; 0xe64 <free+0xc2>
     e76:	8d 91       	ld	r24, X+
     e78:	9c 91       	ld	r25, X
     e7a:	11 97       	sbiw	r26, 0x01	; 1
     e7c:	9d 01       	movw	r18, r26
     e7e:	2e 5f       	subi	r18, 0xFE	; 254
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	82 0f       	add	r24, r18
     e84:	93 1f       	adc	r25, r19
     e86:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <__brkval>
     e8a:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <__brkval+0x1>
     e8e:	28 17       	cp	r18, r24
     e90:	39 07       	cpc	r19, r25
     e92:	69 f4       	brne	.+26     	; 0xeae <free+0x10c>
     e94:	30 97       	sbiw	r30, 0x00	; 0
     e96:	29 f4       	brne	.+10     	; 0xea2 <free+0x100>
     e98:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <__flp+0x1>
     e9c:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__flp>
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <free+0x104>
     ea2:	13 82       	std	Z+3, r1	; 0x03
     ea4:	12 82       	std	Z+2, r1	; 0x02
     ea6:	b0 93 c9 01 	sts	0x01C9, r27	; 0x8001c9 <__brkval+0x1>
     eaa:	a0 93 c8 01 	sts	0x01C8, r26	; 0x8001c8 <__brkval>
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <strnlen_P>:
     eb4:	fc 01       	movw	r30, r24
     eb6:	05 90       	lpm	r0, Z+
     eb8:	61 50       	subi	r22, 0x01	; 1
     eba:	70 40       	sbci	r23, 0x00	; 0
     ebc:	01 10       	cpse	r0, r1
     ebe:	d8 f7       	brcc	.-10     	; 0xeb6 <strnlen_P+0x2>
     ec0:	80 95       	com	r24
     ec2:	90 95       	com	r25
     ec4:	8e 0f       	add	r24, r30
     ec6:	9f 1f       	adc	r25, r31
     ec8:	08 95       	ret

00000eca <memset>:
     eca:	dc 01       	movw	r26, r24
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <memset+0x6>
     ece:	6d 93       	st	X+, r22
     ed0:	41 50       	subi	r20, 0x01	; 1
     ed2:	50 40       	sbci	r21, 0x00	; 0
     ed4:	e0 f7       	brcc	.-8      	; 0xece <memset+0x4>
     ed6:	08 95       	ret

00000ed8 <strnlen>:
     ed8:	fc 01       	movw	r30, r24
     eda:	61 50       	subi	r22, 0x01	; 1
     edc:	70 40       	sbci	r23, 0x00	; 0
     ede:	01 90       	ld	r0, Z+
     ee0:	01 10       	cpse	r0, r1
     ee2:	d8 f7       	brcc	.-10     	; 0xeda <strnlen+0x2>
     ee4:	80 95       	com	r24
     ee6:	90 95       	com	r25
     ee8:	8e 0f       	add	r24, r30
     eea:	9f 1f       	adc	r25, r31
     eec:	08 95       	ret

00000eee <fputc>:
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	fb 01       	movw	r30, r22
     ef8:	23 81       	ldd	r18, Z+3	; 0x03
     efa:	21 fd       	sbrc	r18, 1
     efc:	03 c0       	rjmp	.+6      	; 0xf04 <fputc+0x16>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	9f ef       	ldi	r25, 0xFF	; 255
     f02:	2c c0       	rjmp	.+88     	; 0xf5c <fputc+0x6e>
     f04:	22 ff       	sbrs	r18, 2
     f06:	16 c0       	rjmp	.+44     	; 0xf34 <fputc+0x46>
     f08:	46 81       	ldd	r20, Z+6	; 0x06
     f0a:	57 81       	ldd	r21, Z+7	; 0x07
     f0c:	24 81       	ldd	r18, Z+4	; 0x04
     f0e:	35 81       	ldd	r19, Z+5	; 0x05
     f10:	42 17       	cp	r20, r18
     f12:	53 07       	cpc	r21, r19
     f14:	44 f4       	brge	.+16     	; 0xf26 <fputc+0x38>
     f16:	a0 81       	ld	r26, Z
     f18:	b1 81       	ldd	r27, Z+1	; 0x01
     f1a:	9d 01       	movw	r18, r26
     f1c:	2f 5f       	subi	r18, 0xFF	; 255
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	31 83       	std	Z+1, r19	; 0x01
     f22:	20 83       	st	Z, r18
     f24:	8c 93       	st	X, r24
     f26:	26 81       	ldd	r18, Z+6	; 0x06
     f28:	37 81       	ldd	r19, Z+7	; 0x07
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	37 83       	std	Z+7, r19	; 0x07
     f30:	26 83       	std	Z+6, r18	; 0x06
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <fputc+0x6e>
     f34:	8b 01       	movw	r16, r22
     f36:	ec 01       	movw	r28, r24
     f38:	fb 01       	movw	r30, r22
     f3a:	00 84       	ldd	r0, Z+8	; 0x08
     f3c:	f1 85       	ldd	r31, Z+9	; 0x09
     f3e:	e0 2d       	mov	r30, r0
     f40:	09 95       	icall
     f42:	89 2b       	or	r24, r25
     f44:	e1 f6       	brne	.-72     	; 0xefe <fputc+0x10>
     f46:	d8 01       	movw	r26, r16
     f48:	16 96       	adiw	r26, 0x06	; 6
     f4a:	8d 91       	ld	r24, X+
     f4c:	9c 91       	ld	r25, X
     f4e:	17 97       	sbiw	r26, 0x07	; 7
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	17 96       	adiw	r26, 0x07	; 7
     f54:	9c 93       	st	X, r25
     f56:	8e 93       	st	-X, r24
     f58:	16 97       	sbiw	r26, 0x06	; 6
     f5a:	ce 01       	movw	r24, r28
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <__ultoa_invert>:
     f66:	fa 01       	movw	r30, r20
     f68:	aa 27       	eor	r26, r26
     f6a:	28 30       	cpi	r18, 0x08	; 8
     f6c:	51 f1       	breq	.+84     	; 0xfc2 <__ultoa_invert+0x5c>
     f6e:	20 31       	cpi	r18, 0x10	; 16
     f70:	81 f1       	breq	.+96     	; 0xfd2 <__ultoa_invert+0x6c>
     f72:	e8 94       	clt
     f74:	6f 93       	push	r22
     f76:	6e 7f       	andi	r22, 0xFE	; 254
     f78:	6e 5f       	subi	r22, 0xFE	; 254
     f7a:	7f 4f       	sbci	r23, 0xFF	; 255
     f7c:	8f 4f       	sbci	r24, 0xFF	; 255
     f7e:	9f 4f       	sbci	r25, 0xFF	; 255
     f80:	af 4f       	sbci	r26, 0xFF	; 255
     f82:	b1 e0       	ldi	r27, 0x01	; 1
     f84:	3e d0       	rcall	.+124    	; 0x1002 <__ultoa_invert+0x9c>
     f86:	b4 e0       	ldi	r27, 0x04	; 4
     f88:	3c d0       	rcall	.+120    	; 0x1002 <__ultoa_invert+0x9c>
     f8a:	67 0f       	add	r22, r23
     f8c:	78 1f       	adc	r23, r24
     f8e:	89 1f       	adc	r24, r25
     f90:	9a 1f       	adc	r25, r26
     f92:	a1 1d       	adc	r26, r1
     f94:	68 0f       	add	r22, r24
     f96:	79 1f       	adc	r23, r25
     f98:	8a 1f       	adc	r24, r26
     f9a:	91 1d       	adc	r25, r1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	6a 0f       	add	r22, r26
     fa0:	71 1d       	adc	r23, r1
     fa2:	81 1d       	adc	r24, r1
     fa4:	91 1d       	adc	r25, r1
     fa6:	a1 1d       	adc	r26, r1
     fa8:	20 d0       	rcall	.+64     	; 0xfea <__ultoa_invert+0x84>
     faa:	09 f4       	brne	.+2      	; 0xfae <__ultoa_invert+0x48>
     fac:	68 94       	set
     fae:	3f 91       	pop	r19
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	26 9f       	mul	r18, r22
     fb4:	11 24       	eor	r1, r1
     fb6:	30 19       	sub	r19, r0
     fb8:	30 5d       	subi	r19, 0xD0	; 208
     fba:	31 93       	st	Z+, r19
     fbc:	de f6       	brtc	.-74     	; 0xf74 <__ultoa_invert+0xe>
     fbe:	cf 01       	movw	r24, r30
     fc0:	08 95       	ret
     fc2:	46 2f       	mov	r20, r22
     fc4:	47 70       	andi	r20, 0x07	; 7
     fc6:	40 5d       	subi	r20, 0xD0	; 208
     fc8:	41 93       	st	Z+, r20
     fca:	b3 e0       	ldi	r27, 0x03	; 3
     fcc:	0f d0       	rcall	.+30     	; 0xfec <__ultoa_invert+0x86>
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__ultoa_invert+0x5c>
     fd0:	f6 cf       	rjmp	.-20     	; 0xfbe <__ultoa_invert+0x58>
     fd2:	46 2f       	mov	r20, r22
     fd4:	4f 70       	andi	r20, 0x0F	; 15
     fd6:	40 5d       	subi	r20, 0xD0	; 208
     fd8:	4a 33       	cpi	r20, 0x3A	; 58
     fda:	18 f0       	brcs	.+6      	; 0xfe2 <__ultoa_invert+0x7c>
     fdc:	49 5d       	subi	r20, 0xD9	; 217
     fde:	31 fd       	sbrc	r19, 1
     fe0:	40 52       	subi	r20, 0x20	; 32
     fe2:	41 93       	st	Z+, r20
     fe4:	02 d0       	rcall	.+4      	; 0xfea <__ultoa_invert+0x84>
     fe6:	a9 f7       	brne	.-22     	; 0xfd2 <__ultoa_invert+0x6c>
     fe8:	ea cf       	rjmp	.-44     	; 0xfbe <__ultoa_invert+0x58>
     fea:	b4 e0       	ldi	r27, 0x04	; 4
     fec:	a6 95       	lsr	r26
     fee:	97 95       	ror	r25
     ff0:	87 95       	ror	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	ba 95       	dec	r27
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__ultoa_invert+0x86>
     ffa:	00 97       	sbiw	r24, 0x00	; 0
     ffc:	61 05       	cpc	r22, r1
     ffe:	71 05       	cpc	r23, r1
    1000:	08 95       	ret
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
    1006:	0a 2e       	mov	r0, r26
    1008:	06 94       	lsr	r0
    100a:	57 95       	ror	r21
    100c:	47 95       	ror	r20
    100e:	37 95       	ror	r19
    1010:	27 95       	ror	r18
    1012:	ba 95       	dec	r27
    1014:	c9 f7       	brne	.-14     	; 0x1008 <__ultoa_invert+0xa2>
    1016:	62 0f       	add	r22, r18
    1018:	73 1f       	adc	r23, r19
    101a:	84 1f       	adc	r24, r20
    101c:	95 1f       	adc	r25, r21
    101e:	a0 1d       	adc	r26, r0
    1020:	08 95       	ret

00001022 <__prologue_saves__>:
    1022:	2f 92       	push	r2
    1024:	3f 92       	push	r3
    1026:	4f 92       	push	r4
    1028:	5f 92       	push	r5
    102a:	6f 92       	push	r6
    102c:	7f 92       	push	r7
    102e:	8f 92       	push	r8
    1030:	9f 92       	push	r9
    1032:	af 92       	push	r10
    1034:	bf 92       	push	r11
    1036:	cf 92       	push	r12
    1038:	df 92       	push	r13
    103a:	ef 92       	push	r14
    103c:	ff 92       	push	r15
    103e:	0f 93       	push	r16
    1040:	1f 93       	push	r17
    1042:	cf 93       	push	r28
    1044:	df 93       	push	r29
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	ca 1b       	sub	r28, r26
    104c:	db 0b       	sbc	r29, r27
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	09 94       	ijmp

0000105a <__epilogue_restores__>:
    105a:	2a 88       	ldd	r2, Y+18	; 0x12
    105c:	39 88       	ldd	r3, Y+17	; 0x11
    105e:	48 88       	ldd	r4, Y+16	; 0x10
    1060:	5f 84       	ldd	r5, Y+15	; 0x0f
    1062:	6e 84       	ldd	r6, Y+14	; 0x0e
    1064:	7d 84       	ldd	r7, Y+13	; 0x0d
    1066:	8c 84       	ldd	r8, Y+12	; 0x0c
    1068:	9b 84       	ldd	r9, Y+11	; 0x0b
    106a:	aa 84       	ldd	r10, Y+10	; 0x0a
    106c:	b9 84       	ldd	r11, Y+9	; 0x09
    106e:	c8 84       	ldd	r12, Y+8	; 0x08
    1070:	df 80       	ldd	r13, Y+7	; 0x07
    1072:	ee 80       	ldd	r14, Y+6	; 0x06
    1074:	fd 80       	ldd	r15, Y+5	; 0x05
    1076:	0c 81       	ldd	r16, Y+4	; 0x04
    1078:	1b 81       	ldd	r17, Y+3	; 0x03
    107a:	aa 81       	ldd	r26, Y+2	; 0x02
    107c:	b9 81       	ldd	r27, Y+1	; 0x01
    107e:	ce 0f       	add	r28, r30
    1080:	d1 1d       	adc	r29, r1
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	ed 01       	movw	r28, r26
    108e:	08 95       	ret

00001090 <_exit>:
    1090:	f8 94       	cli

00001092 <__stop_program>:
    1092:	ff cf       	rjmp	.-2      	; 0x1092 <__stop_program>

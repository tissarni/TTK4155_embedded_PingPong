
node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fc0  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081fc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  000823f4  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00082478  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  00082878  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   000095ad  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001714  00000000  00000000  00029a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000122e  00000000  00000000  0002b177  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000258  00000000  00000000  0002c3a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  0002c5fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001390b  00000000  00000000  0002c7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005b93  00000000  00000000  00040100  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000554e4  00000000  00000000  00045c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000009f4  00000000  00000000  0009b178  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 65 04 08 00 61 04 08 00 61 04 08 00     ... e...a...a...
   80010:	61 04 08 00 61 04 08 00 61 04 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 04 08 00 61 04 08 00 00 00 00 00 61 04 08 00     a...a.......a...
   8003c:	61 04 08 00 61 04 08 00 61 04 08 00 61 04 08 00     a...a...a...a...
   8004c:	61 04 08 00 61 04 08 00 61 04 08 00 61 04 08 00     a...a...a...a...
   8005c:	61 04 08 00 d1 0d 08 00 61 04 08 00 00 00 00 00     a.......a.......
   8006c:	61 04 08 00 61 04 08 00 61 04 08 00 61 04 08 00     a...a...a...a...
	...
   80084:	61 04 08 00 61 04 08 00 61 04 08 00 61 04 08 00     a...a...a...a...
   80094:	61 04 08 00 61 04 08 00 61 04 08 00 61 04 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 04 08 00 61 04 08 00 61 04 08 00     ....a...a...a...
   800b4:	61 04 08 00 61 04 08 00 61 04 08 00 61 04 08 00     a...a...a...a...
   800c4:	61 04 08 00 61 04 08 00 61 04 08 00 61 04 08 00     a...a...a...a...
   800d4:	61 04 08 00 61 04 08 00 61 04 08 00 61 04 08 00     a...a...a...a...
   800e4:	61 04 08 00 61 04 08 00 f1 03 08 00 61 04 08 00     a...a.......a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081fc0 	.word	0x00081fc0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081fc0 	.word	0x00081fc0
   80154:	20000438 	.word	0x20000438
   80158:	00081fc0 	.word	0x00081fc0
   8015c:	00000000 	.word	0x00000000

00080160 <DAC_init>:
#include "sam.h"


void DAC_init(){
	
	PMC->PMC_PCER1 |= PMC_PCER1_PID38;
   80160:	4a0c      	ldr	r2, [pc, #48]	; (80194 <DAC_init+0x34>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	DACC ->DACC_WPMR &= ~(0x1u << 1);
   8016e:	4b0a      	ldr	r3, [pc, #40]	; (80198 <DAC_init+0x38>)
   80170:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
   80174:	f022 0202 	bic.w	r2, r2, #2
   80178:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	DACC -> DACC_CHER  |= DACC_CHER_CH1;
   8017c:	691a      	ldr	r2, [r3, #16]
   8017e:	f042 0202 	orr.w	r2, r2, #2
   80182:	611a      	str	r2, [r3, #16]
	DACC -> DACC_MR |= DACC_MR_USER_SEL_CHANNEL1;	
   80184:	685a      	ldr	r2, [r3, #4]
   80186:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8018a:	605a      	str	r2, [r3, #4]
	DACC -> DACC_MR |= DACC_MR_WORD_HALF;
   8018c:	685a      	ldr	r2, [r3, #4]
   8018e:	605a      	str	r2, [r3, #4]
   80190:	4770      	bx	lr
   80192:	bf00      	nop
   80194:	400e0600 	.word	0x400e0600
   80198:	400c8000 	.word	0x400c8000

0008019c <DAC_send_voltage>:
}


void DAC_send_voltage(float* voltage){
   8019c:	b510      	push	{r4, lr}
   8019e:	4604      	mov	r4, r0
	if (*voltage > 5){
   801a0:	490d      	ldr	r1, [pc, #52]	; (801d8 <DAC_send_voltage+0x3c>)
   801a2:	6800      	ldr	r0, [r0, #0]
   801a4:	4b0d      	ldr	r3, [pc, #52]	; (801dc <DAC_send_voltage+0x40>)
   801a6:	4798      	blx	r3
   801a8:	b108      	cbz	r0, 801ae <DAC_send_voltage+0x12>
		*voltage = 5;
   801aa:	4b0b      	ldr	r3, [pc, #44]	; (801d8 <DAC_send_voltage+0x3c>)
   801ac:	6023      	str	r3, [r4, #0]
	}
	if (*voltage < 0){
   801ae:	2100      	movs	r1, #0
   801b0:	6820      	ldr	r0, [r4, #0]
   801b2:	4b0b      	ldr	r3, [pc, #44]	; (801e0 <DAC_send_voltage+0x44>)
   801b4:	4798      	blx	r3
   801b6:	b960      	cbnz	r0, 801d2 <DAC_send_voltage+0x36>
		*voltage = 0;
	}
	uint16_t command = (uint16_t)((*voltage)*4095/5);
   801b8:	490a      	ldr	r1, [pc, #40]	; (801e4 <DAC_send_voltage+0x48>)
   801ba:	6820      	ldr	r0, [r4, #0]
   801bc:	4b0a      	ldr	r3, [pc, #40]	; (801e8 <DAC_send_voltage+0x4c>)
   801be:	4798      	blx	r3
   801c0:	4905      	ldr	r1, [pc, #20]	; (801d8 <DAC_send_voltage+0x3c>)
   801c2:	4b0a      	ldr	r3, [pc, #40]	; (801ec <DAC_send_voltage+0x50>)
   801c4:	4798      	blx	r3
   801c6:	4b0a      	ldr	r3, [pc, #40]	; (801f0 <DAC_send_voltage+0x54>)
   801c8:	4798      	blx	r3
   801ca:	b280      	uxth	r0, r0
	DACC->DACC_CDR = DACC_CDR_DATA(command);
   801cc:	4b09      	ldr	r3, [pc, #36]	; (801f4 <DAC_send_voltage+0x58>)
   801ce:	6218      	str	r0, [r3, #32]
   801d0:	bd10      	pop	{r4, pc}
		*voltage = 0;
   801d2:	2300      	movs	r3, #0
   801d4:	6023      	str	r3, [r4, #0]
   801d6:	e7ef      	b.n	801b8 <DAC_send_voltage+0x1c>
   801d8:	40a00000 	.word	0x40a00000
   801dc:	00081d11 	.word	0x00081d11
   801e0:	00081cd5 	.word	0x00081cd5
   801e4:	457ff000 	.word	0x457ff000
   801e8:	00081999 	.word	0x00081999
   801ec:	00081b01 	.word	0x00081b01
   801f0:	00081d71 	.word	0x00081d71
   801f4:	400c8000 	.word	0x400c8000

000801f8 <adc_init>:
#include "sam.h"
#include <stdio.h>

void adc_init(void){
	
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;
   801f8:	4a0d      	ldr	r2, [pc, #52]	; (80230 <adc_init+0x38>)
   801fa:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   801fe:	f043 0320 	orr.w	r3, r3, #32
   80202:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	ADC->ADC_CR |= ADC_CR_SWRST;
   80206:	4b0b      	ldr	r3, [pc, #44]	; (80234 <adc_init+0x3c>)
   80208:	681a      	ldr	r2, [r3, #0]
   8020a:	f042 0201 	orr.w	r2, r2, #1
   8020e:	601a      	str	r2, [r3, #0]
	
	ADC->ADC_MR |= (1 << 4);
   80210:	685a      	ldr	r2, [r3, #4]
   80212:	f042 0210 	orr.w	r2, r2, #16
   80216:	605a      	str	r2, [r3, #4]
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;
   80218:	685a      	ldr	r2, [r3, #4]
   8021a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8021e:	605a      	str	r2, [r3, #4]
	
	ADC->ADC_CHER |= ADC_CHER_CH6;
   80220:	691a      	ldr	r2, [r3, #16]
   80222:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   80226:	611a      	str	r2, [r3, #16]
	ADC->ADC_CR = ADC_CR_START;
   80228:	2202      	movs	r2, #2
   8022a:	601a      	str	r2, [r3, #0]
   8022c:	4770      	bx	lr
   8022e:	bf00      	nop
   80230:	400e0600 	.word	0x400e0600
   80234:	400c0000 	.word	0x400c0000

00080238 <adc_read>:

}


uint32_t adc_read(){
	uint32_t data =  ADC->ADC_CDR[6];
   80238:	4b01      	ldr	r3, [pc, #4]	; (80240 <adc_read+0x8>)
   8023a:	6e98      	ldr	r0, [r3, #104]	; 0x68
	return data;
}
   8023c:	4770      	bx	lr
   8023e:	bf00      	nop
   80240:	400c0000 	.word	0x400c0000

00080244 <score>:


int score(){
   80244:	b508      	push	{r3, lr}
	int j = 0;
	if (adc_read() < 600) {
   80246:	4b0a      	ldr	r3, [pc, #40]	; (80270 <score+0x2c>)
   80248:	4798      	blx	r3
   8024a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
   8024e:	d20c      	bcs.n	8026a <score+0x26>
		//printf("BALL IN GOAL !!!! \r\n");
		while (adc_read() < 600) {};
   80250:	4b07      	ldr	r3, [pc, #28]	; (80270 <score+0x2c>)
   80252:	4798      	blx	r3
   80254:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
   80258:	d3fa      	bcc.n	80250 <score+0xc>
   8025a:	2300      	movs	r3, #0
   8025c:	e000      	b.n	80260 <score+0x1c>
		for (int i = 0; i < 40000000; i++){
   8025e:	3301      	adds	r3, #1
   80260:	4a04      	ldr	r2, [pc, #16]	; (80274 <score+0x30>)
   80262:	4293      	cmp	r3, r2
   80264:	ddfb      	ble.n	8025e <score+0x1a>
		}
		return 1;
   80266:	2001      	movs	r0, #1
   80268:	bd08      	pop	{r3, pc}
	}
	return 0;
   8026a:	2000      	movs	r0, #0
   8026c:	bd08      	pop	{r3, pc}
   8026e:	bf00      	nop
   80270:	00080239 	.word	0x00080239
   80274:	026259ff 	.word	0x026259ff

00080278 <can_init>:
 * \retval Success(0) or failure(1)
 */


uint8_t can_init(uint32_t can_br, uint8_t num_tx_mb, uint8_t num_rx_mb)
{
   80278:	b4f0      	push	{r4, r5, r6, r7}
	
	//Make sure num_rx_mb and num_tx_mb is valid
	if(num_rx_mb > 8 | num_tx_mb > 8 | num_rx_mb + num_tx_mb > 8)
   8027a:	1857      	adds	r7, r2, r1
   8027c:	2f08      	cmp	r7, #8
   8027e:	bfd4      	ite	le
   80280:	2300      	movle	r3, #0
   80282:	2301      	movgt	r3, #1
   80284:	2908      	cmp	r1, #8
   80286:	bf98      	it	ls
   80288:	2a08      	cmpls	r2, #8
   8028a:	d85c      	bhi.n	80346 <can_init+0xce>
   8028c:	460d      	mov	r5, r1
   8028e:	2b00      	cmp	r3, #0
   80290:	d159      	bne.n	80346 <can_init+0xce>


	uint32_t ul_status; 
	
	//Disable can
	CAN0->CAN_MR &= ~CAN_MR_CANEN; 
   80292:	4a2e      	ldr	r2, [pc, #184]	; (8034c <can_init+0xd4>)
   80294:	6813      	ldr	r3, [r2, #0]
   80296:	f023 0301 	bic.w	r3, r3, #1
   8029a:	6013      	str	r3, [r2, #0]
	//Clear status register on read
	ul_status = CAN0->CAN_SR; 
   8029c:	6913      	ldr	r3, [r2, #16]
	
	
	// Disable interrupts on CANH and CANL pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   8029e:	4b2c      	ldr	r3, [pc, #176]	; (80350 <can_init+0xd8>)
   802a0:	f44f 7440 	mov.w	r4, #768	; 0x300
   802a4:	645c      	str	r4, [r3, #68]	; 0x44
	
	//Select CAN0 RX and TX in PIOA
	uint32_t ul_sr = PIOA->PIO_ABSR;
   802a6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	PIOA->PIO_ABSR = ~(PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0) & ul_sr;
   802a8:	f024 0403 	bic.w	r4, r4, #3
   802ac:	671c      	str	r4, [r3, #112]	; 0x70
	
	// Disable the Parallel IO (PIO) of the Rx and Tx pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0;
   802ae:	2403      	movs	r4, #3
   802b0:	605c      	str	r4, [r3, #4]
	
	// Enable pull up on CANH and CANL pin
	PIOA->PIO_PUER = (PIO_PA1A_CANRX0 | PIO_PA0A_CANTX0);
   802b2:	665c      	str	r4, [r3, #100]	; 0x64
	
	
	//Enable Clock for CAN0 in PMC
	PMC->PMC_PCR = PMC_PCR_EN | (0 << PMC_PCR_DIV_Pos) | PMC_PCR_CMD | (ID_CAN0 << PMC_PCR_PID_Pos); // DIV = 1(can clk = MCK/2), CMD = 1 (write), PID = 2B (CAN0)
   802b4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   802b8:	4c26      	ldr	r4, [pc, #152]	; (80354 <can_init+0xdc>)
   802ba:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
	PMC->PMC_PCER1 |= 1 << (ID_CAN0 - 32);
   802be:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   802c2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   802c6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	
	//Set baudrate, Phase1, phase2 and propagation delay for can bus. Must match on all nodes!
	CAN0->CAN_BR = can_br; 
   802ca:	6150      	str	r0, [r2, #20]
	

	/****** Start of mailbox configuration ******/

	uint32_t can_ier = 0;
   802cc:	2400      	movs	r4, #0

	/* Configure receive mailboxes */
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   802ce:	e019      	b.n	80304 <can_init+0x8c>
	{
		CAN0->CAN_MB[n].CAN_MAM = 0; //Accept all messages
   802d0:	481e      	ldr	r0, [pc, #120]	; (8034c <can_init+0xd4>)
   802d2:	f101 0310 	add.w	r3, r1, #16
   802d6:	015b      	lsls	r3, r3, #5
   802d8:	18c2      	adds	r2, r0, r3
   802da:	2600      	movs	r6, #0
   802dc:	6056      	str	r6, [r2, #4]
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   802de:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   802e2:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   802e6:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_RX);
   802ea:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   802ee:	50c6      	str	r6, [r0, r3]
		CAN0->CAN_MB[n].CAN_MCR |= CAN_MCR_MTCR;
   802f0:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   802f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   802f8:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

		can_ier |= 1 << n; //Enable interrupt on rx mailbox
   802fc:	2301      	movs	r3, #1
   802fe:	408b      	lsls	r3, r1
   80300:	431c      	orrs	r4, r3
	for (int n = num_tx_mb; n <= num_rx_mb + num_tx_mb; n++)  //Simply one mailbox setup for all messages. You might want to apply filter for them.
   80302:	3101      	adds	r1, #1
   80304:	42b9      	cmp	r1, r7
   80306:	dde3      	ble.n	802d0 <can_init+0x58>
   80308:	2300      	movs	r3, #0
   8030a:	e00d      	b.n	80328 <can_init+0xb0>
	}
	
	/*Configure transmit mailboxes */
	for (int n = 0; n < num_tx_mb; n++)
	{
		CAN0->CAN_MB[n].CAN_MID = CAN_MID_MIDE;
   8030c:	490f      	ldr	r1, [pc, #60]	; (8034c <can_init+0xd4>)
   8030e:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80312:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   80316:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
		CAN0->CAN_MB[n].CAN_MMR = (CAN_MMR_MOT_MB_TX);
   8031a:	f103 0210 	add.w	r2, r3, #16
   8031e:	0152      	lsls	r2, r2, #5
   80320:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80324:	5088      	str	r0, [r1, r2]
	for (int n = 0; n < num_tx_mb; n++)
   80326:	3301      	adds	r3, #1
   80328:	42ab      	cmp	r3, r5
   8032a:	dbef      	blt.n	8030c <can_init+0x94>
	}
	
	/****** End of mailbox configuraion ******/

	//Enable interrupt on receive mailboxes
	CAN0->CAN_IER = can_ier;
   8032c:	4b07      	ldr	r3, [pc, #28]	; (8034c <can_init+0xd4>)
   8032e:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80330:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80334:	4a08      	ldr	r2, [pc, #32]	; (80358 <can_init+0xe0>)
   80336:	6051      	str	r1, [r2, #4]

	//Enable interrupt in NVIC 
	NVIC_EnableIRQ(ID_CAN0);

	//enable CAN
	CAN0->CAN_MR |= CAN_MR_CANEN;
   80338:	681a      	ldr	r2, [r3, #0]
   8033a:	f042 0201 	orr.w	r2, r2, #1
   8033e:	601a      	str	r2, [r3, #0]

	return 0;
   80340:	2000      	movs	r0, #0
}
   80342:	bcf0      	pop	{r4, r5, r6, r7}
   80344:	4770      	bx	lr
		return 1; //Too many mailboxes is configured
   80346:	2001      	movs	r0, #1
   80348:	e7fb      	b.n	80342 <can_init+0xca>
   8034a:	bf00      	nop
   8034c:	400b4000 	.word	0x400b4000
   80350:	400e0e00 	.word	0x400e0e00
   80354:	1000102b 	.word	0x1000102b
   80358:	e000e100 	.word	0xe000e100

0008035c <can_init_def_tx_rx_mb>:
{
   8035c:	b508      	push	{r3, lr}
	return can_init(can_br, 1, 2);
   8035e:	2202      	movs	r2, #2
   80360:	2101      	movs	r1, #1
   80362:	4b01      	ldr	r3, [pc, #4]	; (80368 <can_init_def_tx_rx_mb+0xc>)
   80364:	4798      	blx	r3
}
   80366:	bd08      	pop	{r3, pc}
   80368:	00080279 	.word	0x00080279

0008036c <can_receive>:
 * \retval Success(0) or failure(1)
 */
uint8_t can_receive(CAN_MESSAGE* can_msg, uint8_t rx_mb_id)
{
	//Check that mailbox is ready
	if(CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MRDY)
   8036c:	014b      	lsls	r3, r1, #5
   8036e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80372:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   80376:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   8037a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8037e:	d033      	beq.n	803e8 <can_receive+0x7c>
{
   80380:	b470      	push	{r4, r5, r6}
	{
		//Get data from CAN mailbox
		uint32_t data_low = CAN0->CAN_MB[rx_mb_id].CAN_MDL;
   80382:	014b      	lsls	r3, r1, #5
   80384:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   80388:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   8038c:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
		uint32_t data_high = CAN0->CAN_MB[rx_mb_id].CAN_MDH;
   80390:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
		
		//Get message ID
		can_msg->id = (uint16_t)((CAN0->CAN_MB[rx_mb_id].CAN_MID & CAN_MID_MIDvA_Msk) >> CAN_MID_MIDvA_Pos);
   80394:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   80398:	f3c5 458a 	ubfx	r5, r5, #18, #11
   8039c:	8005      	strh	r5, [r0, #0]
		
		//Get data length
		can_msg->data_length = (uint8_t)((CAN0->CAN_MB[rx_mb_id].CAN_MSR & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos);
   8039e:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   803a2:	f3c5 4503 	ubfx	r5, r5, #16, #4
   803a6:	7085      	strb	r5, [r0, #2]
		
		//Put data in CAN_MESSAGE object
		for(int i = 0; i < can_msg->data_length;i++)
   803a8:	2300      	movs	r3, #0
   803aa:	e003      	b.n	803b4 <can_receive+0x48>
				can_msg->data[i] = (char)(data_low & 0xff);
				data_low = data_low >> 8;
			}
			else
			{
				can_msg->data[i] = (uint8_t)(data_high & 0xff);
   803ac:	18c6      	adds	r6, r0, r3
   803ae:	70f2      	strb	r2, [r6, #3]
				data_high = data_high >> 8;
   803b0:	0a12      	lsrs	r2, r2, #8
		for(int i = 0; i < can_msg->data_length;i++)
   803b2:	3301      	adds	r3, #1
   803b4:	42ab      	cmp	r3, r5
   803b6:	da05      	bge.n	803c4 <can_receive+0x58>
			if(i < 4)
   803b8:	2b03      	cmp	r3, #3
   803ba:	dcf7      	bgt.n	803ac <can_receive+0x40>
				can_msg->data[i] = (char)(data_low & 0xff);
   803bc:	18c6      	adds	r6, r0, r3
   803be:	70f4      	strb	r4, [r6, #3]
				data_low = data_low >> 8;
   803c0:	0a24      	lsrs	r4, r4, #8
   803c2:	e7f6      	b.n	803b2 <can_receive+0x46>
			}
		}
		
		//Reset for new receive
		CAN0->CAN_MB[rx_mb_id].CAN_MMR = CAN_MMR_MOT_MB_RX;
   803c4:	4b09      	ldr	r3, [pc, #36]	; (803ec <can_receive+0x80>)
   803c6:	f101 0210 	add.w	r2, r1, #16
   803ca:	0152      	lsls	r2, r2, #5
   803cc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803d0:	5098      	str	r0, [r3, r2]
		CAN0->CAN_MB[rx_mb_id].CAN_MCR |= CAN_MCR_MTCR;
   803d2:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   803d6:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   803da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   803de:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
		return 0;
   803e2:	2000      	movs	r0, #0
	}
	else //Mailbox busy
	{
		return 1;
	}
   803e4:	bc70      	pop	{r4, r5, r6}
   803e6:	4770      	bx	lr
		return 1;
   803e8:	2001      	movs	r0, #1
   803ea:	4770      	bx	lr
   803ec:	400b4000 	.word	0x400b4000

000803f0 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   803f0:	b510      	push	{r4, lr}
   803f2:	b084      	sub	sp, #16
	
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   803f4:	4b15      	ldr	r3, [pc, #84]	; (8044c <CAN0_Handler+0x5c>)
   803f6:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   803f8:	f014 0f06 	tst.w	r4, #6
   803fc:	d019      	beq.n	80432 <CAN0_Handler+0x42>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   803fe:	f014 0f02 	tst.w	r4, #2
   80402:	d108      	bne.n	80416 <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);
			
		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80404:	f014 0f04 	tst.w	r4, #4
   80408:	d00a      	beq.n	80420 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   8040a:	2102      	movs	r1, #2
   8040c:	a801      	add	r0, sp, #4
   8040e:	4b10      	ldr	r3, [pc, #64]	; (80450 <CAN0_Handler+0x60>)
   80410:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80412:	2300      	movs	r3, #0
   80414:	e009      	b.n	8042a <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   80416:	2101      	movs	r1, #1
   80418:	a801      	add	r0, sp, #4
   8041a:	4b0d      	ldr	r3, [pc, #52]	; (80450 <CAN0_Handler+0x60>)
   8041c:	4798      	blx	r3
   8041e:	e7f8      	b.n	80412 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80420:	480c      	ldr	r0, [pc, #48]	; (80454 <CAN0_Handler+0x64>)
   80422:	4b0d      	ldr	r3, [pc, #52]	; (80458 <CAN0_Handler+0x68>)
   80424:	4798      	blx	r3
   80426:	e7f4      	b.n	80412 <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   80428:	3301      	adds	r3, #1
   8042a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   8042e:	4293      	cmp	r3, r2
   80430:	dbfa      	blt.n	80428 <CAN0_Handler+0x38>
			if(DEBUG_INTERRUPT)printf("DATA : %d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80432:	f014 0f01 	tst.w	r4, #1
   80436:	d002      	beq.n	8043e <CAN0_Handler+0x4e>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   80438:	2201      	movs	r2, #1
   8043a:	4b04      	ldr	r3, [pc, #16]	; (8044c <CAN0_Handler+0x5c>)
   8043c:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8043e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80442:	4b06      	ldr	r3, [pc, #24]	; (8045c <CAN0_Handler+0x6c>)
   80444:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
   80448:	b004      	add	sp, #16
   8044a:	bd10      	pop	{r4, pc}
   8044c:	400b4000 	.word	0x400b4000
   80450:	0008036d 	.word	0x0008036d
   80454:	00081f20 	.word	0x00081f20
   80458:	00080b85 	.word	0x00080b85
   8045c:	e000e100 	.word	0xe000e100

00080460 <Dummy_Handler>:
   80460:	e7fe      	b.n	80460 <Dummy_Handler>
	...

00080464 <Reset_Handler>:
   80464:	b508      	push	{r3, lr}
   80466:	4b11      	ldr	r3, [pc, #68]	; (804ac <Reset_Handler+0x48>)
   80468:	4a11      	ldr	r2, [pc, #68]	; (804b0 <Reset_Handler+0x4c>)
   8046a:	429a      	cmp	r2, r3
   8046c:	d009      	beq.n	80482 <Reset_Handler+0x1e>
   8046e:	4b0f      	ldr	r3, [pc, #60]	; (804ac <Reset_Handler+0x48>)
   80470:	4a0f      	ldr	r2, [pc, #60]	; (804b0 <Reset_Handler+0x4c>)
   80472:	e003      	b.n	8047c <Reset_Handler+0x18>
   80474:	6811      	ldr	r1, [r2, #0]
   80476:	6019      	str	r1, [r3, #0]
   80478:	3304      	adds	r3, #4
   8047a:	3204      	adds	r2, #4
   8047c:	490d      	ldr	r1, [pc, #52]	; (804b4 <Reset_Handler+0x50>)
   8047e:	428b      	cmp	r3, r1
   80480:	d3f8      	bcc.n	80474 <Reset_Handler+0x10>
   80482:	4b0d      	ldr	r3, [pc, #52]	; (804b8 <Reset_Handler+0x54>)
   80484:	e002      	b.n	8048c <Reset_Handler+0x28>
   80486:	2200      	movs	r2, #0
   80488:	601a      	str	r2, [r3, #0]
   8048a:	3304      	adds	r3, #4
   8048c:	4a0b      	ldr	r2, [pc, #44]	; (804bc <Reset_Handler+0x58>)
   8048e:	4293      	cmp	r3, r2
   80490:	d3f9      	bcc.n	80486 <Reset_Handler+0x22>
   80492:	4b0b      	ldr	r3, [pc, #44]	; (804c0 <Reset_Handler+0x5c>)
   80494:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80498:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8049c:	4a09      	ldr	r2, [pc, #36]	; (804c4 <Reset_Handler+0x60>)
   8049e:	6093      	str	r3, [r2, #8]
   804a0:	4b09      	ldr	r3, [pc, #36]	; (804c8 <Reset_Handler+0x64>)
   804a2:	4798      	blx	r3
   804a4:	4b09      	ldr	r3, [pc, #36]	; (804cc <Reset_Handler+0x68>)
   804a6:	4798      	blx	r3
   804a8:	e7fe      	b.n	804a8 <Reset_Handler+0x44>
   804aa:	bf00      	nop
   804ac:	20000000 	.word	0x20000000
   804b0:	00081fc0 	.word	0x00081fc0
   804b4:	20000434 	.word	0x20000434
   804b8:	20000434 	.word	0x20000434
   804bc:	200004b8 	.word	0x200004b8
   804c0:	00080000 	.word	0x00080000
   804c4:	e000ed00 	.word	0xe000ed00
   804c8:	00081db1 	.word	0x00081db1
   804cc:	00080575 	.word	0x00080575

000804d0 <SystemInit>:
   804d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   804d4:	4a20      	ldr	r2, [pc, #128]	; (80558 <SystemInit+0x88>)
   804d6:	6013      	str	r3, [r2, #0]
   804d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   804dc:	6013      	str	r3, [r2, #0]
   804de:	4b1f      	ldr	r3, [pc, #124]	; (8055c <SystemInit+0x8c>)
   804e0:	6a1b      	ldr	r3, [r3, #32]
   804e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804e6:	d107      	bne.n	804f8 <SystemInit+0x28>
   804e8:	4a1d      	ldr	r2, [pc, #116]	; (80560 <SystemInit+0x90>)
   804ea:	4b1c      	ldr	r3, [pc, #112]	; (8055c <SystemInit+0x8c>)
   804ec:	621a      	str	r2, [r3, #32]
   804ee:	4b1b      	ldr	r3, [pc, #108]	; (8055c <SystemInit+0x8c>)
   804f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804f2:	f013 0f01 	tst.w	r3, #1
   804f6:	d0fa      	beq.n	804ee <SystemInit+0x1e>
   804f8:	4a1a      	ldr	r2, [pc, #104]	; (80564 <SystemInit+0x94>)
   804fa:	4b18      	ldr	r3, [pc, #96]	; (8055c <SystemInit+0x8c>)
   804fc:	621a      	str	r2, [r3, #32]
   804fe:	4b17      	ldr	r3, [pc, #92]	; (8055c <SystemInit+0x8c>)
   80500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80502:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80506:	d0fa      	beq.n	804fe <SystemInit+0x2e>
   80508:	4a14      	ldr	r2, [pc, #80]	; (8055c <SystemInit+0x8c>)
   8050a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8050c:	f023 0303 	bic.w	r3, r3, #3
   80510:	f043 0301 	orr.w	r3, r3, #1
   80514:	6313      	str	r3, [r2, #48]	; 0x30
   80516:	4b11      	ldr	r3, [pc, #68]	; (8055c <SystemInit+0x8c>)
   80518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8051a:	f013 0f08 	tst.w	r3, #8
   8051e:	d0fa      	beq.n	80516 <SystemInit+0x46>
   80520:	4a11      	ldr	r2, [pc, #68]	; (80568 <SystemInit+0x98>)
   80522:	4b0e      	ldr	r3, [pc, #56]	; (8055c <SystemInit+0x8c>)
   80524:	629a      	str	r2, [r3, #40]	; 0x28
   80526:	4b0d      	ldr	r3, [pc, #52]	; (8055c <SystemInit+0x8c>)
   80528:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8052a:	f013 0f02 	tst.w	r3, #2
   8052e:	d0fa      	beq.n	80526 <SystemInit+0x56>
   80530:	2211      	movs	r2, #17
   80532:	4b0a      	ldr	r3, [pc, #40]	; (8055c <SystemInit+0x8c>)
   80534:	631a      	str	r2, [r3, #48]	; 0x30
   80536:	4b09      	ldr	r3, [pc, #36]	; (8055c <SystemInit+0x8c>)
   80538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8053a:	f013 0f08 	tst.w	r3, #8
   8053e:	d0fa      	beq.n	80536 <SystemInit+0x66>
   80540:	2212      	movs	r2, #18
   80542:	4b06      	ldr	r3, [pc, #24]	; (8055c <SystemInit+0x8c>)
   80544:	631a      	str	r2, [r3, #48]	; 0x30
   80546:	4b05      	ldr	r3, [pc, #20]	; (8055c <SystemInit+0x8c>)
   80548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8054a:	f013 0f08 	tst.w	r3, #8
   8054e:	d0fa      	beq.n	80546 <SystemInit+0x76>
   80550:	4a06      	ldr	r2, [pc, #24]	; (8056c <SystemInit+0x9c>)
   80552:	4b07      	ldr	r3, [pc, #28]	; (80570 <SystemInit+0xa0>)
   80554:	601a      	str	r2, [r3, #0]
   80556:	4770      	bx	lr
   80558:	400e0a00 	.word	0x400e0a00
   8055c:	400e0600 	.word	0x400e0600
   80560:	00370809 	.word	0x00370809
   80564:	01370809 	.word	0x01370809
   80568:	200d3f01 	.word	0x200d3f01
   8056c:	0501bd00 	.word	0x0501bd00
   80570:	20000000 	.word	0x20000000

00080574 <main>:
#include "solenoid.h"
#include <stdio.h>


int main(void)
{
   80574:	b510      	push	{r4, lr}
   80576:	b086      	sub	sp, #24
	WDT->WDT_MR = WDT_MR_WDDIS;
   80578:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8057c:	4b27      	ldr	r3, [pc, #156]	; (8061c <main+0xa8>)
   8057e:	605a      	str	r2, [r3, #4]
	
    /* Initialize the SAM system */
    SystemInit();
   80580:	4b27      	ldr	r3, [pc, #156]	; (80620 <main+0xac>)
   80582:	4798      	blx	r3
	configure_uart();
   80584:	4b27      	ldr	r3, [pc, #156]	; (80624 <main+0xb0>)
   80586:	4798      	blx	r3
	pwm_init();
   80588:	4b27      	ldr	r3, [pc, #156]	; (80628 <main+0xb4>)
   8058a:	4798      	blx	r3
	adc_init();
   8058c:	4b27      	ldr	r3, [pc, #156]	; (8062c <main+0xb8>)
   8058e:	4798      	blx	r3
	solenoid_init();
   80590:	4b27      	ldr	r3, [pc, #156]	; (80630 <main+0xbc>)
   80592:	4798      	blx	r3
	DAC_init();
   80594:	4b27      	ldr	r3, [pc, #156]	; (80634 <main+0xc0>)
   80596:	4798      	blx	r3
	motor_init();	
   80598:	4b27      	ldr	r3, [pc, #156]	; (80638 <main+0xc4>)
   8059a:	4798      	blx	r3
	
	
	
	
	PIOA->PIO_PER |= PIO_PA19;
   8059c:	4b27      	ldr	r3, [pc, #156]	; (8063c <main+0xc8>)
   8059e:	681a      	ldr	r2, [r3, #0]
   805a0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   805a4:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER |= PIO_PA19;
   805a6:	691a      	ldr	r2, [r3, #16]
   805a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   805ac:	611a      	str	r2, [r3, #16]

	PIOC->PIO_PER |= PIO_PC9;
   805ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
   805b2:	681a      	ldr	r2, [r3, #0]
   805b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   805b8:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC9;
   805ba:	691a      	ldr	r2, [r3, #16]
   805bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   805c0:	611a      	str	r2, [r3, #16]
	
	uint32_t baud_rate = 0x00290165;
	int points = 0;
	
	can_init_def_tx_rx_mb(baud_rate);
   805c2:	481f      	ldr	r0, [pc, #124]	; (80640 <main+0xcc>)
   805c4:	4b1f      	ldr	r3, [pc, #124]	; (80644 <main+0xd0>)
   805c6:	4798      	blx	r3
	
	CAN_MESSAGE receive;
	
	double max_encoder = encoder_read();
   805c8:	4c1f      	ldr	r4, [pc, #124]	; (80648 <main+0xd4>)
   805ca:	47a0      	blx	r4
	printf("########### %d \r\n", (int)max_encoder);
   805cc:	4601      	mov	r1, r0
   805ce:	481f      	ldr	r0, [pc, #124]	; (8064c <main+0xd8>)
   805d0:	4b1f      	ldr	r3, [pc, #124]	; (80650 <main+0xdc>)
   805d2:	4798      	blx	r3
	
	double max_encode1r = encoder_read();
   805d4:	47a0      	blx	r4
	//printf("ouui %d \r\n", (int)max_encode1r);
	
	double max_encode2r = encoder_read();
   805d6:	47a0      	blx	r4
   805d8:	4b1e      	ldr	r3, [pc, #120]	; (80654 <main+0xe0>)
   805da:	4798      	blx	r3
   805dc:	e9cd 0100 	strd	r0, r1, [sp]
	int points = 0;
   805e0:	2400      	movs	r4, #0
	
	
    while (1) 
    {	
		
		points += score();
   805e2:	4b1d      	ldr	r3, [pc, #116]	; (80658 <main+0xe4>)
   805e4:	4798      	blx	r3
   805e6:	4404      	add	r4, r0

		printf("SCORE : %d \r\n", points);
   805e8:	4621      	mov	r1, r4
   805ea:	481c      	ldr	r0, [pc, #112]	; (8065c <main+0xe8>)
   805ec:	4b18      	ldr	r3, [pc, #96]	; (80650 <main+0xdc>)
   805ee:	4798      	blx	r3
		
		can_receive(&receive, 0);
   805f0:	2100      	movs	r1, #0
   805f2:	a803      	add	r0, sp, #12
   805f4:	4b1a      	ldr	r3, [pc, #104]	; (80660 <main+0xec>)
   805f6:	4798      	blx	r3
		//printf("FEU : %d       Horizontal : %d        Vertical : %d \r\n", receive.data[3], receive.data[1], receive.data[0]);

		pwm_set_duty(receive.data[1], receive.data[2]);
   805f8:	f89d 1011 	ldrb.w	r1, [sp, #17]
   805fc:	f89d 0010 	ldrb.w	r0, [sp, #16]
   80600:	4b18      	ldr	r3, [pc, #96]	; (80664 <main+0xf0>)
   80602:	4798      	blx	r3
		
		set_positon(receive.data[0], receive.data[2], &max_encode2r);
   80604:	466a      	mov	r2, sp
   80606:	f89d 1011 	ldrb.w	r1, [sp, #17]
   8060a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   8060e:	4b16      	ldr	r3, [pc, #88]	; (80668 <main+0xf4>)
   80610:	4798      	blx	r3
		
		solenoid_fire(receive.data[3]);
   80612:	f89d 0012 	ldrb.w	r0, [sp, #18]
   80616:	4b15      	ldr	r3, [pc, #84]	; (8066c <main+0xf8>)
   80618:	4798      	blx	r3
   8061a:	e7e2      	b.n	805e2 <main+0x6e>
   8061c:	400e1a50 	.word	0x400e1a50
   80620:	000804d1 	.word	0x000804d1
   80624:	00080d45 	.word	0x00080d45
   80628:	00080ba9 	.word	0x00080ba9
   8062c:	000801f9 	.word	0x000801f9
   80630:	00080ce1 	.word	0x00080ce1
   80634:	00080161 	.word	0x00080161
   80638:	00080881 	.word	0x00080881
   8063c:	400e0e00 	.word	0x400e0e00
   80640:	00290165 	.word	0x00290165
   80644:	0008035d 	.word	0x0008035d
   80648:	000806a9 	.word	0x000806a9
   8064c:	00081f4c 	.word	0x00081f4c
   80650:	00080b85 	.word	0x00080b85
   80654:	000810bd 	.word	0x000810bd
   80658:	00080245 	.word	0x00080245
   8065c:	00081f60 	.word	0x00081f60
   80660:	0008036d 	.word	0x0008036d
   80664:	00080c11 	.word	0x00080c11
   80668:	000806f1 	.word	0x000806f1
   8066c:	00080d21 	.word	0x00080d21

00080670 <delay>:
	return output;
	
	
}

void delay(int num){
   80670:	b510      	push	{r4, lr}
   80672:	b082      	sub	sp, #8
   80674:	4604      	mov	r4, r0
	volatile float f = 1.0f;
   80676:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   8067a:	9301      	str	r3, [sp, #4]
	
	for (volatile int i = 0; i < 1024 * num; i++ )
   8067c:	2300      	movs	r3, #0
   8067e:	9300      	str	r3, [sp, #0]
   80680:	e007      	b.n	80692 <delay+0x22>
		f *= 1.1f;
   80682:	9801      	ldr	r0, [sp, #4]
   80684:	4906      	ldr	r1, [pc, #24]	; (806a0 <delay+0x30>)
   80686:	4b07      	ldr	r3, [pc, #28]	; (806a4 <delay+0x34>)
   80688:	4798      	blx	r3
   8068a:	9001      	str	r0, [sp, #4]
	for (volatile int i = 0; i < 1024 * num; i++ )
   8068c:	9b00      	ldr	r3, [sp, #0]
   8068e:	3301      	adds	r3, #1
   80690:	9300      	str	r3, [sp, #0]
   80692:	9b00      	ldr	r3, [sp, #0]
   80694:	ebb3 2f84 	cmp.w	r3, r4, lsl #10
   80698:	dbf3      	blt.n	80682 <delay+0x12>
	
}
   8069a:	b002      	add	sp, #8
   8069c:	bd10      	pop	{r4, pc}
   8069e:	bf00      	nop
   806a0:	3f8ccccd 	.word	0x3f8ccccd
   806a4:	00081999 	.word	0x00081999

000806a8 <encoder_read>:
uint16_t encoder_read(){
   806a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PIOD->PIO_CODR = PIO_CODR_P0;
   806ac:	4d0d      	ldr	r5, [pc, #52]	; (806e4 <encoder_read+0x3c>)
   806ae:	2601      	movs	r6, #1
   806b0:	636e      	str	r6, [r5, #52]	; 0x34
	PIOD->PIO_CODR = PIO_CODR_P2;
   806b2:	f04f 0904 	mov.w	r9, #4
   806b6:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
	delay(1);
   806ba:	4630      	mov	r0, r6
   806bc:	f8df 802c 	ldr.w	r8, [pc, #44]	; 806ec <encoder_read+0x44>
   806c0:	47c0      	blx	r8
	output += ((PIOC->PIO_PDSR & encoder_mask) << 8);
   806c2:	4f09      	ldr	r7, [pc, #36]	; (806e8 <encoder_read+0x40>)
   806c4:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
   806c6:	0224      	lsls	r4, r4, #8
   806c8:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
	PIOD->PIO_SODR = PIO_CODR_P2;
   806cc:	f8c5 9030 	str.w	r9, [r5, #48]	; 0x30
	delay(1);
   806d0:	4630      	mov	r0, r6
   806d2:	47c0      	blx	r8
	output += (PIOC->PIO_PDSR & encoder_mask);
   806d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   806d6:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
   806da:	4420      	add	r0, r4
   806dc:	b280      	uxth	r0, r0
	PIOD->PIO_SODR = PIO_CODR_P0;
   806de:	632e      	str	r6, [r5, #48]	; 0x30
}
   806e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   806e4:	400e1400 	.word	0x400e1400
   806e8:	400e1200 	.word	0x400e1200
   806ec:	00080671 	.word	0x00080671

000806f0 <set_positon>:


void set_positon(int joy_value, int dir, double* max_encoder) {
   806f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   806f4:	b083      	sub	sp, #12
   806f6:	4604      	mov	r4, r0
   806f8:	460d      	mov	r5, r1
	float motor_pos;
	float middle = *max_encoder / 2;
   806fa:	e9d2 0100 	ldrd	r0, r1, [r2]
   806fe:	2200      	movs	r2, #0
   80700:	4b3d      	ldr	r3, [pc, #244]	; (807f8 <set_positon+0x108>)
   80702:	4e3e      	ldr	r6, [pc, #248]	; (807fc <set_positon+0x10c>)
   80704:	47b0      	blx	r6
   80706:	4b3e      	ldr	r3, [pc, #248]	; (80800 <set_positon+0x110>)
   80708:	4798      	blx	r3
   8070a:	4680      	mov	r8, r0
	
	if(joy_value > 100) {
   8070c:	2c64      	cmp	r4, #100	; 0x64
   8070e:	dd00      	ble.n	80712 <set_positon+0x22>
		joy_value = 100;
   80710:	2464      	movs	r4, #100	; 0x64
	}
	if (joy_value < 0) {
   80712:	2c00      	cmp	r4, #0
   80714:	db0c      	blt.n	80730 <set_positon+0x40>
		joy_value = 0;
	}
	double y = encoder_read();
   80716:	4b3b      	ldr	r3, [pc, #236]	; (80804 <set_positon+0x114>)
   80718:	4798      	blx	r3
   8071a:	4b3b      	ldr	r3, [pc, #236]	; (80808 <set_positon+0x118>)
   8071c:	4798      	blx	r3
   8071e:	4606      	mov	r6, r0
   80720:	460f      	mov	r7, r1
	
	switch (dir)
   80722:	b13d      	cbz	r5, 80734 <set_positon+0x44>
   80724:	2d01      	cmp	r5, #1
   80726:	d02e      	beq.n	80786 <set_positon+0x96>
		
		motor_pos = middle + (middle*joy_value/100);
		PIOD->PIO_CODR |= PIO_CODR_P10;
		break;
	default:
		DAC_send_voltage(0);
   80728:	2000      	movs	r0, #0
   8072a:	4b38      	ldr	r3, [pc, #224]	; (8080c <set_positon+0x11c>)
   8072c:	4798      	blx	r3
		break;
   8072e:	e014      	b.n	8075a <set_positon+0x6a>
		joy_value = 0;
   80730:	2400      	movs	r4, #0
   80732:	e7f0      	b.n	80716 <set_positon+0x26>
		motor_pos = middle - (middle*joy_value/100);
   80734:	4620      	mov	r0, r4
   80736:	4b36      	ldr	r3, [pc, #216]	; (80810 <set_positon+0x120>)
   80738:	4798      	blx	r3
   8073a:	4641      	mov	r1, r8
   8073c:	4b35      	ldr	r3, [pc, #212]	; (80814 <set_positon+0x124>)
   8073e:	4798      	blx	r3
   80740:	4935      	ldr	r1, [pc, #212]	; (80818 <set_positon+0x128>)
   80742:	4b36      	ldr	r3, [pc, #216]	; (8081c <set_positon+0x12c>)
   80744:	4798      	blx	r3
   80746:	4601      	mov	r1, r0
   80748:	4640      	mov	r0, r8
   8074a:	4b35      	ldr	r3, [pc, #212]	; (80820 <set_positon+0x130>)
   8074c:	4798      	blx	r3
   8074e:	4681      	mov	r9, r0
		PIOD->PIO_SODR |= PIO_SODR_P10;
   80750:	4a34      	ldr	r2, [pc, #208]	; (80824 <set_positon+0x134>)
   80752:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80754:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80758:	6313      	str	r3, [r2, #48]	; 0x30
	}
	
	
	
	if(y > 40000) {
   8075a:	a323      	add	r3, pc, #140	; (adr r3, 807e8 <set_positon+0xf8>)
   8075c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80760:	4630      	mov	r0, r6
   80762:	4639      	mov	r1, r7
   80764:	4c30      	ldr	r4, [pc, #192]	; (80828 <set_positon+0x138>)
   80766:	47a0      	blx	r4
   80768:	b140      	cbz	r0, 8077c <set_positon+0x8c>
		y = y - 65535;
   8076a:	a321      	add	r3, pc, #132	; (adr r3, 807f0 <set_positon+0x100>)
   8076c:	e9d3 2300 	ldrd	r2, r3, [r3]
   80770:	4630      	mov	r0, r6
   80772:	4639      	mov	r1, r7
   80774:	4c2d      	ldr	r4, [pc, #180]	; (8082c <set_positon+0x13c>)
   80776:	47a0      	blx	r4
   80778:	4606      	mov	r6, r0
   8077a:	460f      	mov	r7, r1
	}
	
	
	
	if(dir < 2) {
   8077c:	2d01      	cmp	r5, #1
   8077e:	dd16      	ble.n	807ae <set_positon+0xbe>
			u = -u;
		}
		DAC_send_voltage(&u);
	}
	
}
   80780:	b003      	add	sp, #12
   80782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		motor_pos = middle + (middle*joy_value/100);
   80786:	4620      	mov	r0, r4
   80788:	4b21      	ldr	r3, [pc, #132]	; (80810 <set_positon+0x120>)
   8078a:	4798      	blx	r3
   8078c:	4641      	mov	r1, r8
   8078e:	4b21      	ldr	r3, [pc, #132]	; (80814 <set_positon+0x124>)
   80790:	4798      	blx	r3
   80792:	4921      	ldr	r1, [pc, #132]	; (80818 <set_positon+0x128>)
   80794:	4b21      	ldr	r3, [pc, #132]	; (8081c <set_positon+0x12c>)
   80796:	4798      	blx	r3
   80798:	4601      	mov	r1, r0
   8079a:	4640      	mov	r0, r8
   8079c:	4b24      	ldr	r3, [pc, #144]	; (80830 <set_positon+0x140>)
   8079e:	4798      	blx	r3
   807a0:	4681      	mov	r9, r0
		PIOD->PIO_CODR |= PIO_CODR_P10;
   807a2:	4a20      	ldr	r2, [pc, #128]	; (80824 <set_positon+0x134>)
   807a4:	6b53      	ldr	r3, [r2, #52]	; 0x34
   807a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   807aa:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   807ac:	e7d5      	b.n	8075a <set_positon+0x6a>
		float e = motor_pos - y;
   807ae:	4648      	mov	r0, r9
   807b0:	4b20      	ldr	r3, [pc, #128]	; (80834 <set_positon+0x144>)
   807b2:	4798      	blx	r3
   807b4:	4632      	mov	r2, r6
   807b6:	463b      	mov	r3, r7
   807b8:	4c1c      	ldr	r4, [pc, #112]	; (8082c <set_positon+0x13c>)
   807ba:	47a0      	blx	r4
   807bc:	4b10      	ldr	r3, [pc, #64]	; (80800 <set_positon+0x110>)
   807be:	4798      	blx	r3
		float u = kp * e;
   807c0:	491d      	ldr	r1, [pc, #116]	; (80838 <set_positon+0x148>)
   807c2:	4b14      	ldr	r3, [pc, #80]	; (80814 <set_positon+0x124>)
   807c4:	4798      	blx	r3
   807c6:	4604      	mov	r4, r0
   807c8:	9001      	str	r0, [sp, #4]
		if (u < 0) {
   807ca:	2100      	movs	r1, #0
   807cc:	4b1b      	ldr	r3, [pc, #108]	; (8083c <set_positon+0x14c>)
   807ce:	4798      	blx	r3
   807d0:	b918      	cbnz	r0, 807da <set_positon+0xea>
		DAC_send_voltage(&u);
   807d2:	a801      	add	r0, sp, #4
   807d4:	4b0d      	ldr	r3, [pc, #52]	; (8080c <set_positon+0x11c>)
   807d6:	4798      	blx	r3
}
   807d8:	e7d2      	b.n	80780 <set_positon+0x90>
			u = -u;
   807da:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
   807de:	9401      	str	r4, [sp, #4]
   807e0:	e7f7      	b.n	807d2 <set_positon+0xe2>
   807e2:	bf00      	nop
   807e4:	f3af 8000 	nop.w
   807e8:	00000000 	.word	0x00000000
   807ec:	40e38800 	.word	0x40e38800
   807f0:	00000000 	.word	0x00000000
   807f4:	40efffe0 	.word	0x40efffe0
   807f8:	3fe00000 	.word	0x3fe00000
   807fc:	000811a9 	.word	0x000811a9
   80800:	000816dd 	.word	0x000816dd
   80804:	000806a9 	.word	0x000806a9
   80808:	000810bd 	.word	0x000810bd
   8080c:	0008019d 	.word	0x0008019d
   80810:	000818f1 	.word	0x000818f1
   80814:	00081999 	.word	0x00081999
   80818:	42c80000 	.word	0x42c80000
   8081c:	00081b01 	.word	0x00081b01
   80820:	00081785 	.word	0x00081785
   80824:	400e1400 	.word	0x400e1400
   80828:	000816c9 	.word	0x000816c9
   8082c:	00080e41 	.word	0x00080e41
   80830:	00081789 	.word	0x00081789
   80834:	00081101 	.word	0x00081101
   80838:	3a03126f 	.word	0x3a03126f
   8083c:	00081cd5 	.word	0x00081cd5

00080840 <encoder_calibrate>:
	delay(1000);
	PIOC->PIO_CODR |= PIO_PC9;
	delay(1000);
}

void encoder_calibrate() {
   80840:	b530      	push	{r4, r5, lr}
   80842:	b083      	sub	sp, #12
	float volt_init = 3;
   80844:	a802      	add	r0, sp, #8
   80846:	4b0a      	ldr	r3, [pc, #40]	; (80870 <encoder_calibrate+0x30>)
   80848:	f840 3d04 	str.w	r3, [r0, #-4]!
	
	PIOD->PIO_SODR |= PIO_SODR_P10;
   8084c:	4a09      	ldr	r2, [pc, #36]	; (80874 <encoder_calibrate+0x34>)
   8084e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   80854:	6313      	str	r3, [r2, #48]	; 0x30
	DAC_send_voltage(&volt_init);
   80856:	4d08      	ldr	r5, [pc, #32]	; (80878 <encoder_calibrate+0x38>)
   80858:	47a8      	blx	r5
	delay(900);	
   8085a:	f44f 7061 	mov.w	r0, #900	; 0x384
   8085e:	4c07      	ldr	r4, [pc, #28]	; (8087c <encoder_calibrate+0x3c>)
   80860:	47a0      	blx	r4
	
	DAC_send_voltage(0);
   80862:	2000      	movs	r0, #0
   80864:	47a8      	blx	r5
	delay(1000);
   80866:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8086a:	47a0      	blx	r4
	
	
}
   8086c:	b003      	add	sp, #12
   8086e:	bd30      	pop	{r4, r5, pc}
   80870:	40400000 	.word	0x40400000
   80874:	400e1400 	.word	0x400e1400
   80878:	0008019d 	.word	0x0008019d
   8087c:	00080671 	.word	0x00080671

00080880 <motor_init>:
void motor_init(){
   80880:	b570      	push	{r4, r5, r6, lr}
	PMC->PMC_PCER0 |= PMC_PCER0_PID13;
   80882:	4a16      	ldr	r2, [pc, #88]	; (808dc <motor_init+0x5c>)
   80884:	6913      	ldr	r3, [r2, #16]
   80886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8088a:	6113      	str	r3, [r2, #16]
	PIOC->PIO_PER |= (0xff << 1);
   8088c:	4b14      	ldr	r3, [pc, #80]	; (808e0 <motor_init+0x60>)
   8088e:	681a      	ldr	r2, [r3, #0]
   80890:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   80894:	601a      	str	r2, [r3, #0]
	PIOC->PIO_ODR |= (0xff << 1);
   80896:	695a      	ldr	r2, [r3, #20]
   80898:	f442 72ff 	orr.w	r2, r2, #510	; 0x1fe
   8089c:	615a      	str	r2, [r3, #20]
	PIOD->PIO_PER |= (0x7 << 0) | (0x3 << 9);
   8089e:	4c11      	ldr	r4, [pc, #68]	; (808e4 <motor_init+0x64>)
   808a0:	6822      	ldr	r2, [r4, #0]
   808a2:	f240 6107 	movw	r1, #1543	; 0x607
   808a6:	430a      	orrs	r2, r1
   808a8:	6022      	str	r2, [r4, #0]
	PIOD->PIO_OER |= (0x7 << 0) | (0x3 << 9);
   808aa:	6923      	ldr	r3, [r4, #16]
   808ac:	430b      	orrs	r3, r1
   808ae:	6123      	str	r3, [r4, #16]
	PIOD->PIO_SODR = PIO_SODR_P9;
   808b0:	f44f 7300 	mov.w	r3, #512	; 0x200
   808b4:	6323      	str	r3, [r4, #48]	; 0x30
	PIOD->PIO_CODR = PIO_CODR_P1;
   808b6:	2602      	movs	r6, #2
   808b8:	6366      	str	r6, [r4, #52]	; 0x34
	delay(1);
   808ba:	2001      	movs	r0, #1
   808bc:	4d0a      	ldr	r5, [pc, #40]	; (808e8 <motor_init+0x68>)
   808be:	47a8      	blx	r5
	PIOD->PIO_SODR = PIO_SODR_P1;
   808c0:	6326      	str	r6, [r4, #48]	; 0x30
	delay(1000);
   808c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   808c6:	47a8      	blx	r5
	encoder_calibrate();
   808c8:	4b08      	ldr	r3, [pc, #32]	; (808ec <motor_init+0x6c>)
   808ca:	4798      	blx	r3
	delay(1000);
   808cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   808d0:	47a8      	blx	r5
	DAC_send_voltage(0);
   808d2:	2000      	movs	r0, #0
   808d4:	4b06      	ldr	r3, [pc, #24]	; (808f0 <motor_init+0x70>)
   808d6:	4798      	blx	r3
   808d8:	bd70      	pop	{r4, r5, r6, pc}
   808da:	bf00      	nop
   808dc:	400e0600 	.word	0x400e0600
   808e0:	400e1200 	.word	0x400e1200
   808e4:	400e1400 	.word	0x400e1400
   808e8:	00080671 	.word	0x00080671
   808ec:	00080841 	.word	0x00080841
   808f0:	0008019d 	.word	0x0008019d

000808f4 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   808f4:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   808f6:	b2c8      	uxtb	r0, r1
   808f8:	4b01      	ldr	r3, [pc, #4]	; (80900 <printchar+0xc>)
   808fa:	4798      	blx	r3
   808fc:	bd08      	pop	{r3, pc}
   808fe:	bf00      	nop
   80900:	00080dad 	.word	0x00080dad

00080904 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80908:	4607      	mov	r7, r0
   8090a:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   8090c:	1e15      	subs	r5, r2, #0
   8090e:	dd02      	ble.n	80916 <prints+0x12>
   80910:	460a      	mov	r2, r1
   80912:	2100      	movs	r1, #0
   80914:	e004      	b.n	80920 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   80916:	f04f 0820 	mov.w	r8, #32
   8091a:	e00e      	b.n	8093a <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   8091c:	3101      	adds	r1, #1
   8091e:	3201      	adds	r2, #1
   80920:	7810      	ldrb	r0, [r2, #0]
   80922:	2800      	cmp	r0, #0
   80924:	d1fa      	bne.n	8091c <prints+0x18>
		if (len >= width) width = 0;
   80926:	42a9      	cmp	r1, r5
   80928:	da01      	bge.n	8092e <prints+0x2a>
		else width -= len;
   8092a:	1a6d      	subs	r5, r5, r1
   8092c:	e000      	b.n	80930 <prints+0x2c>
		if (len >= width) width = 0;
   8092e:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   80930:	f013 0f02 	tst.w	r3, #2
   80934:	d106      	bne.n	80944 <prints+0x40>
	register int pc = 0, padchar = ' ';
   80936:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   8093a:	f013 0401 	ands.w	r4, r3, #1
   8093e:	d00a      	beq.n	80956 <prints+0x52>
	register int pc = 0, padchar = ' ';
   80940:	2400      	movs	r4, #0
   80942:	e010      	b.n	80966 <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   80944:	f04f 0830 	mov.w	r8, #48	; 0x30
   80948:	e7f7      	b.n	8093a <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   8094a:	4641      	mov	r1, r8
   8094c:	4638      	mov	r0, r7
   8094e:	4b0d      	ldr	r3, [pc, #52]	; (80984 <prints+0x80>)
   80950:	4798      	blx	r3
			++pc;
   80952:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   80954:	3d01      	subs	r5, #1
   80956:	2d00      	cmp	r5, #0
   80958:	dcf7      	bgt.n	8094a <prints+0x46>
   8095a:	e004      	b.n	80966 <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   8095c:	4638      	mov	r0, r7
   8095e:	4b09      	ldr	r3, [pc, #36]	; (80984 <prints+0x80>)
   80960:	4798      	blx	r3
		++pc;
   80962:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   80964:	3601      	adds	r6, #1
   80966:	7831      	ldrb	r1, [r6, #0]
   80968:	2900      	cmp	r1, #0
   8096a:	d1f7      	bne.n	8095c <prints+0x58>
   8096c:	e005      	b.n	8097a <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   8096e:	4641      	mov	r1, r8
   80970:	4638      	mov	r0, r7
   80972:	4b04      	ldr	r3, [pc, #16]	; (80984 <prints+0x80>)
   80974:	4798      	blx	r3
		++pc;
   80976:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   80978:	3d01      	subs	r5, #1
   8097a:	2d00      	cmp	r5, #0
   8097c:	dcf7      	bgt.n	8096e <prints+0x6a>
	}

	return pc;
}
   8097e:	4620      	mov	r0, r4
   80980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80984:	000808f5 	.word	0x000808f5

00080988 <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   80988:	b5f0      	push	{r4, r5, r6, r7, lr}
   8098a:	b085      	sub	sp, #20
   8098c:	4607      	mov	r7, r0
   8098e:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80990:	b151      	cbz	r1, 809a8 <printi+0x20>
   80992:	461e      	mov	r6, r3
   80994:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   80996:	b113      	cbz	r3, 8099e <printi+0x16>
   80998:	2a0a      	cmp	r2, #10
   8099a:	d012      	beq.n	809c2 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   8099c:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   8099e:	ad04      	add	r5, sp, #16
   809a0:	2300      	movs	r3, #0
   809a2:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   809a6:	e018      	b.n	809da <printi+0x52>
		print_buf[0] = '0';
   809a8:	2330      	movs	r3, #48	; 0x30
   809aa:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   809ae:	2300      	movs	r3, #0
   809b0:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   809b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   809b8:	a901      	add	r1, sp, #4
   809ba:	4638      	mov	r0, r7
   809bc:	4c1b      	ldr	r4, [pc, #108]	; (80a2c <printi+0xa4>)
   809be:	47a0      	blx	r4
   809c0:	e029      	b.n	80a16 <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   809c2:	2900      	cmp	r1, #0
   809c4:	db01      	blt.n	809ca <printi+0x42>
	register int t, neg = 0, pc = 0;
   809c6:	2600      	movs	r6, #0
   809c8:	e7e9      	b.n	8099e <printi+0x16>
		u = -i;
   809ca:	424c      	negs	r4, r1
		neg = 1;
   809cc:	2601      	movs	r6, #1
   809ce:	e7e6      	b.n	8099e <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   809d0:	3330      	adds	r3, #48	; 0x30
   809d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   809d6:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   809da:	b14c      	cbz	r4, 809f0 <printi+0x68>
		t = u % b;
   809dc:	fbb4 f3f2 	udiv	r3, r4, r2
   809e0:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   809e4:	2b09      	cmp	r3, #9
   809e6:	ddf3      	ble.n	809d0 <printi+0x48>
			t += letbase - '0' - 10;
   809e8:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   809ec:	440b      	add	r3, r1
   809ee:	e7ef      	b.n	809d0 <printi+0x48>
	}

	if (neg) {
   809f0:	b156      	cbz	r6, 80a08 <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   809f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   809f4:	b11b      	cbz	r3, 809fe <printi+0x76>
   809f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   809f8:	f013 0f02 	tst.w	r3, #2
   809fc:	d10d      	bne.n	80a1a <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   809fe:	232d      	movs	r3, #45	; 0x2d
   80a00:	f805 3c01 	strb.w	r3, [r5, #-1]
   80a04:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   80a06:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   80a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   80a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80a0c:	4629      	mov	r1, r5
   80a0e:	4638      	mov	r0, r7
   80a10:	4c06      	ldr	r4, [pc, #24]	; (80a2c <printi+0xa4>)
   80a12:	47a0      	blx	r4
   80a14:	4430      	add	r0, r6
}
   80a16:	b005      	add	sp, #20
   80a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   80a1a:	212d      	movs	r1, #45	; 0x2d
   80a1c:	4638      	mov	r0, r7
   80a1e:	4b04      	ldr	r3, [pc, #16]	; (80a30 <printi+0xa8>)
   80a20:	4798      	blx	r3
			--width;
   80a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80a24:	3b01      	subs	r3, #1
   80a26:	930a      	str	r3, [sp, #40]	; 0x28
   80a28:	e7ee      	b.n	80a08 <printi+0x80>
   80a2a:	bf00      	nop
   80a2c:	00080905 	.word	0x00080905
   80a30:	000808f5 	.word	0x000808f5

00080a34 <print>:

static int print( char **out, const char *format, va_list args )
{
   80a34:	b5f0      	push	{r4, r5, r6, r7, lr}
   80a36:	b089      	sub	sp, #36	; 0x24
   80a38:	4606      	mov	r6, r0
   80a3a:	460c      	mov	r4, r1
   80a3c:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   80a3e:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   80a40:	e081      	b.n	80b46 <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   80a42:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   80a44:	2301      	movs	r3, #1
   80a46:	e08b      	b.n	80b60 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   80a48:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   80a4a:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   80a4e:	7822      	ldrb	r2, [r4, #0]
   80a50:	2a30      	cmp	r2, #48	; 0x30
   80a52:	d0f9      	beq.n	80a48 <print+0x14>
   80a54:	2200      	movs	r2, #0
   80a56:	e006      	b.n	80a66 <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   80a58:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80a5c:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   80a5e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   80a62:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   80a64:	3401      	adds	r4, #1
   80a66:	7821      	ldrb	r1, [r4, #0]
   80a68:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   80a6c:	b2c0      	uxtb	r0, r0
   80a6e:	2809      	cmp	r0, #9
   80a70:	d9f2      	bls.n	80a58 <print+0x24>
			}
			if( *format == 's' ) {
   80a72:	2973      	cmp	r1, #115	; 0x73
   80a74:	d018      	beq.n	80aa8 <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   80a76:	2964      	cmp	r1, #100	; 0x64
   80a78:	d022      	beq.n	80ac0 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   80a7a:	2978      	cmp	r1, #120	; 0x78
   80a7c:	d02f      	beq.n	80ade <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   80a7e:	2958      	cmp	r1, #88	; 0x58
   80a80:	d03c      	beq.n	80afc <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   80a82:	2975      	cmp	r1, #117	; 0x75
   80a84:	d049      	beq.n	80b1a <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   80a86:	2963      	cmp	r1, #99	; 0x63
   80a88:	d15c      	bne.n	80b44 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   80a8a:	9905      	ldr	r1, [sp, #20]
   80a8c:	1d08      	adds	r0, r1, #4
   80a8e:	9005      	str	r0, [sp, #20]
   80a90:	7809      	ldrb	r1, [r1, #0]
   80a92:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   80a96:	2100      	movs	r1, #0
   80a98:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80a9c:	a907      	add	r1, sp, #28
   80a9e:	4630      	mov	r0, r6
   80aa0:	4f34      	ldr	r7, [pc, #208]	; (80b74 <print+0x140>)
   80aa2:	47b8      	blx	r7
   80aa4:	4405      	add	r5, r0
				continue;
   80aa6:	e04d      	b.n	80b44 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   80aa8:	9905      	ldr	r1, [sp, #20]
   80aaa:	1d08      	adds	r0, r1, #4
   80aac:	9005      	str	r0, [sp, #20]
   80aae:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80ab0:	b121      	cbz	r1, 80abc <print+0x88>
   80ab2:	4630      	mov	r0, r6
   80ab4:	4f2f      	ldr	r7, [pc, #188]	; (80b74 <print+0x140>)
   80ab6:	47b8      	blx	r7
   80ab8:	4405      	add	r5, r0
				continue;
   80aba:	e043      	b.n	80b44 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80abc:	492e      	ldr	r1, [pc, #184]	; (80b78 <print+0x144>)
   80abe:	e7f8      	b.n	80ab2 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80ac0:	9905      	ldr	r1, [sp, #20]
   80ac2:	1d08      	adds	r0, r1, #4
   80ac4:	9005      	str	r0, [sp, #20]
   80ac6:	6809      	ldr	r1, [r1, #0]
   80ac8:	2061      	movs	r0, #97	; 0x61
   80aca:	9002      	str	r0, [sp, #8]
   80acc:	9301      	str	r3, [sp, #4]
   80ace:	9200      	str	r2, [sp, #0]
   80ad0:	2301      	movs	r3, #1
   80ad2:	220a      	movs	r2, #10
   80ad4:	4630      	mov	r0, r6
   80ad6:	4f29      	ldr	r7, [pc, #164]	; (80b7c <print+0x148>)
   80ad8:	47b8      	blx	r7
   80ada:	4405      	add	r5, r0
				continue;
   80adc:	e032      	b.n	80b44 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80ade:	9905      	ldr	r1, [sp, #20]
   80ae0:	1d08      	adds	r0, r1, #4
   80ae2:	9005      	str	r0, [sp, #20]
   80ae4:	6809      	ldr	r1, [r1, #0]
   80ae6:	2061      	movs	r0, #97	; 0x61
   80ae8:	9002      	str	r0, [sp, #8]
   80aea:	9301      	str	r3, [sp, #4]
   80aec:	9200      	str	r2, [sp, #0]
   80aee:	2300      	movs	r3, #0
   80af0:	2210      	movs	r2, #16
   80af2:	4630      	mov	r0, r6
   80af4:	4f21      	ldr	r7, [pc, #132]	; (80b7c <print+0x148>)
   80af6:	47b8      	blx	r7
   80af8:	4405      	add	r5, r0
				continue;
   80afa:	e023      	b.n	80b44 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80afc:	9905      	ldr	r1, [sp, #20]
   80afe:	1d08      	adds	r0, r1, #4
   80b00:	9005      	str	r0, [sp, #20]
   80b02:	6809      	ldr	r1, [r1, #0]
   80b04:	2041      	movs	r0, #65	; 0x41
   80b06:	9002      	str	r0, [sp, #8]
   80b08:	9301      	str	r3, [sp, #4]
   80b0a:	9200      	str	r2, [sp, #0]
   80b0c:	2300      	movs	r3, #0
   80b0e:	2210      	movs	r2, #16
   80b10:	4630      	mov	r0, r6
   80b12:	4f1a      	ldr	r7, [pc, #104]	; (80b7c <print+0x148>)
   80b14:	47b8      	blx	r7
   80b16:	4405      	add	r5, r0
				continue;
   80b18:	e014      	b.n	80b44 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   80b1a:	9905      	ldr	r1, [sp, #20]
   80b1c:	1d08      	adds	r0, r1, #4
   80b1e:	9005      	str	r0, [sp, #20]
   80b20:	6809      	ldr	r1, [r1, #0]
   80b22:	2061      	movs	r0, #97	; 0x61
   80b24:	9002      	str	r0, [sp, #8]
   80b26:	9301      	str	r3, [sp, #4]
   80b28:	9200      	str	r2, [sp, #0]
   80b2a:	2300      	movs	r3, #0
   80b2c:	220a      	movs	r2, #10
   80b2e:	4630      	mov	r0, r6
   80b30:	4f12      	ldr	r7, [pc, #72]	; (80b7c <print+0x148>)
   80b32:	47b8      	blx	r7
   80b34:	4405      	add	r5, r0
				continue;
   80b36:	e005      	b.n	80b44 <print+0x110>
			++format;
   80b38:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   80b3a:	7821      	ldrb	r1, [r4, #0]
   80b3c:	4630      	mov	r0, r6
   80b3e:	4b10      	ldr	r3, [pc, #64]	; (80b80 <print+0x14c>)
   80b40:	4798      	blx	r3
			++pc;
   80b42:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   80b44:	3401      	adds	r4, #1
   80b46:	7823      	ldrb	r3, [r4, #0]
   80b48:	b163      	cbz	r3, 80b64 <print+0x130>
		if (*format == '%') {
   80b4a:	2b25      	cmp	r3, #37	; 0x25
   80b4c:	d1f5      	bne.n	80b3a <print+0x106>
			++format;
   80b4e:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   80b50:	7863      	ldrb	r3, [r4, #1]
   80b52:	b13b      	cbz	r3, 80b64 <print+0x130>
			if (*format == '%') goto out;
   80b54:	2b25      	cmp	r3, #37	; 0x25
   80b56:	d0ef      	beq.n	80b38 <print+0x104>
			if (*format == '-') {
   80b58:	2b2d      	cmp	r3, #45	; 0x2d
   80b5a:	f43f af72 	beq.w	80a42 <print+0xe>
			width = pad = 0;
   80b5e:	2300      	movs	r3, #0
   80b60:	4614      	mov	r4, r2
   80b62:	e774      	b.n	80a4e <print+0x1a>
		}
	}
	if (out) **out = '\0';
   80b64:	b116      	cbz	r6, 80b6c <print+0x138>
   80b66:	6833      	ldr	r3, [r6, #0]
   80b68:	2200      	movs	r2, #0
   80b6a:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   80b6c:	4628      	mov	r0, r5
   80b6e:	b009      	add	sp, #36	; 0x24
   80b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b72:	bf00      	nop
   80b74:	00080905 	.word	0x00080905
   80b78:	00081f70 	.word	0x00081f70
   80b7c:	00080989 	.word	0x00080989
   80b80:	000808f5 	.word	0x000808f5

00080b84 <printf>:

int printf(const char *format, ...)
{
   80b84:	b40f      	push	{r0, r1, r2, r3}
   80b86:	b500      	push	{lr}
   80b88:	b083      	sub	sp, #12
   80b8a:	aa04      	add	r2, sp, #16
   80b8c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80b90:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80b92:	2000      	movs	r0, #0
   80b94:	4b03      	ldr	r3, [pc, #12]	; (80ba4 <printf+0x20>)
   80b96:	4798      	blx	r3
}
   80b98:	b003      	add	sp, #12
   80b9a:	f85d eb04 	ldr.w	lr, [sp], #4
   80b9e:	b004      	add	sp, #16
   80ba0:	4770      	bx	lr
   80ba2:	bf00      	nop
   80ba4:	00080a35 	.word	0x00080a35

00080ba8 <pwm_init>:

#include "sam.h"
#include "PWM.h"

void pwm_init(void) {
	PIOC->PIO_ABSR |= PIO_PC19;
   80ba8:	4b15      	ldr	r3, [pc, #84]	; (80c00 <pwm_init+0x58>)
   80baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80bac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80bb0:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_PDR |= PIO_PC19;
   80bb2:	685a      	ldr	r2, [r3, #4]
   80bb4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80bb8:	605a      	str	r2, [r3, #4]
	
	
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   80bba:	4a12      	ldr	r2, [pc, #72]	; (80c04 <pwm_init+0x5c>)
   80bbc:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80bc0:	f043 0310 	orr.w	r3, r3, #16
   80bc4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	PWM->PWM_CLK = PWM_CLK_PREB(0x9) | PWM_CLK_DIVB(0x1);
   80bc8:	4b0f      	ldr	r3, [pc, #60]	; (80c08 <pwm_init+0x60>)
   80bca:	4a10      	ldr	r2, [pc, #64]	; (80c0c <pwm_init+0x64>)
   80bcc:	601a      	str	r2, [r3, #0]
	
	
	PWM->PWM_CH_NUM[5].PWM_CMR |= PWM_CMR_CPRE_CLKB | PWM_CMR_CPOL;
   80bce:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80bd2:	f442 7203 	orr.w	r2, r2, #524	; 0x20c
   80bd6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[5].PWM_CPRD |= 0xCD1; 
   80bda:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   80bde:	f442 624d 	orr.w	r2, r2, #3280	; 0xcd0
   80be2:	f042 0201 	orr.w	r2, r2, #1
   80be6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	
	PWM->PWM_CH_NUM[5].PWM_CDTY |= 0xF6;
   80bea:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
   80bee:	f042 02f6 	orr.w	r2, r2, #246	; 0xf6
   80bf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA |= PWM_ENA_CHID5;
   80bf6:	685a      	ldr	r2, [r3, #4]
   80bf8:	f042 0220 	orr.w	r2, r2, #32
   80bfc:	605a      	str	r2, [r3, #4]
   80bfe:	4770      	bx	lr
   80c00:	400e1200 	.word	0x400e1200
   80c04:	400e0600 	.word	0x400e0600
   80c08:	40094000 	.word	0x40094000
   80c0c:	09010000 	.word	0x09010000

00080c10 <pwm_set_duty>:
}

void pwm_set_duty(int input, int dir) {
   80c10:	b538      	push	{r3, r4, r5, lr}
   80c12:	460c      	mov	r4, r1
	if(input > 100) {
   80c14:	2864      	cmp	r0, #100	; 0x64
   80c16:	dd00      	ble.n	80c1a <pwm_set_duty+0xa>
		input = 100;
   80c18:	2064      	movs	r0, #100	; 0x64
	}
	if (input < 0) {
   80c1a:	2800      	cmp	r0, #0
   80c1c:	db14      	blt.n	80c48 <pwm_set_duty+0x38>
		input = 0;
	}
	
	float pulse = 0.000006 * input;
   80c1e:	4b26      	ldr	r3, [pc, #152]	; (80cb8 <pwm_set_duty+0xa8>)
   80c20:	4798      	blx	r3
   80c22:	a321      	add	r3, pc, #132	; (adr r3, 80ca8 <pwm_set_duty+0x98>)
   80c24:	e9d3 2300 	ldrd	r2, r3, [r3]
   80c28:	4d24      	ldr	r5, [pc, #144]	; (80cbc <pwm_set_duty+0xac>)
   80c2a:	47a8      	blx	r5
   80c2c:	4b24      	ldr	r3, [pc, #144]	; (80cc0 <pwm_set_duty+0xb0>)
   80c2e:	4798      	blx	r3
	float percent = 3281 / 0.02;
	float result;
	
	switch (dir)
   80c30:	2c02      	cmp	r4, #2
   80c32:	d00b      	beq.n	80c4c <pwm_set_duty+0x3c>
   80c34:	2c03      	cmp	r4, #3
   80c36:	d020      	beq.n	80c7a <pwm_set_duty+0x6a>
		pulse = 0.0015 + pulse;
		result = pulse * percent;
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= (int)result;
		break;
	default :
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= 0xF6;
   80c38:	4a22      	ldr	r2, [pc, #136]	; (80cc4 <pwm_set_duty+0xb4>)
   80c3a:	f8d2 32a8 	ldr.w	r3, [r2, #680]	; 0x2a8
   80c3e:	f043 03f6 	orr.w	r3, r3, #246	; 0xf6
   80c42:	f8c2 32a8 	str.w	r3, [r2, #680]	; 0x2a8
   80c46:	bd38      	pop	{r3, r4, r5, pc}
		input = 0;
   80c48:	2000      	movs	r0, #0
   80c4a:	e7e8      	b.n	80c1e <pwm_set_duty+0xe>
		pulse = 0.0015 - pulse;
   80c4c:	4b1e      	ldr	r3, [pc, #120]	; (80cc8 <pwm_set_duty+0xb8>)
   80c4e:	4798      	blx	r3
   80c50:	4602      	mov	r2, r0
   80c52:	460b      	mov	r3, r1
   80c54:	a116      	add	r1, pc, #88	; (adr r1, 80cb0 <pwm_set_duty+0xa0>)
   80c56:	e9d1 0100 	ldrd	r0, r1, [r1]
   80c5a:	4c1c      	ldr	r4, [pc, #112]	; (80ccc <pwm_set_duty+0xbc>)
   80c5c:	47a0      	blx	r4
   80c5e:	4b18      	ldr	r3, [pc, #96]	; (80cc0 <pwm_set_duty+0xb0>)
   80c60:	4798      	blx	r3
		result = pulse * percent;
   80c62:	491b      	ldr	r1, [pc, #108]	; (80cd0 <pwm_set_duty+0xc0>)
   80c64:	4b1b      	ldr	r3, [pc, #108]	; (80cd4 <pwm_set_duty+0xc4>)
   80c66:	4798      	blx	r3
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= (int)result;
   80c68:	4d16      	ldr	r5, [pc, #88]	; (80cc4 <pwm_set_duty+0xb4>)
   80c6a:	f8d5 42a8 	ldr.w	r4, [r5, #680]	; 0x2a8
   80c6e:	4b1a      	ldr	r3, [pc, #104]	; (80cd8 <pwm_set_duty+0xc8>)
   80c70:	4798      	blx	r3
   80c72:	4320      	orrs	r0, r4
   80c74:	f8c5 02a8 	str.w	r0, [r5, #680]	; 0x2a8
		break;
   80c78:	bd38      	pop	{r3, r4, r5, pc}
		pulse = 0.0015 + pulse;
   80c7a:	4b13      	ldr	r3, [pc, #76]	; (80cc8 <pwm_set_duty+0xb8>)
   80c7c:	4798      	blx	r3
   80c7e:	a30c      	add	r3, pc, #48	; (adr r3, 80cb0 <pwm_set_duty+0xa0>)
   80c80:	e9d3 2300 	ldrd	r2, r3, [r3]
   80c84:	4c15      	ldr	r4, [pc, #84]	; (80cdc <pwm_set_duty+0xcc>)
   80c86:	47a0      	blx	r4
   80c88:	4b0d      	ldr	r3, [pc, #52]	; (80cc0 <pwm_set_duty+0xb0>)
   80c8a:	4798      	blx	r3
		result = pulse * percent;
   80c8c:	4910      	ldr	r1, [pc, #64]	; (80cd0 <pwm_set_duty+0xc0>)
   80c8e:	4b11      	ldr	r3, [pc, #68]	; (80cd4 <pwm_set_duty+0xc4>)
   80c90:	4798      	blx	r3
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= (int)result;
   80c92:	4d0c      	ldr	r5, [pc, #48]	; (80cc4 <pwm_set_duty+0xb4>)
   80c94:	f8d5 42a8 	ldr.w	r4, [r5, #680]	; 0x2a8
   80c98:	4b0f      	ldr	r3, [pc, #60]	; (80cd8 <pwm_set_duty+0xc8>)
   80c9a:	4798      	blx	r3
   80c9c:	4320      	orrs	r0, r4
   80c9e:	f8c5 02a8 	str.w	r0, [r5, #680]	; 0x2a8
		break;
   80ca2:	bd38      	pop	{r3, r4, r5, pc}
   80ca4:	f3af 8000 	nop.w
   80ca8:	7110e454 	.word	0x7110e454
   80cac:	3ed92a73 	.word	0x3ed92a73
   80cb0:	bc6a7efa 	.word	0xbc6a7efa
   80cb4:	3f589374 	.word	0x3f589374
   80cb8:	000810dd 	.word	0x000810dd
   80cbc:	000811a9 	.word	0x000811a9
   80cc0:	000816dd 	.word	0x000816dd
   80cc4:	40094000 	.word	0x40094000
   80cc8:	00081101 	.word	0x00081101
   80ccc:	00080e41 	.word	0x00080e41
   80cd0:	48203480 	.word	0x48203480
   80cd4:	00081999 	.word	0x00081999
   80cd8:	00081d25 	.word	0x00081d25
   80cdc:	00080e45 	.word	0x00080e45

00080ce0 <solenoid_init>:
#include "solenoid.h"
#include "sam.h"
#include "motor.h"

void solenoid_init(void){
	PIOC->PIO_PER |= PIO_PC9;
   80ce0:	4b06      	ldr	r3, [pc, #24]	; (80cfc <solenoid_init+0x1c>)
   80ce2:	681a      	ldr	r2, [r3, #0]
   80ce4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80ce8:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER |= PIO_PC9;
   80cea:	691a      	ldr	r2, [r3, #16]
   80cec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80cf0:	611a      	str	r2, [r3, #16]
	PIOC->PIO_SODR |= PIO_PC9;
   80cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80cf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   80cf8:	631a      	str	r2, [r3, #48]	; 0x30
   80cfa:	4770      	bx	lr
   80cfc:	400e1200 	.word	0x400e1200

00080d00 <solenoid_start>:
}

void solenoid_start(void){
	PIOC->PIO_CODR |= PIO_PC9;
   80d00:	4a02      	ldr	r2, [pc, #8]	; (80d0c <solenoid_start+0xc>)
   80d02:	6b53      	ldr	r3, [r2, #52]	; 0x34
   80d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80d08:	6353      	str	r3, [r2, #52]	; 0x34
   80d0a:	4770      	bx	lr
   80d0c:	400e1200 	.word	0x400e1200

00080d10 <solenoid_stop>:
}

void solenoid_stop(void){
	PIOC->PIO_SODR |= PIO_PC9;
   80d10:	4a02      	ldr	r2, [pc, #8]	; (80d1c <solenoid_stop+0xc>)
   80d12:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   80d18:	6313      	str	r3, [r2, #48]	; 0x30
   80d1a:	4770      	bx	lr
   80d1c:	400e1200 	.word	0x400e1200

00080d20 <solenoid_fire>:
}

void solenoid_fire(int button){
	if (button == 1 ) {
   80d20:	2801      	cmp	r0, #1
   80d22:	d000      	beq.n	80d26 <solenoid_fire+0x6>
   80d24:	4770      	bx	lr
void solenoid_fire(int button){
   80d26:	b508      	push	{r3, lr}
		solenoid_start();
   80d28:	4b03      	ldr	r3, [pc, #12]	; (80d38 <solenoid_fire+0x18>)
   80d2a:	4798      	blx	r3
		delay(200);
   80d2c:	20c8      	movs	r0, #200	; 0xc8
   80d2e:	4b03      	ldr	r3, [pc, #12]	; (80d3c <solenoid_fire+0x1c>)
   80d30:	4798      	blx	r3
		solenoid_stop();
   80d32:	4b03      	ldr	r3, [pc, #12]	; (80d40 <solenoid_fire+0x20>)
   80d34:	4798      	blx	r3
   80d36:	bd08      	pop	{r3, pc}
   80d38:	00080d01 	.word	0x00080d01
   80d3c:	00080671 	.word	0x00080671
   80d40:	00080d11 	.word	0x00080d11

00080d44 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80d44:	4b16      	ldr	r3, [pc, #88]	; (80da0 <configure_uart+0x5c>)
   80d46:	2200      	movs	r2, #0
   80d48:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   80d4a:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d4c:	4b15      	ldr	r3, [pc, #84]	; (80da4 <configure_uart+0x60>)
   80d4e:	f44f 7140 	mov.w	r1, #768	; 0x300
   80d52:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d54:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   80d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   80d58:	6f18      	ldr	r0, [r3, #112]	; 0x70
   80d5a:	4002      	ands	r2, r0
   80d5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80d60:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80d62:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80d64:	f44f 7280 	mov.w	r2, #256	; 0x100
   80d68:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80d6c:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80d6e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80d72:	21ac      	movs	r1, #172	; 0xac
   80d74:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   80d76:	f240 2123 	movw	r1, #547	; 0x223
   80d7a:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80d80:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80d82:	f240 2102 	movw	r1, #514	; 0x202
   80d86:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   80d8a:	f04f 31ff 	mov.w	r1, #4294967295
   80d8e:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   80d90:	21e1      	movs	r1, #225	; 0xe1
   80d92:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80d94:	4904      	ldr	r1, [pc, #16]	; (80da8 <configure_uart+0x64>)
   80d96:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80d98:	2250      	movs	r2, #80	; 0x50
   80d9a:	601a      	str	r2, [r3, #0]
   80d9c:	4770      	bx	lr
   80d9e:	bf00      	nop
   80da0:	20000450 	.word	0x20000450
   80da4:	400e0e00 	.word	0x400e0e00
   80da8:	e000e100 	.word	0xe000e100

00080dac <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80dac:	4b07      	ldr	r3, [pc, #28]	; (80dcc <uart_putchar+0x20>)
   80dae:	695b      	ldr	r3, [r3, #20]
   80db0:	f013 0f02 	tst.w	r3, #2
   80db4:	d008      	beq.n	80dc8 <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   80db6:	4b05      	ldr	r3, [pc, #20]	; (80dcc <uart_putchar+0x20>)
   80db8:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   80dba:	4b04      	ldr	r3, [pc, #16]	; (80dcc <uart_putchar+0x20>)
   80dbc:	695b      	ldr	r3, [r3, #20]
   80dbe:	f413 7f00 	tst.w	r3, #512	; 0x200
   80dc2:	d0fa      	beq.n	80dba <uart_putchar+0xe>
	return 0;
   80dc4:	2000      	movs	r0, #0
   80dc6:	4770      	bx	lr
	return 1;
   80dc8:	2001      	movs	r0, #1
}
   80dca:	4770      	bx	lr
   80dcc:	400e0800 	.word	0x400e0800

00080dd0 <UART_Handler>:

void UART_Handler(void)
{
   80dd0:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   80dd2:	4b15      	ldr	r3, [pc, #84]	; (80e28 <UART_Handler+0x58>)
   80dd4:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   80dd6:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   80dda:	d003      	beq.n	80de4 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   80ddc:	f44f 71a8 	mov.w	r1, #336	; 0x150
   80de0:	4a11      	ldr	r2, [pc, #68]	; (80e28 <UART_Handler+0x58>)
   80de2:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   80de4:	f013 0f01 	tst.w	r3, #1
   80de8:	d012      	beq.n	80e10 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   80dea:	4810      	ldr	r0, [pc, #64]	; (80e2c <UART_Handler+0x5c>)
   80dec:	7842      	ldrb	r2, [r0, #1]
   80dee:	1c53      	adds	r3, r2, #1
   80df0:	4259      	negs	r1, r3
   80df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80df6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80dfa:	bf58      	it	pl
   80dfc:	424b      	negpl	r3, r1
   80dfe:	7801      	ldrb	r1, [r0, #0]
   80e00:	428b      	cmp	r3, r1
   80e02:	d006      	beq.n	80e12 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80e04:	4908      	ldr	r1, [pc, #32]	; (80e28 <UART_Handler+0x58>)
   80e06:	6988      	ldr	r0, [r1, #24]
   80e08:	4908      	ldr	r1, [pc, #32]	; (80e2c <UART_Handler+0x5c>)
   80e0a:	440a      	add	r2, r1
   80e0c:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80e0e:	704b      	strb	r3, [r1, #1]
   80e10:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80e12:	4807      	ldr	r0, [pc, #28]	; (80e30 <UART_Handler+0x60>)
   80e14:	4b07      	ldr	r3, [pc, #28]	; (80e34 <UART_Handler+0x64>)
   80e16:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80e18:	4b04      	ldr	r3, [pc, #16]	; (80e2c <UART_Handler+0x5c>)
   80e1a:	7859      	ldrb	r1, [r3, #1]
   80e1c:	4a02      	ldr	r2, [pc, #8]	; (80e28 <UART_Handler+0x58>)
   80e1e:	6992      	ldr	r2, [r2, #24]
   80e20:	440b      	add	r3, r1
   80e22:	709a      	strb	r2, [r3, #2]
			return;
   80e24:	bd08      	pop	{r3, pc}
   80e26:	bf00      	nop
   80e28:	400e0800 	.word	0x400e0800
   80e2c:	20000450 	.word	0x20000450
   80e30:	00081f78 	.word	0x00081f78
   80e34:	00080b85 	.word	0x00080b85

00080e38 <__aeabi_drsub>:
   80e38:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80e3c:	e002      	b.n	80e44 <__adddf3>
   80e3e:	bf00      	nop

00080e40 <__aeabi_dsub>:
   80e40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080e44 <__adddf3>:
   80e44:	b530      	push	{r4, r5, lr}
   80e46:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80e4a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80e4e:	ea94 0f05 	teq	r4, r5
   80e52:	bf08      	it	eq
   80e54:	ea90 0f02 	teqeq	r0, r2
   80e58:	bf1f      	itttt	ne
   80e5a:	ea54 0c00 	orrsne.w	ip, r4, r0
   80e5e:	ea55 0c02 	orrsne.w	ip, r5, r2
   80e62:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80e66:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80e6a:	f000 80e2 	beq.w	81032 <__adddf3+0x1ee>
   80e6e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80e72:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80e76:	bfb8      	it	lt
   80e78:	426d      	neglt	r5, r5
   80e7a:	dd0c      	ble.n	80e96 <__adddf3+0x52>
   80e7c:	442c      	add	r4, r5
   80e7e:	ea80 0202 	eor.w	r2, r0, r2
   80e82:	ea81 0303 	eor.w	r3, r1, r3
   80e86:	ea82 0000 	eor.w	r0, r2, r0
   80e8a:	ea83 0101 	eor.w	r1, r3, r1
   80e8e:	ea80 0202 	eor.w	r2, r0, r2
   80e92:	ea81 0303 	eor.w	r3, r1, r3
   80e96:	2d36      	cmp	r5, #54	; 0x36
   80e98:	bf88      	it	hi
   80e9a:	bd30      	pophi	{r4, r5, pc}
   80e9c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80ea0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80ea4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80ea8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80eac:	d002      	beq.n	80eb4 <__adddf3+0x70>
   80eae:	4240      	negs	r0, r0
   80eb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80eb4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80eb8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80ebc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80ec0:	d002      	beq.n	80ec8 <__adddf3+0x84>
   80ec2:	4252      	negs	r2, r2
   80ec4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80ec8:	ea94 0f05 	teq	r4, r5
   80ecc:	f000 80a7 	beq.w	8101e <__adddf3+0x1da>
   80ed0:	f1a4 0401 	sub.w	r4, r4, #1
   80ed4:	f1d5 0e20 	rsbs	lr, r5, #32
   80ed8:	db0d      	blt.n	80ef6 <__adddf3+0xb2>
   80eda:	fa02 fc0e 	lsl.w	ip, r2, lr
   80ede:	fa22 f205 	lsr.w	r2, r2, r5
   80ee2:	1880      	adds	r0, r0, r2
   80ee4:	f141 0100 	adc.w	r1, r1, #0
   80ee8:	fa03 f20e 	lsl.w	r2, r3, lr
   80eec:	1880      	adds	r0, r0, r2
   80eee:	fa43 f305 	asr.w	r3, r3, r5
   80ef2:	4159      	adcs	r1, r3
   80ef4:	e00e      	b.n	80f14 <__adddf3+0xd0>
   80ef6:	f1a5 0520 	sub.w	r5, r5, #32
   80efa:	f10e 0e20 	add.w	lr, lr, #32
   80efe:	2a01      	cmp	r2, #1
   80f00:	fa03 fc0e 	lsl.w	ip, r3, lr
   80f04:	bf28      	it	cs
   80f06:	f04c 0c02 	orrcs.w	ip, ip, #2
   80f0a:	fa43 f305 	asr.w	r3, r3, r5
   80f0e:	18c0      	adds	r0, r0, r3
   80f10:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80f14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80f18:	d507      	bpl.n	80f2a <__adddf3+0xe6>
   80f1a:	f04f 0e00 	mov.w	lr, #0
   80f1e:	f1dc 0c00 	rsbs	ip, ip, #0
   80f22:	eb7e 0000 	sbcs.w	r0, lr, r0
   80f26:	eb6e 0101 	sbc.w	r1, lr, r1
   80f2a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80f2e:	d31b      	bcc.n	80f68 <__adddf3+0x124>
   80f30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80f34:	d30c      	bcc.n	80f50 <__adddf3+0x10c>
   80f36:	0849      	lsrs	r1, r1, #1
   80f38:	ea5f 0030 	movs.w	r0, r0, rrx
   80f3c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80f40:	f104 0401 	add.w	r4, r4, #1
   80f44:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80f48:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80f4c:	f080 809a 	bcs.w	81084 <__adddf3+0x240>
   80f50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80f54:	bf08      	it	eq
   80f56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80f5a:	f150 0000 	adcs.w	r0, r0, #0
   80f5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80f62:	ea41 0105 	orr.w	r1, r1, r5
   80f66:	bd30      	pop	{r4, r5, pc}
   80f68:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80f6c:	4140      	adcs	r0, r0
   80f6e:	eb41 0101 	adc.w	r1, r1, r1
   80f72:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80f76:	f1a4 0401 	sub.w	r4, r4, #1
   80f7a:	d1e9      	bne.n	80f50 <__adddf3+0x10c>
   80f7c:	f091 0f00 	teq	r1, #0
   80f80:	bf04      	itt	eq
   80f82:	4601      	moveq	r1, r0
   80f84:	2000      	moveq	r0, #0
   80f86:	fab1 f381 	clz	r3, r1
   80f8a:	bf08      	it	eq
   80f8c:	3320      	addeq	r3, #32
   80f8e:	f1a3 030b 	sub.w	r3, r3, #11
   80f92:	f1b3 0220 	subs.w	r2, r3, #32
   80f96:	da0c      	bge.n	80fb2 <__adddf3+0x16e>
   80f98:	320c      	adds	r2, #12
   80f9a:	dd08      	ble.n	80fae <__adddf3+0x16a>
   80f9c:	f102 0c14 	add.w	ip, r2, #20
   80fa0:	f1c2 020c 	rsb	r2, r2, #12
   80fa4:	fa01 f00c 	lsl.w	r0, r1, ip
   80fa8:	fa21 f102 	lsr.w	r1, r1, r2
   80fac:	e00c      	b.n	80fc8 <__adddf3+0x184>
   80fae:	f102 0214 	add.w	r2, r2, #20
   80fb2:	bfd8      	it	le
   80fb4:	f1c2 0c20 	rsble	ip, r2, #32
   80fb8:	fa01 f102 	lsl.w	r1, r1, r2
   80fbc:	fa20 fc0c 	lsr.w	ip, r0, ip
   80fc0:	bfdc      	itt	le
   80fc2:	ea41 010c 	orrle.w	r1, r1, ip
   80fc6:	4090      	lslle	r0, r2
   80fc8:	1ae4      	subs	r4, r4, r3
   80fca:	bfa2      	ittt	ge
   80fcc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80fd0:	4329      	orrge	r1, r5
   80fd2:	bd30      	popge	{r4, r5, pc}
   80fd4:	ea6f 0404 	mvn.w	r4, r4
   80fd8:	3c1f      	subs	r4, #31
   80fda:	da1c      	bge.n	81016 <__adddf3+0x1d2>
   80fdc:	340c      	adds	r4, #12
   80fde:	dc0e      	bgt.n	80ffe <__adddf3+0x1ba>
   80fe0:	f104 0414 	add.w	r4, r4, #20
   80fe4:	f1c4 0220 	rsb	r2, r4, #32
   80fe8:	fa20 f004 	lsr.w	r0, r0, r4
   80fec:	fa01 f302 	lsl.w	r3, r1, r2
   80ff0:	ea40 0003 	orr.w	r0, r0, r3
   80ff4:	fa21 f304 	lsr.w	r3, r1, r4
   80ff8:	ea45 0103 	orr.w	r1, r5, r3
   80ffc:	bd30      	pop	{r4, r5, pc}
   80ffe:	f1c4 040c 	rsb	r4, r4, #12
   81002:	f1c4 0220 	rsb	r2, r4, #32
   81006:	fa20 f002 	lsr.w	r0, r0, r2
   8100a:	fa01 f304 	lsl.w	r3, r1, r4
   8100e:	ea40 0003 	orr.w	r0, r0, r3
   81012:	4629      	mov	r1, r5
   81014:	bd30      	pop	{r4, r5, pc}
   81016:	fa21 f004 	lsr.w	r0, r1, r4
   8101a:	4629      	mov	r1, r5
   8101c:	bd30      	pop	{r4, r5, pc}
   8101e:	f094 0f00 	teq	r4, #0
   81022:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81026:	bf06      	itte	eq
   81028:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8102c:	3401      	addeq	r4, #1
   8102e:	3d01      	subne	r5, #1
   81030:	e74e      	b.n	80ed0 <__adddf3+0x8c>
   81032:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81036:	bf18      	it	ne
   81038:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8103c:	d029      	beq.n	81092 <__adddf3+0x24e>
   8103e:	ea94 0f05 	teq	r4, r5
   81042:	bf08      	it	eq
   81044:	ea90 0f02 	teqeq	r0, r2
   81048:	d005      	beq.n	81056 <__adddf3+0x212>
   8104a:	ea54 0c00 	orrs.w	ip, r4, r0
   8104e:	bf04      	itt	eq
   81050:	4619      	moveq	r1, r3
   81052:	4610      	moveq	r0, r2
   81054:	bd30      	pop	{r4, r5, pc}
   81056:	ea91 0f03 	teq	r1, r3
   8105a:	bf1e      	ittt	ne
   8105c:	2100      	movne	r1, #0
   8105e:	2000      	movne	r0, #0
   81060:	bd30      	popne	{r4, r5, pc}
   81062:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81066:	d105      	bne.n	81074 <__adddf3+0x230>
   81068:	0040      	lsls	r0, r0, #1
   8106a:	4149      	adcs	r1, r1
   8106c:	bf28      	it	cs
   8106e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81072:	bd30      	pop	{r4, r5, pc}
   81074:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81078:	bf3c      	itt	cc
   8107a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8107e:	bd30      	popcc	{r4, r5, pc}
   81080:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81084:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81088:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8108c:	f04f 0000 	mov.w	r0, #0
   81090:	bd30      	pop	{r4, r5, pc}
   81092:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81096:	bf1a      	itte	ne
   81098:	4619      	movne	r1, r3
   8109a:	4610      	movne	r0, r2
   8109c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   810a0:	bf1c      	itt	ne
   810a2:	460b      	movne	r3, r1
   810a4:	4602      	movne	r2, r0
   810a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   810aa:	bf06      	itte	eq
   810ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   810b0:	ea91 0f03 	teqeq	r1, r3
   810b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   810b8:	bd30      	pop	{r4, r5, pc}
   810ba:	bf00      	nop

000810bc <__aeabi_ui2d>:
   810bc:	f090 0f00 	teq	r0, #0
   810c0:	bf04      	itt	eq
   810c2:	2100      	moveq	r1, #0
   810c4:	4770      	bxeq	lr
   810c6:	b530      	push	{r4, r5, lr}
   810c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810d0:	f04f 0500 	mov.w	r5, #0
   810d4:	f04f 0100 	mov.w	r1, #0
   810d8:	e750      	b.n	80f7c <__adddf3+0x138>
   810da:	bf00      	nop

000810dc <__aeabi_i2d>:
   810dc:	f090 0f00 	teq	r0, #0
   810e0:	bf04      	itt	eq
   810e2:	2100      	moveq	r1, #0
   810e4:	4770      	bxeq	lr
   810e6:	b530      	push	{r4, r5, lr}
   810e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   810ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   810f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   810f4:	bf48      	it	mi
   810f6:	4240      	negmi	r0, r0
   810f8:	f04f 0100 	mov.w	r1, #0
   810fc:	e73e      	b.n	80f7c <__adddf3+0x138>
   810fe:	bf00      	nop

00081100 <__aeabi_f2d>:
   81100:	0042      	lsls	r2, r0, #1
   81102:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81106:	ea4f 0131 	mov.w	r1, r1, rrx
   8110a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8110e:	bf1f      	itttt	ne
   81110:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81114:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81118:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8111c:	4770      	bxne	lr
   8111e:	f092 0f00 	teq	r2, #0
   81122:	bf14      	ite	ne
   81124:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81128:	4770      	bxeq	lr
   8112a:	b530      	push	{r4, r5, lr}
   8112c:	f44f 7460 	mov.w	r4, #896	; 0x380
   81130:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81134:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81138:	e720      	b.n	80f7c <__adddf3+0x138>
   8113a:	bf00      	nop

0008113c <__aeabi_ul2d>:
   8113c:	ea50 0201 	orrs.w	r2, r0, r1
   81140:	bf08      	it	eq
   81142:	4770      	bxeq	lr
   81144:	b530      	push	{r4, r5, lr}
   81146:	f04f 0500 	mov.w	r5, #0
   8114a:	e00a      	b.n	81162 <__aeabi_l2d+0x16>

0008114c <__aeabi_l2d>:
   8114c:	ea50 0201 	orrs.w	r2, r0, r1
   81150:	bf08      	it	eq
   81152:	4770      	bxeq	lr
   81154:	b530      	push	{r4, r5, lr}
   81156:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8115a:	d502      	bpl.n	81162 <__aeabi_l2d+0x16>
   8115c:	4240      	negs	r0, r0
   8115e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81162:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81166:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8116a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8116e:	f43f aedc 	beq.w	80f2a <__adddf3+0xe6>
   81172:	f04f 0203 	mov.w	r2, #3
   81176:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8117a:	bf18      	it	ne
   8117c:	3203      	addne	r2, #3
   8117e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81182:	bf18      	it	ne
   81184:	3203      	addne	r2, #3
   81186:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8118a:	f1c2 0320 	rsb	r3, r2, #32
   8118e:	fa00 fc03 	lsl.w	ip, r0, r3
   81192:	fa20 f002 	lsr.w	r0, r0, r2
   81196:	fa01 fe03 	lsl.w	lr, r1, r3
   8119a:	ea40 000e 	orr.w	r0, r0, lr
   8119e:	fa21 f102 	lsr.w	r1, r1, r2
   811a2:	4414      	add	r4, r2
   811a4:	e6c1      	b.n	80f2a <__adddf3+0xe6>
   811a6:	bf00      	nop

000811a8 <__aeabi_dmul>:
   811a8:	b570      	push	{r4, r5, r6, lr}
   811aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   811ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   811b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   811b6:	bf1d      	ittte	ne
   811b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   811bc:	ea94 0f0c 	teqne	r4, ip
   811c0:	ea95 0f0c 	teqne	r5, ip
   811c4:	f000 f8de 	bleq	81384 <__aeabi_dmul+0x1dc>
   811c8:	442c      	add	r4, r5
   811ca:	ea81 0603 	eor.w	r6, r1, r3
   811ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   811d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   811d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   811da:	bf18      	it	ne
   811dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   811e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   811e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   811e8:	d038      	beq.n	8125c <__aeabi_dmul+0xb4>
   811ea:	fba0 ce02 	umull	ip, lr, r0, r2
   811ee:	f04f 0500 	mov.w	r5, #0
   811f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   811f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   811fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   811fe:	f04f 0600 	mov.w	r6, #0
   81202:	fbe1 5603 	umlal	r5, r6, r1, r3
   81206:	f09c 0f00 	teq	ip, #0
   8120a:	bf18      	it	ne
   8120c:	f04e 0e01 	orrne.w	lr, lr, #1
   81210:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81214:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81218:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8121c:	d204      	bcs.n	81228 <__aeabi_dmul+0x80>
   8121e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81222:	416d      	adcs	r5, r5
   81224:	eb46 0606 	adc.w	r6, r6, r6
   81228:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8122c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81230:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81234:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81238:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8123c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81240:	bf88      	it	hi
   81242:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81246:	d81e      	bhi.n	81286 <__aeabi_dmul+0xde>
   81248:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8124c:	bf08      	it	eq
   8124e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81252:	f150 0000 	adcs.w	r0, r0, #0
   81256:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8125a:	bd70      	pop	{r4, r5, r6, pc}
   8125c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81260:	ea46 0101 	orr.w	r1, r6, r1
   81264:	ea40 0002 	orr.w	r0, r0, r2
   81268:	ea81 0103 	eor.w	r1, r1, r3
   8126c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81270:	bfc2      	ittt	gt
   81272:	ebd4 050c 	rsbsgt	r5, r4, ip
   81276:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8127a:	bd70      	popgt	{r4, r5, r6, pc}
   8127c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81280:	f04f 0e00 	mov.w	lr, #0
   81284:	3c01      	subs	r4, #1
   81286:	f300 80ab 	bgt.w	813e0 <__aeabi_dmul+0x238>
   8128a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8128e:	bfde      	ittt	le
   81290:	2000      	movle	r0, #0
   81292:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81296:	bd70      	pople	{r4, r5, r6, pc}
   81298:	f1c4 0400 	rsb	r4, r4, #0
   8129c:	3c20      	subs	r4, #32
   8129e:	da35      	bge.n	8130c <__aeabi_dmul+0x164>
   812a0:	340c      	adds	r4, #12
   812a2:	dc1b      	bgt.n	812dc <__aeabi_dmul+0x134>
   812a4:	f104 0414 	add.w	r4, r4, #20
   812a8:	f1c4 0520 	rsb	r5, r4, #32
   812ac:	fa00 f305 	lsl.w	r3, r0, r5
   812b0:	fa20 f004 	lsr.w	r0, r0, r4
   812b4:	fa01 f205 	lsl.w	r2, r1, r5
   812b8:	ea40 0002 	orr.w	r0, r0, r2
   812bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   812c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   812c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812c8:	fa21 f604 	lsr.w	r6, r1, r4
   812cc:	eb42 0106 	adc.w	r1, r2, r6
   812d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   812d4:	bf08      	it	eq
   812d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   812da:	bd70      	pop	{r4, r5, r6, pc}
   812dc:	f1c4 040c 	rsb	r4, r4, #12
   812e0:	f1c4 0520 	rsb	r5, r4, #32
   812e4:	fa00 f304 	lsl.w	r3, r0, r4
   812e8:	fa20 f005 	lsr.w	r0, r0, r5
   812ec:	fa01 f204 	lsl.w	r2, r1, r4
   812f0:	ea40 0002 	orr.w	r0, r0, r2
   812f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   812f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   812fc:	f141 0100 	adc.w	r1, r1, #0
   81300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81304:	bf08      	it	eq
   81306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8130a:	bd70      	pop	{r4, r5, r6, pc}
   8130c:	f1c4 0520 	rsb	r5, r4, #32
   81310:	fa00 f205 	lsl.w	r2, r0, r5
   81314:	ea4e 0e02 	orr.w	lr, lr, r2
   81318:	fa20 f304 	lsr.w	r3, r0, r4
   8131c:	fa01 f205 	lsl.w	r2, r1, r5
   81320:	ea43 0302 	orr.w	r3, r3, r2
   81324:	fa21 f004 	lsr.w	r0, r1, r4
   81328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8132c:	fa21 f204 	lsr.w	r2, r1, r4
   81330:	ea20 0002 	bic.w	r0, r0, r2
   81334:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8133c:	bf08      	it	eq
   8133e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81342:	bd70      	pop	{r4, r5, r6, pc}
   81344:	f094 0f00 	teq	r4, #0
   81348:	d10f      	bne.n	8136a <__aeabi_dmul+0x1c2>
   8134a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8134e:	0040      	lsls	r0, r0, #1
   81350:	eb41 0101 	adc.w	r1, r1, r1
   81354:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81358:	bf08      	it	eq
   8135a:	3c01      	subeq	r4, #1
   8135c:	d0f7      	beq.n	8134e <__aeabi_dmul+0x1a6>
   8135e:	ea41 0106 	orr.w	r1, r1, r6
   81362:	f095 0f00 	teq	r5, #0
   81366:	bf18      	it	ne
   81368:	4770      	bxne	lr
   8136a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8136e:	0052      	lsls	r2, r2, #1
   81370:	eb43 0303 	adc.w	r3, r3, r3
   81374:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81378:	bf08      	it	eq
   8137a:	3d01      	subeq	r5, #1
   8137c:	d0f7      	beq.n	8136e <__aeabi_dmul+0x1c6>
   8137e:	ea43 0306 	orr.w	r3, r3, r6
   81382:	4770      	bx	lr
   81384:	ea94 0f0c 	teq	r4, ip
   81388:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8138c:	bf18      	it	ne
   8138e:	ea95 0f0c 	teqne	r5, ip
   81392:	d00c      	beq.n	813ae <__aeabi_dmul+0x206>
   81394:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81398:	bf18      	it	ne
   8139a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8139e:	d1d1      	bne.n	81344 <__aeabi_dmul+0x19c>
   813a0:	ea81 0103 	eor.w	r1, r1, r3
   813a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813a8:	f04f 0000 	mov.w	r0, #0
   813ac:	bd70      	pop	{r4, r5, r6, pc}
   813ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   813b2:	bf06      	itte	eq
   813b4:	4610      	moveq	r0, r2
   813b6:	4619      	moveq	r1, r3
   813b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   813bc:	d019      	beq.n	813f2 <__aeabi_dmul+0x24a>
   813be:	ea94 0f0c 	teq	r4, ip
   813c2:	d102      	bne.n	813ca <__aeabi_dmul+0x222>
   813c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   813c8:	d113      	bne.n	813f2 <__aeabi_dmul+0x24a>
   813ca:	ea95 0f0c 	teq	r5, ip
   813ce:	d105      	bne.n	813dc <__aeabi_dmul+0x234>
   813d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   813d4:	bf1c      	itt	ne
   813d6:	4610      	movne	r0, r2
   813d8:	4619      	movne	r1, r3
   813da:	d10a      	bne.n	813f2 <__aeabi_dmul+0x24a>
   813dc:	ea81 0103 	eor.w	r1, r1, r3
   813e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   813e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   813ec:	f04f 0000 	mov.w	r0, #0
   813f0:	bd70      	pop	{r4, r5, r6, pc}
   813f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   813f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   813fa:	bd70      	pop	{r4, r5, r6, pc}

000813fc <__aeabi_ddiv>:
   813fc:	b570      	push	{r4, r5, r6, lr}
   813fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81402:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81406:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8140a:	bf1d      	ittte	ne
   8140c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81410:	ea94 0f0c 	teqne	r4, ip
   81414:	ea95 0f0c 	teqne	r5, ip
   81418:	f000 f8a7 	bleq	8156a <__aeabi_ddiv+0x16e>
   8141c:	eba4 0405 	sub.w	r4, r4, r5
   81420:	ea81 0e03 	eor.w	lr, r1, r3
   81424:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81428:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8142c:	f000 8088 	beq.w	81540 <__aeabi_ddiv+0x144>
   81430:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81434:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81438:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8143c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81440:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81444:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81448:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8144c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81450:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81454:	429d      	cmp	r5, r3
   81456:	bf08      	it	eq
   81458:	4296      	cmpeq	r6, r2
   8145a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8145e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81462:	d202      	bcs.n	8146a <__aeabi_ddiv+0x6e>
   81464:	085b      	lsrs	r3, r3, #1
   81466:	ea4f 0232 	mov.w	r2, r2, rrx
   8146a:	1ab6      	subs	r6, r6, r2
   8146c:	eb65 0503 	sbc.w	r5, r5, r3
   81470:	085b      	lsrs	r3, r3, #1
   81472:	ea4f 0232 	mov.w	r2, r2, rrx
   81476:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8147a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8147e:	ebb6 0e02 	subs.w	lr, r6, r2
   81482:	eb75 0e03 	sbcs.w	lr, r5, r3
   81486:	bf22      	ittt	cs
   81488:	1ab6      	subcs	r6, r6, r2
   8148a:	4675      	movcs	r5, lr
   8148c:	ea40 000c 	orrcs.w	r0, r0, ip
   81490:	085b      	lsrs	r3, r3, #1
   81492:	ea4f 0232 	mov.w	r2, r2, rrx
   81496:	ebb6 0e02 	subs.w	lr, r6, r2
   8149a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8149e:	bf22      	ittt	cs
   814a0:	1ab6      	subcs	r6, r6, r2
   814a2:	4675      	movcs	r5, lr
   814a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   814a8:	085b      	lsrs	r3, r3, #1
   814aa:	ea4f 0232 	mov.w	r2, r2, rrx
   814ae:	ebb6 0e02 	subs.w	lr, r6, r2
   814b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   814b6:	bf22      	ittt	cs
   814b8:	1ab6      	subcs	r6, r6, r2
   814ba:	4675      	movcs	r5, lr
   814bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   814c0:	085b      	lsrs	r3, r3, #1
   814c2:	ea4f 0232 	mov.w	r2, r2, rrx
   814c6:	ebb6 0e02 	subs.w	lr, r6, r2
   814ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   814ce:	bf22      	ittt	cs
   814d0:	1ab6      	subcs	r6, r6, r2
   814d2:	4675      	movcs	r5, lr
   814d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   814d8:	ea55 0e06 	orrs.w	lr, r5, r6
   814dc:	d018      	beq.n	81510 <__aeabi_ddiv+0x114>
   814de:	ea4f 1505 	mov.w	r5, r5, lsl #4
   814e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   814e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   814ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   814ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   814f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   814f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   814fa:	d1c0      	bne.n	8147e <__aeabi_ddiv+0x82>
   814fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81500:	d10b      	bne.n	8151a <__aeabi_ddiv+0x11e>
   81502:	ea41 0100 	orr.w	r1, r1, r0
   81506:	f04f 0000 	mov.w	r0, #0
   8150a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8150e:	e7b6      	b.n	8147e <__aeabi_ddiv+0x82>
   81510:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81514:	bf04      	itt	eq
   81516:	4301      	orreq	r1, r0
   81518:	2000      	moveq	r0, #0
   8151a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8151e:	bf88      	it	hi
   81520:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81524:	f63f aeaf 	bhi.w	81286 <__aeabi_dmul+0xde>
   81528:	ebb5 0c03 	subs.w	ip, r5, r3
   8152c:	bf04      	itt	eq
   8152e:	ebb6 0c02 	subseq.w	ip, r6, r2
   81532:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81536:	f150 0000 	adcs.w	r0, r0, #0
   8153a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8153e:	bd70      	pop	{r4, r5, r6, pc}
   81540:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81544:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81548:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8154c:	bfc2      	ittt	gt
   8154e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81552:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81556:	bd70      	popgt	{r4, r5, r6, pc}
   81558:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8155c:	f04f 0e00 	mov.w	lr, #0
   81560:	3c01      	subs	r4, #1
   81562:	e690      	b.n	81286 <__aeabi_dmul+0xde>
   81564:	ea45 0e06 	orr.w	lr, r5, r6
   81568:	e68d      	b.n	81286 <__aeabi_dmul+0xde>
   8156a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8156e:	ea94 0f0c 	teq	r4, ip
   81572:	bf08      	it	eq
   81574:	ea95 0f0c 	teqeq	r5, ip
   81578:	f43f af3b 	beq.w	813f2 <__aeabi_dmul+0x24a>
   8157c:	ea94 0f0c 	teq	r4, ip
   81580:	d10a      	bne.n	81598 <__aeabi_ddiv+0x19c>
   81582:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81586:	f47f af34 	bne.w	813f2 <__aeabi_dmul+0x24a>
   8158a:	ea95 0f0c 	teq	r5, ip
   8158e:	f47f af25 	bne.w	813dc <__aeabi_dmul+0x234>
   81592:	4610      	mov	r0, r2
   81594:	4619      	mov	r1, r3
   81596:	e72c      	b.n	813f2 <__aeabi_dmul+0x24a>
   81598:	ea95 0f0c 	teq	r5, ip
   8159c:	d106      	bne.n	815ac <__aeabi_ddiv+0x1b0>
   8159e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   815a2:	f43f aefd 	beq.w	813a0 <__aeabi_dmul+0x1f8>
   815a6:	4610      	mov	r0, r2
   815a8:	4619      	mov	r1, r3
   815aa:	e722      	b.n	813f2 <__aeabi_dmul+0x24a>
   815ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   815b0:	bf18      	it	ne
   815b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   815b6:	f47f aec5 	bne.w	81344 <__aeabi_dmul+0x19c>
   815ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   815be:	f47f af0d 	bne.w	813dc <__aeabi_dmul+0x234>
   815c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   815c6:	f47f aeeb 	bne.w	813a0 <__aeabi_dmul+0x1f8>
   815ca:	e712      	b.n	813f2 <__aeabi_dmul+0x24a>

000815cc <__gedf2>:
   815cc:	f04f 3cff 	mov.w	ip, #4294967295
   815d0:	e006      	b.n	815e0 <__cmpdf2+0x4>
   815d2:	bf00      	nop

000815d4 <__ledf2>:
   815d4:	f04f 0c01 	mov.w	ip, #1
   815d8:	e002      	b.n	815e0 <__cmpdf2+0x4>
   815da:	bf00      	nop

000815dc <__cmpdf2>:
   815dc:	f04f 0c01 	mov.w	ip, #1
   815e0:	f84d cd04 	str.w	ip, [sp, #-4]!
   815e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   815e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   815ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   815f0:	bf18      	it	ne
   815f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   815f6:	d01b      	beq.n	81630 <__cmpdf2+0x54>
   815f8:	b001      	add	sp, #4
   815fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   815fe:	bf0c      	ite	eq
   81600:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   81604:	ea91 0f03 	teqne	r1, r3
   81608:	bf02      	ittt	eq
   8160a:	ea90 0f02 	teqeq	r0, r2
   8160e:	2000      	moveq	r0, #0
   81610:	4770      	bxeq	lr
   81612:	f110 0f00 	cmn.w	r0, #0
   81616:	ea91 0f03 	teq	r1, r3
   8161a:	bf58      	it	pl
   8161c:	4299      	cmppl	r1, r3
   8161e:	bf08      	it	eq
   81620:	4290      	cmpeq	r0, r2
   81622:	bf2c      	ite	cs
   81624:	17d8      	asrcs	r0, r3, #31
   81626:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8162a:	f040 0001 	orr.w	r0, r0, #1
   8162e:	4770      	bx	lr
   81630:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81634:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81638:	d102      	bne.n	81640 <__cmpdf2+0x64>
   8163a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8163e:	d107      	bne.n	81650 <__cmpdf2+0x74>
   81640:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81644:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81648:	d1d6      	bne.n	815f8 <__cmpdf2+0x1c>
   8164a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8164e:	d0d3      	beq.n	815f8 <__cmpdf2+0x1c>
   81650:	f85d 0b04 	ldr.w	r0, [sp], #4
   81654:	4770      	bx	lr
   81656:	bf00      	nop

00081658 <__aeabi_cdrcmple>:
   81658:	4684      	mov	ip, r0
   8165a:	4610      	mov	r0, r2
   8165c:	4662      	mov	r2, ip
   8165e:	468c      	mov	ip, r1
   81660:	4619      	mov	r1, r3
   81662:	4663      	mov	r3, ip
   81664:	e000      	b.n	81668 <__aeabi_cdcmpeq>
   81666:	bf00      	nop

00081668 <__aeabi_cdcmpeq>:
   81668:	b501      	push	{r0, lr}
   8166a:	f7ff ffb7 	bl	815dc <__cmpdf2>
   8166e:	2800      	cmp	r0, #0
   81670:	bf48      	it	mi
   81672:	f110 0f00 	cmnmi.w	r0, #0
   81676:	bd01      	pop	{r0, pc}

00081678 <__aeabi_dcmpeq>:
   81678:	f84d ed08 	str.w	lr, [sp, #-8]!
   8167c:	f7ff fff4 	bl	81668 <__aeabi_cdcmpeq>
   81680:	bf0c      	ite	eq
   81682:	2001      	moveq	r0, #1
   81684:	2000      	movne	r0, #0
   81686:	f85d fb08 	ldr.w	pc, [sp], #8
   8168a:	bf00      	nop

0008168c <__aeabi_dcmplt>:
   8168c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81690:	f7ff ffea 	bl	81668 <__aeabi_cdcmpeq>
   81694:	bf34      	ite	cc
   81696:	2001      	movcc	r0, #1
   81698:	2000      	movcs	r0, #0
   8169a:	f85d fb08 	ldr.w	pc, [sp], #8
   8169e:	bf00      	nop

000816a0 <__aeabi_dcmple>:
   816a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   816a4:	f7ff ffe0 	bl	81668 <__aeabi_cdcmpeq>
   816a8:	bf94      	ite	ls
   816aa:	2001      	movls	r0, #1
   816ac:	2000      	movhi	r0, #0
   816ae:	f85d fb08 	ldr.w	pc, [sp], #8
   816b2:	bf00      	nop

000816b4 <__aeabi_dcmpge>:
   816b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   816b8:	f7ff ffce 	bl	81658 <__aeabi_cdrcmple>
   816bc:	bf94      	ite	ls
   816be:	2001      	movls	r0, #1
   816c0:	2000      	movhi	r0, #0
   816c2:	f85d fb08 	ldr.w	pc, [sp], #8
   816c6:	bf00      	nop

000816c8 <__aeabi_dcmpgt>:
   816c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   816cc:	f7ff ffc4 	bl	81658 <__aeabi_cdrcmple>
   816d0:	bf34      	ite	cc
   816d2:	2001      	movcc	r0, #1
   816d4:	2000      	movcs	r0, #0
   816d6:	f85d fb08 	ldr.w	pc, [sp], #8
   816da:	bf00      	nop

000816dc <__aeabi_d2f>:
   816dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   816e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   816e4:	bf24      	itt	cs
   816e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   816ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   816ee:	d90d      	bls.n	8170c <__aeabi_d2f+0x30>
   816f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   816f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   816f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   816fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   81700:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   81704:	bf08      	it	eq
   81706:	f020 0001 	biceq.w	r0, r0, #1
   8170a:	4770      	bx	lr
   8170c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   81710:	d121      	bne.n	81756 <__aeabi_d2f+0x7a>
   81712:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   81716:	bfbc      	itt	lt
   81718:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   8171c:	4770      	bxlt	lr
   8171e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81722:	ea4f 5252 	mov.w	r2, r2, lsr #21
   81726:	f1c2 0218 	rsb	r2, r2, #24
   8172a:	f1c2 0c20 	rsb	ip, r2, #32
   8172e:	fa10 f30c 	lsls.w	r3, r0, ip
   81732:	fa20 f002 	lsr.w	r0, r0, r2
   81736:	bf18      	it	ne
   81738:	f040 0001 	orrne.w	r0, r0, #1
   8173c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81740:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   81744:	fa03 fc0c 	lsl.w	ip, r3, ip
   81748:	ea40 000c 	orr.w	r0, r0, ip
   8174c:	fa23 f302 	lsr.w	r3, r3, r2
   81750:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81754:	e7cc      	b.n	816f0 <__aeabi_d2f+0x14>
   81756:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8175a:	d107      	bne.n	8176c <__aeabi_d2f+0x90>
   8175c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   81760:	bf1e      	ittt	ne
   81762:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   81766:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8176a:	4770      	bxne	lr
   8176c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   81770:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81774:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81778:	4770      	bx	lr
   8177a:	bf00      	nop

0008177c <__aeabi_frsub>:
   8177c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81780:	e002      	b.n	81788 <__addsf3>
   81782:	bf00      	nop

00081784 <__aeabi_fsub>:
   81784:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00081788 <__addsf3>:
   81788:	0042      	lsls	r2, r0, #1
   8178a:	bf1f      	itttt	ne
   8178c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81790:	ea92 0f03 	teqne	r2, r3
   81794:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81798:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8179c:	d06a      	beq.n	81874 <__addsf3+0xec>
   8179e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   817a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   817a6:	bfc1      	itttt	gt
   817a8:	18d2      	addgt	r2, r2, r3
   817aa:	4041      	eorgt	r1, r0
   817ac:	4048      	eorgt	r0, r1
   817ae:	4041      	eorgt	r1, r0
   817b0:	bfb8      	it	lt
   817b2:	425b      	neglt	r3, r3
   817b4:	2b19      	cmp	r3, #25
   817b6:	bf88      	it	hi
   817b8:	4770      	bxhi	lr
   817ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   817be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   817c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   817c6:	bf18      	it	ne
   817c8:	4240      	negne	r0, r0
   817ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   817ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   817d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   817d6:	bf18      	it	ne
   817d8:	4249      	negne	r1, r1
   817da:	ea92 0f03 	teq	r2, r3
   817de:	d03f      	beq.n	81860 <__addsf3+0xd8>
   817e0:	f1a2 0201 	sub.w	r2, r2, #1
   817e4:	fa41 fc03 	asr.w	ip, r1, r3
   817e8:	eb10 000c 	adds.w	r0, r0, ip
   817ec:	f1c3 0320 	rsb	r3, r3, #32
   817f0:	fa01 f103 	lsl.w	r1, r1, r3
   817f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   817f8:	d502      	bpl.n	81800 <__addsf3+0x78>
   817fa:	4249      	negs	r1, r1
   817fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81800:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81804:	d313      	bcc.n	8182e <__addsf3+0xa6>
   81806:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8180a:	d306      	bcc.n	8181a <__addsf3+0x92>
   8180c:	0840      	lsrs	r0, r0, #1
   8180e:	ea4f 0131 	mov.w	r1, r1, rrx
   81812:	f102 0201 	add.w	r2, r2, #1
   81816:	2afe      	cmp	r2, #254	; 0xfe
   81818:	d251      	bcs.n	818be <__addsf3+0x136>
   8181a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8181e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81822:	bf08      	it	eq
   81824:	f020 0001 	biceq.w	r0, r0, #1
   81828:	ea40 0003 	orr.w	r0, r0, r3
   8182c:	4770      	bx	lr
   8182e:	0049      	lsls	r1, r1, #1
   81830:	eb40 0000 	adc.w	r0, r0, r0
   81834:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81838:	f1a2 0201 	sub.w	r2, r2, #1
   8183c:	d1ed      	bne.n	8181a <__addsf3+0x92>
   8183e:	fab0 fc80 	clz	ip, r0
   81842:	f1ac 0c08 	sub.w	ip, ip, #8
   81846:	ebb2 020c 	subs.w	r2, r2, ip
   8184a:	fa00 f00c 	lsl.w	r0, r0, ip
   8184e:	bfaa      	itet	ge
   81850:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81854:	4252      	neglt	r2, r2
   81856:	4318      	orrge	r0, r3
   81858:	bfbc      	itt	lt
   8185a:	40d0      	lsrlt	r0, r2
   8185c:	4318      	orrlt	r0, r3
   8185e:	4770      	bx	lr
   81860:	f092 0f00 	teq	r2, #0
   81864:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81868:	bf06      	itte	eq
   8186a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8186e:	3201      	addeq	r2, #1
   81870:	3b01      	subne	r3, #1
   81872:	e7b5      	b.n	817e0 <__addsf3+0x58>
   81874:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81878:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8187c:	bf18      	it	ne
   8187e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81882:	d021      	beq.n	818c8 <__addsf3+0x140>
   81884:	ea92 0f03 	teq	r2, r3
   81888:	d004      	beq.n	81894 <__addsf3+0x10c>
   8188a:	f092 0f00 	teq	r2, #0
   8188e:	bf08      	it	eq
   81890:	4608      	moveq	r0, r1
   81892:	4770      	bx	lr
   81894:	ea90 0f01 	teq	r0, r1
   81898:	bf1c      	itt	ne
   8189a:	2000      	movne	r0, #0
   8189c:	4770      	bxne	lr
   8189e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   818a2:	d104      	bne.n	818ae <__addsf3+0x126>
   818a4:	0040      	lsls	r0, r0, #1
   818a6:	bf28      	it	cs
   818a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   818ac:	4770      	bx	lr
   818ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   818b2:	bf3c      	itt	cc
   818b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   818b8:	4770      	bxcc	lr
   818ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   818be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   818c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   818c6:	4770      	bx	lr
   818c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   818cc:	bf16      	itet	ne
   818ce:	4608      	movne	r0, r1
   818d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   818d4:	4601      	movne	r1, r0
   818d6:	0242      	lsls	r2, r0, #9
   818d8:	bf06      	itte	eq
   818da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   818de:	ea90 0f01 	teqeq	r0, r1
   818e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   818e6:	4770      	bx	lr

000818e8 <__aeabi_ui2f>:
   818e8:	f04f 0300 	mov.w	r3, #0
   818ec:	e004      	b.n	818f8 <__aeabi_i2f+0x8>
   818ee:	bf00      	nop

000818f0 <__aeabi_i2f>:
   818f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   818f4:	bf48      	it	mi
   818f6:	4240      	negmi	r0, r0
   818f8:	ea5f 0c00 	movs.w	ip, r0
   818fc:	bf08      	it	eq
   818fe:	4770      	bxeq	lr
   81900:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81904:	4601      	mov	r1, r0
   81906:	f04f 0000 	mov.w	r0, #0
   8190a:	e01c      	b.n	81946 <__aeabi_l2f+0x2a>

0008190c <__aeabi_ul2f>:
   8190c:	ea50 0201 	orrs.w	r2, r0, r1
   81910:	bf08      	it	eq
   81912:	4770      	bxeq	lr
   81914:	f04f 0300 	mov.w	r3, #0
   81918:	e00a      	b.n	81930 <__aeabi_l2f+0x14>
   8191a:	bf00      	nop

0008191c <__aeabi_l2f>:
   8191c:	ea50 0201 	orrs.w	r2, r0, r1
   81920:	bf08      	it	eq
   81922:	4770      	bxeq	lr
   81924:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81928:	d502      	bpl.n	81930 <__aeabi_l2f+0x14>
   8192a:	4240      	negs	r0, r0
   8192c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81930:	ea5f 0c01 	movs.w	ip, r1
   81934:	bf02      	ittt	eq
   81936:	4684      	moveq	ip, r0
   81938:	4601      	moveq	r1, r0
   8193a:	2000      	moveq	r0, #0
   8193c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81940:	bf08      	it	eq
   81942:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81946:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8194a:	fabc f28c 	clz	r2, ip
   8194e:	3a08      	subs	r2, #8
   81950:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81954:	db10      	blt.n	81978 <__aeabi_l2f+0x5c>
   81956:	fa01 fc02 	lsl.w	ip, r1, r2
   8195a:	4463      	add	r3, ip
   8195c:	fa00 fc02 	lsl.w	ip, r0, r2
   81960:	f1c2 0220 	rsb	r2, r2, #32
   81964:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81968:	fa20 f202 	lsr.w	r2, r0, r2
   8196c:	eb43 0002 	adc.w	r0, r3, r2
   81970:	bf08      	it	eq
   81972:	f020 0001 	biceq.w	r0, r0, #1
   81976:	4770      	bx	lr
   81978:	f102 0220 	add.w	r2, r2, #32
   8197c:	fa01 fc02 	lsl.w	ip, r1, r2
   81980:	f1c2 0220 	rsb	r2, r2, #32
   81984:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81988:	fa21 f202 	lsr.w	r2, r1, r2
   8198c:	eb43 0002 	adc.w	r0, r3, r2
   81990:	bf08      	it	eq
   81992:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81996:	4770      	bx	lr

00081998 <__aeabi_fmul>:
   81998:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8199c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   819a0:	bf1e      	ittt	ne
   819a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   819a6:	ea92 0f0c 	teqne	r2, ip
   819aa:	ea93 0f0c 	teqne	r3, ip
   819ae:	d06f      	beq.n	81a90 <__aeabi_fmul+0xf8>
   819b0:	441a      	add	r2, r3
   819b2:	ea80 0c01 	eor.w	ip, r0, r1
   819b6:	0240      	lsls	r0, r0, #9
   819b8:	bf18      	it	ne
   819ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   819be:	d01e      	beq.n	819fe <__aeabi_fmul+0x66>
   819c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   819c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   819c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   819cc:	fba0 3101 	umull	r3, r1, r0, r1
   819d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   819d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   819d8:	bf3e      	ittt	cc
   819da:	0049      	lslcc	r1, r1, #1
   819dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   819e0:	005b      	lslcc	r3, r3, #1
   819e2:	ea40 0001 	orr.w	r0, r0, r1
   819e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   819ea:	2afd      	cmp	r2, #253	; 0xfd
   819ec:	d81d      	bhi.n	81a2a <__aeabi_fmul+0x92>
   819ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   819f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   819f6:	bf08      	it	eq
   819f8:	f020 0001 	biceq.w	r0, r0, #1
   819fc:	4770      	bx	lr
   819fe:	f090 0f00 	teq	r0, #0
   81a02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81a06:	bf08      	it	eq
   81a08:	0249      	lsleq	r1, r1, #9
   81a0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81a0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81a12:	3a7f      	subs	r2, #127	; 0x7f
   81a14:	bfc2      	ittt	gt
   81a16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81a1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81a1e:	4770      	bxgt	lr
   81a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81a24:	f04f 0300 	mov.w	r3, #0
   81a28:	3a01      	subs	r2, #1
   81a2a:	dc5d      	bgt.n	81ae8 <__aeabi_fmul+0x150>
   81a2c:	f112 0f19 	cmn.w	r2, #25
   81a30:	bfdc      	itt	le
   81a32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81a36:	4770      	bxle	lr
   81a38:	f1c2 0200 	rsb	r2, r2, #0
   81a3c:	0041      	lsls	r1, r0, #1
   81a3e:	fa21 f102 	lsr.w	r1, r1, r2
   81a42:	f1c2 0220 	rsb	r2, r2, #32
   81a46:	fa00 fc02 	lsl.w	ip, r0, r2
   81a4a:	ea5f 0031 	movs.w	r0, r1, rrx
   81a4e:	f140 0000 	adc.w	r0, r0, #0
   81a52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81a56:	bf08      	it	eq
   81a58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81a5c:	4770      	bx	lr
   81a5e:	f092 0f00 	teq	r2, #0
   81a62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81a66:	bf02      	ittt	eq
   81a68:	0040      	lsleq	r0, r0, #1
   81a6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81a6e:	3a01      	subeq	r2, #1
   81a70:	d0f9      	beq.n	81a66 <__aeabi_fmul+0xce>
   81a72:	ea40 000c 	orr.w	r0, r0, ip
   81a76:	f093 0f00 	teq	r3, #0
   81a7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81a7e:	bf02      	ittt	eq
   81a80:	0049      	lsleq	r1, r1, #1
   81a82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81a86:	3b01      	subeq	r3, #1
   81a88:	d0f9      	beq.n	81a7e <__aeabi_fmul+0xe6>
   81a8a:	ea41 010c 	orr.w	r1, r1, ip
   81a8e:	e78f      	b.n	819b0 <__aeabi_fmul+0x18>
   81a90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81a94:	ea92 0f0c 	teq	r2, ip
   81a98:	bf18      	it	ne
   81a9a:	ea93 0f0c 	teqne	r3, ip
   81a9e:	d00a      	beq.n	81ab6 <__aeabi_fmul+0x11e>
   81aa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81aa4:	bf18      	it	ne
   81aa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81aaa:	d1d8      	bne.n	81a5e <__aeabi_fmul+0xc6>
   81aac:	ea80 0001 	eor.w	r0, r0, r1
   81ab0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81ab4:	4770      	bx	lr
   81ab6:	f090 0f00 	teq	r0, #0
   81aba:	bf17      	itett	ne
   81abc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81ac0:	4608      	moveq	r0, r1
   81ac2:	f091 0f00 	teqne	r1, #0
   81ac6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81aca:	d014      	beq.n	81af6 <__aeabi_fmul+0x15e>
   81acc:	ea92 0f0c 	teq	r2, ip
   81ad0:	d101      	bne.n	81ad6 <__aeabi_fmul+0x13e>
   81ad2:	0242      	lsls	r2, r0, #9
   81ad4:	d10f      	bne.n	81af6 <__aeabi_fmul+0x15e>
   81ad6:	ea93 0f0c 	teq	r3, ip
   81ada:	d103      	bne.n	81ae4 <__aeabi_fmul+0x14c>
   81adc:	024b      	lsls	r3, r1, #9
   81ade:	bf18      	it	ne
   81ae0:	4608      	movne	r0, r1
   81ae2:	d108      	bne.n	81af6 <__aeabi_fmul+0x15e>
   81ae4:	ea80 0001 	eor.w	r0, r0, r1
   81ae8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81af4:	4770      	bx	lr
   81af6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81afa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81afe:	4770      	bx	lr

00081b00 <__aeabi_fdiv>:
   81b00:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81b04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81b08:	bf1e      	ittt	ne
   81b0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81b0e:	ea92 0f0c 	teqne	r2, ip
   81b12:	ea93 0f0c 	teqne	r3, ip
   81b16:	d069      	beq.n	81bec <__aeabi_fdiv+0xec>
   81b18:	eba2 0203 	sub.w	r2, r2, r3
   81b1c:	ea80 0c01 	eor.w	ip, r0, r1
   81b20:	0249      	lsls	r1, r1, #9
   81b22:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81b26:	d037      	beq.n	81b98 <__aeabi_fdiv+0x98>
   81b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81b2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81b30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81b34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81b38:	428b      	cmp	r3, r1
   81b3a:	bf38      	it	cc
   81b3c:	005b      	lslcc	r3, r3, #1
   81b3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81b42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81b46:	428b      	cmp	r3, r1
   81b48:	bf24      	itt	cs
   81b4a:	1a5b      	subcs	r3, r3, r1
   81b4c:	ea40 000c 	orrcs.w	r0, r0, ip
   81b50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81b54:	bf24      	itt	cs
   81b56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81b5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81b5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81b62:	bf24      	itt	cs
   81b64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81b68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81b6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81b70:	bf24      	itt	cs
   81b72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81b76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81b7a:	011b      	lsls	r3, r3, #4
   81b7c:	bf18      	it	ne
   81b7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81b82:	d1e0      	bne.n	81b46 <__aeabi_fdiv+0x46>
   81b84:	2afd      	cmp	r2, #253	; 0xfd
   81b86:	f63f af50 	bhi.w	81a2a <__aeabi_fmul+0x92>
   81b8a:	428b      	cmp	r3, r1
   81b8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81b90:	bf08      	it	eq
   81b92:	f020 0001 	biceq.w	r0, r0, #1
   81b96:	4770      	bx	lr
   81b98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81b9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81ba0:	327f      	adds	r2, #127	; 0x7f
   81ba2:	bfc2      	ittt	gt
   81ba4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81ba8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81bac:	4770      	bxgt	lr
   81bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81bb2:	f04f 0300 	mov.w	r3, #0
   81bb6:	3a01      	subs	r2, #1
   81bb8:	e737      	b.n	81a2a <__aeabi_fmul+0x92>
   81bba:	f092 0f00 	teq	r2, #0
   81bbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81bc2:	bf02      	ittt	eq
   81bc4:	0040      	lsleq	r0, r0, #1
   81bc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81bca:	3a01      	subeq	r2, #1
   81bcc:	d0f9      	beq.n	81bc2 <__aeabi_fdiv+0xc2>
   81bce:	ea40 000c 	orr.w	r0, r0, ip
   81bd2:	f093 0f00 	teq	r3, #0
   81bd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81bda:	bf02      	ittt	eq
   81bdc:	0049      	lsleq	r1, r1, #1
   81bde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81be2:	3b01      	subeq	r3, #1
   81be4:	d0f9      	beq.n	81bda <__aeabi_fdiv+0xda>
   81be6:	ea41 010c 	orr.w	r1, r1, ip
   81bea:	e795      	b.n	81b18 <__aeabi_fdiv+0x18>
   81bec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81bf0:	ea92 0f0c 	teq	r2, ip
   81bf4:	d108      	bne.n	81c08 <__aeabi_fdiv+0x108>
   81bf6:	0242      	lsls	r2, r0, #9
   81bf8:	f47f af7d 	bne.w	81af6 <__aeabi_fmul+0x15e>
   81bfc:	ea93 0f0c 	teq	r3, ip
   81c00:	f47f af70 	bne.w	81ae4 <__aeabi_fmul+0x14c>
   81c04:	4608      	mov	r0, r1
   81c06:	e776      	b.n	81af6 <__aeabi_fmul+0x15e>
   81c08:	ea93 0f0c 	teq	r3, ip
   81c0c:	d104      	bne.n	81c18 <__aeabi_fdiv+0x118>
   81c0e:	024b      	lsls	r3, r1, #9
   81c10:	f43f af4c 	beq.w	81aac <__aeabi_fmul+0x114>
   81c14:	4608      	mov	r0, r1
   81c16:	e76e      	b.n	81af6 <__aeabi_fmul+0x15e>
   81c18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81c1c:	bf18      	it	ne
   81c1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81c22:	d1ca      	bne.n	81bba <__aeabi_fdiv+0xba>
   81c24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81c28:	f47f af5c 	bne.w	81ae4 <__aeabi_fmul+0x14c>
   81c2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81c30:	f47f af3c 	bne.w	81aac <__aeabi_fmul+0x114>
   81c34:	e75f      	b.n	81af6 <__aeabi_fmul+0x15e>
   81c36:	bf00      	nop

00081c38 <__gesf2>:
   81c38:	f04f 3cff 	mov.w	ip, #4294967295
   81c3c:	e006      	b.n	81c4c <__cmpsf2+0x4>
   81c3e:	bf00      	nop

00081c40 <__lesf2>:
   81c40:	f04f 0c01 	mov.w	ip, #1
   81c44:	e002      	b.n	81c4c <__cmpsf2+0x4>
   81c46:	bf00      	nop

00081c48 <__cmpsf2>:
   81c48:	f04f 0c01 	mov.w	ip, #1
   81c4c:	f84d cd04 	str.w	ip, [sp, #-4]!
   81c50:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81c54:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81c5c:	bf18      	it	ne
   81c5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81c62:	d011      	beq.n	81c88 <__cmpsf2+0x40>
   81c64:	b001      	add	sp, #4
   81c66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   81c6a:	bf18      	it	ne
   81c6c:	ea90 0f01 	teqne	r0, r1
   81c70:	bf58      	it	pl
   81c72:	ebb2 0003 	subspl.w	r0, r2, r3
   81c76:	bf88      	it	hi
   81c78:	17c8      	asrhi	r0, r1, #31
   81c7a:	bf38      	it	cc
   81c7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   81c80:	bf18      	it	ne
   81c82:	f040 0001 	orrne.w	r0, r0, #1
   81c86:	4770      	bx	lr
   81c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81c8c:	d102      	bne.n	81c94 <__cmpsf2+0x4c>
   81c8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   81c92:	d105      	bne.n	81ca0 <__cmpsf2+0x58>
   81c94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   81c98:	d1e4      	bne.n	81c64 <__cmpsf2+0x1c>
   81c9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   81c9e:	d0e1      	beq.n	81c64 <__cmpsf2+0x1c>
   81ca0:	f85d 0b04 	ldr.w	r0, [sp], #4
   81ca4:	4770      	bx	lr
   81ca6:	bf00      	nop

00081ca8 <__aeabi_cfrcmple>:
   81ca8:	4684      	mov	ip, r0
   81caa:	4608      	mov	r0, r1
   81cac:	4661      	mov	r1, ip
   81cae:	e7ff      	b.n	81cb0 <__aeabi_cfcmpeq>

00081cb0 <__aeabi_cfcmpeq>:
   81cb0:	b50f      	push	{r0, r1, r2, r3, lr}
   81cb2:	f7ff ffc9 	bl	81c48 <__cmpsf2>
   81cb6:	2800      	cmp	r0, #0
   81cb8:	bf48      	it	mi
   81cba:	f110 0f00 	cmnmi.w	r0, #0
   81cbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

00081cc0 <__aeabi_fcmpeq>:
   81cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cc4:	f7ff fff4 	bl	81cb0 <__aeabi_cfcmpeq>
   81cc8:	bf0c      	ite	eq
   81cca:	2001      	moveq	r0, #1
   81ccc:	2000      	movne	r0, #0
   81cce:	f85d fb08 	ldr.w	pc, [sp], #8
   81cd2:	bf00      	nop

00081cd4 <__aeabi_fcmplt>:
   81cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cd8:	f7ff ffea 	bl	81cb0 <__aeabi_cfcmpeq>
   81cdc:	bf34      	ite	cc
   81cde:	2001      	movcc	r0, #1
   81ce0:	2000      	movcs	r0, #0
   81ce2:	f85d fb08 	ldr.w	pc, [sp], #8
   81ce6:	bf00      	nop

00081ce8 <__aeabi_fcmple>:
   81ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
   81cec:	f7ff ffe0 	bl	81cb0 <__aeabi_cfcmpeq>
   81cf0:	bf94      	ite	ls
   81cf2:	2001      	movls	r0, #1
   81cf4:	2000      	movhi	r0, #0
   81cf6:	f85d fb08 	ldr.w	pc, [sp], #8
   81cfa:	bf00      	nop

00081cfc <__aeabi_fcmpge>:
   81cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   81d00:	f7ff ffd2 	bl	81ca8 <__aeabi_cfrcmple>
   81d04:	bf94      	ite	ls
   81d06:	2001      	movls	r0, #1
   81d08:	2000      	movhi	r0, #0
   81d0a:	f85d fb08 	ldr.w	pc, [sp], #8
   81d0e:	bf00      	nop

00081d10 <__aeabi_fcmpgt>:
   81d10:	f84d ed08 	str.w	lr, [sp, #-8]!
   81d14:	f7ff ffc8 	bl	81ca8 <__aeabi_cfrcmple>
   81d18:	bf34      	ite	cc
   81d1a:	2001      	movcc	r0, #1
   81d1c:	2000      	movcs	r0, #0
   81d1e:	f85d fb08 	ldr.w	pc, [sp], #8
   81d22:	bf00      	nop

00081d24 <__aeabi_f2iz>:
   81d24:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81d28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81d2c:	d30f      	bcc.n	81d4e <__aeabi_f2iz+0x2a>
   81d2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81d32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81d36:	d90d      	bls.n	81d54 <__aeabi_f2iz+0x30>
   81d38:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81d40:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81d44:	fa23 f002 	lsr.w	r0, r3, r2
   81d48:	bf18      	it	ne
   81d4a:	4240      	negne	r0, r0
   81d4c:	4770      	bx	lr
   81d4e:	f04f 0000 	mov.w	r0, #0
   81d52:	4770      	bx	lr
   81d54:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81d58:	d101      	bne.n	81d5e <__aeabi_f2iz+0x3a>
   81d5a:	0242      	lsls	r2, r0, #9
   81d5c:	d105      	bne.n	81d6a <__aeabi_f2iz+0x46>
   81d5e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   81d62:	bf08      	it	eq
   81d64:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81d68:	4770      	bx	lr
   81d6a:	f04f 0000 	mov.w	r0, #0
   81d6e:	4770      	bx	lr

00081d70 <__aeabi_f2uiz>:
   81d70:	0042      	lsls	r2, r0, #1
   81d72:	d20e      	bcs.n	81d92 <__aeabi_f2uiz+0x22>
   81d74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81d78:	d30b      	bcc.n	81d92 <__aeabi_f2uiz+0x22>
   81d7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81d7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81d82:	d409      	bmi.n	81d98 <__aeabi_f2uiz+0x28>
   81d84:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81d88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81d8c:	fa23 f002 	lsr.w	r0, r3, r2
   81d90:	4770      	bx	lr
   81d92:	f04f 0000 	mov.w	r0, #0
   81d96:	4770      	bx	lr
   81d98:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81d9c:	d101      	bne.n	81da2 <__aeabi_f2uiz+0x32>
   81d9e:	0242      	lsls	r2, r0, #9
   81da0:	d102      	bne.n	81da8 <__aeabi_f2uiz+0x38>
   81da2:	f04f 30ff 	mov.w	r0, #4294967295
   81da6:	4770      	bx	lr
   81da8:	f04f 0000 	mov.w	r0, #0
   81dac:	4770      	bx	lr
   81dae:	bf00      	nop

00081db0 <__libc_init_array>:
   81db0:	b570      	push	{r4, r5, r6, lr}
   81db2:	4e0f      	ldr	r6, [pc, #60]	; (81df0 <__libc_init_array+0x40>)
   81db4:	4d0f      	ldr	r5, [pc, #60]	; (81df4 <__libc_init_array+0x44>)
   81db6:	1b76      	subs	r6, r6, r5
   81db8:	10b6      	asrs	r6, r6, #2
   81dba:	bf18      	it	ne
   81dbc:	2400      	movne	r4, #0
   81dbe:	d005      	beq.n	81dcc <__libc_init_array+0x1c>
   81dc0:	3401      	adds	r4, #1
   81dc2:	f855 3b04 	ldr.w	r3, [r5], #4
   81dc6:	4798      	blx	r3
   81dc8:	42a6      	cmp	r6, r4
   81dca:	d1f9      	bne.n	81dc0 <__libc_init_array+0x10>
   81dcc:	4e0a      	ldr	r6, [pc, #40]	; (81df8 <__libc_init_array+0x48>)
   81dce:	4d0b      	ldr	r5, [pc, #44]	; (81dfc <__libc_init_array+0x4c>)
   81dd0:	f000 f8e4 	bl	81f9c <_init>
   81dd4:	1b76      	subs	r6, r6, r5
   81dd6:	10b6      	asrs	r6, r6, #2
   81dd8:	bf18      	it	ne
   81dda:	2400      	movne	r4, #0
   81ddc:	d006      	beq.n	81dec <__libc_init_array+0x3c>
   81dde:	3401      	adds	r4, #1
   81de0:	f855 3b04 	ldr.w	r3, [r5], #4
   81de4:	4798      	blx	r3
   81de6:	42a6      	cmp	r6, r4
   81de8:	d1f9      	bne.n	81dde <__libc_init_array+0x2e>
   81dea:	bd70      	pop	{r4, r5, r6, pc}
   81dec:	bd70      	pop	{r4, r5, r6, pc}
   81dee:	bf00      	nop
   81df0:	00081fa8 	.word	0x00081fa8
   81df4:	00081fa8 	.word	0x00081fa8
   81df8:	00081fb0 	.word	0x00081fb0
   81dfc:	00081fa8 	.word	0x00081fa8

00081e00 <register_fini>:
   81e00:	4b02      	ldr	r3, [pc, #8]	; (81e0c <register_fini+0xc>)
   81e02:	b113      	cbz	r3, 81e0a <register_fini+0xa>
   81e04:	4802      	ldr	r0, [pc, #8]	; (81e10 <register_fini+0x10>)
   81e06:	f000 b805 	b.w	81e14 <atexit>
   81e0a:	4770      	bx	lr
   81e0c:	00000000 	.word	0x00000000
   81e10:	00081e21 	.word	0x00081e21

00081e14 <atexit>:
   81e14:	2300      	movs	r3, #0
   81e16:	4601      	mov	r1, r0
   81e18:	461a      	mov	r2, r3
   81e1a:	4618      	mov	r0, r3
   81e1c:	f000 b81e 	b.w	81e5c <__register_exitproc>

00081e20 <__libc_fini_array>:
   81e20:	b538      	push	{r3, r4, r5, lr}
   81e22:	4c0a      	ldr	r4, [pc, #40]	; (81e4c <__libc_fini_array+0x2c>)
   81e24:	4d0a      	ldr	r5, [pc, #40]	; (81e50 <__libc_fini_array+0x30>)
   81e26:	1b64      	subs	r4, r4, r5
   81e28:	10a4      	asrs	r4, r4, #2
   81e2a:	d00a      	beq.n	81e42 <__libc_fini_array+0x22>
   81e2c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   81e30:	3b01      	subs	r3, #1
   81e32:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81e36:	3c01      	subs	r4, #1
   81e38:	f855 3904 	ldr.w	r3, [r5], #-4
   81e3c:	4798      	blx	r3
   81e3e:	2c00      	cmp	r4, #0
   81e40:	d1f9      	bne.n	81e36 <__libc_fini_array+0x16>
   81e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81e46:	f000 b8b3 	b.w	81fb0 <_fini>
   81e4a:	bf00      	nop
   81e4c:	00081fc0 	.word	0x00081fc0
   81e50:	00081fbc 	.word	0x00081fbc

00081e54 <__retarget_lock_acquire_recursive>:
   81e54:	4770      	bx	lr
   81e56:	bf00      	nop

00081e58 <__retarget_lock_release_recursive>:
   81e58:	4770      	bx	lr
   81e5a:	bf00      	nop

00081e5c <__register_exitproc>:
   81e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81e60:	4d2c      	ldr	r5, [pc, #176]	; (81f14 <__register_exitproc+0xb8>)
   81e62:	4606      	mov	r6, r0
   81e64:	6828      	ldr	r0, [r5, #0]
   81e66:	4698      	mov	r8, r3
   81e68:	460f      	mov	r7, r1
   81e6a:	4691      	mov	r9, r2
   81e6c:	f7ff fff2 	bl	81e54 <__retarget_lock_acquire_recursive>
   81e70:	4b29      	ldr	r3, [pc, #164]	; (81f18 <__register_exitproc+0xbc>)
   81e72:	681c      	ldr	r4, [r3, #0]
   81e74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81e78:	2b00      	cmp	r3, #0
   81e7a:	d03e      	beq.n	81efa <__register_exitproc+0x9e>
   81e7c:	685a      	ldr	r2, [r3, #4]
   81e7e:	2a1f      	cmp	r2, #31
   81e80:	dc1c      	bgt.n	81ebc <__register_exitproc+0x60>
   81e82:	f102 0e01 	add.w	lr, r2, #1
   81e86:	b176      	cbz	r6, 81ea6 <__register_exitproc+0x4a>
   81e88:	2101      	movs	r1, #1
   81e8a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   81e8e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   81e92:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81e96:	4091      	lsls	r1, r2
   81e98:	4308      	orrs	r0, r1
   81e9a:	2e02      	cmp	r6, #2
   81e9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81ea0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81ea4:	d023      	beq.n	81eee <__register_exitproc+0x92>
   81ea6:	3202      	adds	r2, #2
   81ea8:	f8c3 e004 	str.w	lr, [r3, #4]
   81eac:	6828      	ldr	r0, [r5, #0]
   81eae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   81eb2:	f7ff ffd1 	bl	81e58 <__retarget_lock_release_recursive>
   81eb6:	2000      	movs	r0, #0
   81eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ebc:	4b17      	ldr	r3, [pc, #92]	; (81f1c <__register_exitproc+0xc0>)
   81ebe:	b30b      	cbz	r3, 81f04 <__register_exitproc+0xa8>
   81ec0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81ec4:	f3af 8000 	nop.w
   81ec8:	4603      	mov	r3, r0
   81eca:	b1d8      	cbz	r0, 81f04 <__register_exitproc+0xa8>
   81ecc:	2000      	movs	r0, #0
   81ece:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   81ed2:	f04f 0e01 	mov.w	lr, #1
   81ed6:	6058      	str	r0, [r3, #4]
   81ed8:	6019      	str	r1, [r3, #0]
   81eda:	4602      	mov	r2, r0
   81edc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81ee0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   81ee4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   81ee8:	2e00      	cmp	r6, #0
   81eea:	d0dc      	beq.n	81ea6 <__register_exitproc+0x4a>
   81eec:	e7cc      	b.n	81e88 <__register_exitproc+0x2c>
   81eee:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   81ef2:	4301      	orrs	r1, r0
   81ef4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   81ef8:	e7d5      	b.n	81ea6 <__register_exitproc+0x4a>
   81efa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   81efe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   81f02:	e7bb      	b.n	81e7c <__register_exitproc+0x20>
   81f04:	6828      	ldr	r0, [r5, #0]
   81f06:	f7ff ffa7 	bl	81e58 <__retarget_lock_release_recursive>
   81f0a:	f04f 30ff 	mov.w	r0, #4294967295
   81f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81f12:	bf00      	nop
   81f14:	20000430 	.word	0x20000430
   81f18:	00081f98 	.word	0x00081f98
   81f1c:	00000000 	.word	0x00000000
   81f20:	304e4143 	.word	0x304e4143
   81f24:	73656d20 	.word	0x73656d20
   81f28:	65676173 	.word	0x65676173
   81f2c:	72726120 	.word	0x72726120
   81f30:	64657669 	.word	0x64657669
   81f34:	206e6920 	.word	0x206e6920
   81f38:	2d6e6f6e 	.word	0x2d6e6f6e
   81f3c:	64657375 	.word	0x64657375
   81f40:	69616d20 	.word	0x69616d20
   81f44:	786f626c 	.word	0x786f626c
   81f48:	00000d0a 	.word	0x00000d0a
   81f4c:	23232323 	.word	0x23232323
   81f50:	23232323 	.word	0x23232323
   81f54:	20232323 	.word	0x20232323
   81f58:	0d206425 	.word	0x0d206425
   81f5c:	0000000a 	.word	0x0000000a
   81f60:	524f4353 	.word	0x524f4353
   81f64:	203a2045 	.word	0x203a2045
   81f68:	0d206425 	.word	0x0d206425
   81f6c:	0000000a 	.word	0x0000000a
   81f70:	6c756e28 	.word	0x6c756e28
   81f74:	0000296c 	.word	0x0000296c
   81f78:	3a525245 	.word	0x3a525245
   81f7c:	52415520 	.word	0x52415520
   81f80:	58522054 	.word	0x58522054
   81f84:	66756220 	.word	0x66756220
   81f88:	20726566 	.word	0x20726566
   81f8c:	66207369 	.word	0x66207369
   81f90:	0a6c6c75 	.word	0x0a6c6c75
   81f94:	0000000d 	.word	0x0000000d

00081f98 <_global_impure_ptr>:
   81f98:	20000008                                ... 

00081f9c <_init>:
   81f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81f9e:	bf00      	nop
   81fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81fa2:	bc08      	pop	{r3}
   81fa4:	469e      	mov	lr, r3
   81fa6:	4770      	bx	lr

00081fa8 <__init_array_start>:
   81fa8:	00081e01 	.word	0x00081e01

00081fac <__frame_dummy_init_array_entry>:
   81fac:	00080119                                ....

00081fb0 <_fini>:
   81fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81fb2:	bf00      	nop
   81fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81fb6:	bc08      	pop	{r3}
   81fb8:	469e      	mov	lr, r3
   81fba:	4770      	bx	lr

00081fbc <__fini_array_start>:
   81fbc:	000800f5 	.word	0x000800f5

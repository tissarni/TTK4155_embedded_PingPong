
node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001768  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00081768  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  20000434  00081b9c  00020434  2**2
                  ALLOC
  3 .stack        00000400  200004b8  00081c20  00020434  2**0
                  ALLOC
  4 .heap         00000200  200008b8  00082020  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006511  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000104c  00000000  00000000  000269c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000ef3  00000000  00000000  00027a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000001b0  00000000  00000000  00028906  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  00028ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00012a7d  00000000  00000000  00028c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000421b  00000000  00000000  0003b69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000552d5  00000000  00000000  0003f8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000690  00000000  00000000  00094b8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b8 08 00 20 c9 03 08 00 c5 03 08 00 c5 03 08 00     ... ............
   80010:	c5 03 08 00 c5 03 08 00 c5 03 08 00 00 00 00 00     ................
	...
   8002c:	c5 03 08 00 c5 03 08 00 00 00 00 00 c5 03 08 00     ................
   8003c:	c5 03 08 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
   8004c:	c5 03 08 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
   8005c:	c5 03 08 00 e5 09 08 00 c5 03 08 00 00 00 00 00     ................
   8006c:	c5 03 08 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
	...
   80084:	c5 03 08 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
   80094:	c5 03 08 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
   800a4:	00 00 00 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
   800b4:	c5 03 08 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
   800c4:	c5 03 08 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
   800d4:	c5 03 08 00 c5 03 08 00 c5 03 08 00 c5 03 08 00     ................
   800e4:	c5 03 08 00 c5 03 08 00 55 03 08 00 c5 03 08 00     ........U.......

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00081768 	.word	0x00081768

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00081768 	.word	0x00081768
   80154:	20000438 	.word	0x20000438
   80158:	00081768 	.word	0x00081768
   8015c:	00000000 	.word	0x00000000

00080160 <adc_init>:
void adc_init(void){
	
	//PIOA->PIO_PER |= PIO_PA24;
	//PIOA->PIO_ODR |= PIO_PA24;
	
	PMC->PMC_PCER1 |= PMC_PCER1_PID37;
   80160:	4a0d      	ldr	r2, [pc, #52]	; (80198 <adc_init+0x38>)
   80162:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80166:	f043 0320 	orr.w	r3, r3, #32
   8016a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	
	ADC->ADC_CR |= ADC_CR_SWRST;
   8016e:	4b0b      	ldr	r3, [pc, #44]	; (8019c <adc_init+0x3c>)
   80170:	681a      	ldr	r2, [r3, #0]
   80172:	f042 0201 	orr.w	r2, r2, #1
   80176:	601a      	str	r2, [r3, #0]
	
	
	 
	
	ADC->ADC_MR |= (1 << 4);
   80178:	685a      	ldr	r2, [r3, #4]
   8017a:	f042 0210 	orr.w	r2, r2, #16
   8017e:	605a      	str	r2, [r3, #4]
	ADC->ADC_MR |= ADC_MR_FREERUN_ON;
   80180:	685a      	ldr	r2, [r3, #4]
   80182:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   80186:	605a      	str	r2, [r3, #4]
	
	ADC->ADC_CHER |= ADC_CHER_CH6;
   80188:	691a      	ldr	r2, [r3, #16]
   8018a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8018e:	611a      	str	r2, [r3, #16]
	ADC->ADC_CR = ADC_CR_START;
   80190:	2202      	movs	r2, #2
   80192:	601a      	str	r2, [r3, #0]
   80194:	4770      	bx	lr
   80196:	bf00      	nop
   80198:	400e0600 	.word	0x400e0600
   8019c:	400c0000 	.word	0x400c0000

000801a0 <adc_read>:
}


uint32_t adc_read(){
	//return (int)(ADC->ADC_LCDR & ADC_LCDR_LDATA_Msk);
	uint32_t data =  ADC->ADC_CDR[6];
   801a0:	4b01      	ldr	r3, [pc, #4]	; (801a8 <adc_read+0x8>)
   801a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
	return data;
}
   801a4:	4770      	bx	lr
   801a6:	bf00      	nop
   801a8:	400c0000 	.word	0x400c0000

000801ac <score>:


int score(){
   801ac:	b508      	push	{r3, lr}
	
	
	//uint32_t reader = adc_read();
	if (adc_read() < 200) {
   801ae:	4b09      	ldr	r3, [pc, #36]	; (801d4 <score+0x28>)
   801b0:	4798      	blx	r3
   801b2:	28c7      	cmp	r0, #199	; 0xc7
   801b4:	d80b      	bhi.n	801ce <score+0x22>
		//printf("BALL IN GOAL !!!! \r\n");
		while (adc_read() < 200) {};
   801b6:	4b07      	ldr	r3, [pc, #28]	; (801d4 <score+0x28>)
   801b8:	4798      	blx	r3
   801ba:	28c7      	cmp	r0, #199	; 0xc7
   801bc:	d9fb      	bls.n	801b6 <score+0xa>
   801be:	2300      	movs	r3, #0
   801c0:	e000      	b.n	801c4 <score+0x18>
		for (int i = 0; i < 10000000; i++){
   801c2:	3301      	adds	r3, #1
   801c4:	4a04      	ldr	r2, [pc, #16]	; (801d8 <score+0x2c>)
   801c6:	4293      	cmp	r3, r2
   801c8:	ddfb      	ble.n	801c2 <score+0x16>
			
		}
		return 1;
   801ca:	2001      	movs	r0, #1
   801cc:	bd08      	pop	{r3, pc}
	}
	
	return 0;
   801ce:	2000      	movs	r0, #0
	
	
	
   801d0:	bd08      	pop	{r3, pc}
   801d2:	bf00      	nop
   801d4:	000801a1 	.word	0x000801a1
   801d8:	0098967f 	.word	0x0098967f

000801dc <can_init>:
   801dc:	b4f0      	push	{r4, r5, r6, r7}
   801de:	1857      	adds	r7, r2, r1
   801e0:	2f08      	cmp	r7, #8
   801e2:	bfd4      	ite	le
   801e4:	2300      	movle	r3, #0
   801e6:	2301      	movgt	r3, #1
   801e8:	2908      	cmp	r1, #8
   801ea:	bf98      	it	ls
   801ec:	2a08      	cmpls	r2, #8
   801ee:	d85c      	bhi.n	802aa <can_init+0xce>
   801f0:	460d      	mov	r5, r1
   801f2:	2b00      	cmp	r3, #0
   801f4:	d159      	bne.n	802aa <can_init+0xce>
   801f6:	4a2e      	ldr	r2, [pc, #184]	; (802b0 <can_init+0xd4>)
   801f8:	6813      	ldr	r3, [r2, #0]
   801fa:	f023 0301 	bic.w	r3, r3, #1
   801fe:	6013      	str	r3, [r2, #0]
   80200:	6913      	ldr	r3, [r2, #16]
   80202:	4b2c      	ldr	r3, [pc, #176]	; (802b4 <can_init+0xd8>)
   80204:	f44f 7440 	mov.w	r4, #768	; 0x300
   80208:	645c      	str	r4, [r3, #68]	; 0x44
   8020a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8020c:	f024 0403 	bic.w	r4, r4, #3
   80210:	671c      	str	r4, [r3, #112]	; 0x70
   80212:	2403      	movs	r4, #3
   80214:	605c      	str	r4, [r3, #4]
   80216:	665c      	str	r4, [r3, #100]	; 0x64
   80218:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   8021c:	4c26      	ldr	r4, [pc, #152]	; (802b8 <can_init+0xdc>)
   8021e:	f8c3 410c 	str.w	r4, [r3, #268]	; 0x10c
   80222:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
   80226:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
   8022a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   8022e:	6150      	str	r0, [r2, #20]
   80230:	2400      	movs	r4, #0
   80232:	e019      	b.n	80268 <can_init+0x8c>
   80234:	481e      	ldr	r0, [pc, #120]	; (802b0 <can_init+0xd4>)
   80236:	f101 0310 	add.w	r3, r1, #16
   8023a:	015b      	lsls	r3, r3, #5
   8023c:	18c2      	adds	r2, r0, r3
   8023e:	2600      	movs	r6, #0
   80240:	6056      	str	r6, [r2, #4]
   80242:	eb00 1241 	add.w	r2, r0, r1, lsl #5
   80246:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   8024a:	f8c2 6208 	str.w	r6, [r2, #520]	; 0x208
   8024e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
   80252:	50c6      	str	r6, [r0, r3]
   80254:	f8d2 321c 	ldr.w	r3, [r2, #540]	; 0x21c
   80258:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   8025c:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
   80260:	2301      	movs	r3, #1
   80262:	408b      	lsls	r3, r1
   80264:	431c      	orrs	r4, r3
   80266:	3101      	adds	r1, #1
   80268:	42b9      	cmp	r1, r7
   8026a:	dde3      	ble.n	80234 <can_init+0x58>
   8026c:	2300      	movs	r3, #0
   8026e:	e00d      	b.n	8028c <can_init+0xb0>
   80270:	490f      	ldr	r1, [pc, #60]	; (802b0 <can_init+0xd4>)
   80272:	eb01 1243 	add.w	r2, r1, r3, lsl #5
   80276:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   8027a:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
   8027e:	f103 0210 	add.w	r2, r3, #16
   80282:	0152      	lsls	r2, r2, #5
   80284:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
   80288:	5088      	str	r0, [r1, r2]
   8028a:	3301      	adds	r3, #1
   8028c:	42ab      	cmp	r3, r5
   8028e:	dbef      	blt.n	80270 <can_init+0x94>
   80290:	4b07      	ldr	r3, [pc, #28]	; (802b0 <can_init+0xd4>)
   80292:	605c      	str	r4, [r3, #4]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80294:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80298:	4a08      	ldr	r2, [pc, #32]	; (802bc <can_init+0xe0>)
   8029a:	6051      	str	r1, [r2, #4]
   8029c:	681a      	ldr	r2, [r3, #0]
   8029e:	f042 0201 	orr.w	r2, r2, #1
   802a2:	601a      	str	r2, [r3, #0]
   802a4:	2000      	movs	r0, #0
   802a6:	bcf0      	pop	{r4, r5, r6, r7}
   802a8:	4770      	bx	lr
   802aa:	2001      	movs	r0, #1
   802ac:	e7fb      	b.n	802a6 <can_init+0xca>
   802ae:	bf00      	nop
   802b0:	400b4000 	.word	0x400b4000
   802b4:	400e0e00 	.word	0x400e0e00
   802b8:	1000102b 	.word	0x1000102b
   802bc:	e000e100 	.word	0xe000e100

000802c0 <can_init_def_tx_rx_mb>:
   802c0:	b508      	push	{r3, lr}
   802c2:	2202      	movs	r2, #2
   802c4:	2101      	movs	r1, #1
   802c6:	4b01      	ldr	r3, [pc, #4]	; (802cc <can_init_def_tx_rx_mb+0xc>)
   802c8:	4798      	blx	r3
   802ca:	bd08      	pop	{r3, pc}
   802cc:	000801dd 	.word	0x000801dd

000802d0 <can_receive>:
   802d0:	014b      	lsls	r3, r1, #5
   802d2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802d6:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
   802de:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   802e2:	d033      	beq.n	8034c <can_receive+0x7c>
   802e4:	b470      	push	{r4, r5, r6}
   802e6:	014b      	lsls	r3, r1, #5
   802e8:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
   802ec:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   802f0:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
   802f4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
   802f8:	f8d3 5208 	ldr.w	r5, [r3, #520]	; 0x208
   802fc:	f3c5 458a 	ubfx	r5, r5, #18, #11
   80300:	8005      	strh	r5, [r0, #0]
   80302:	f8d3 5210 	ldr.w	r5, [r3, #528]	; 0x210
   80306:	f3c5 4503 	ubfx	r5, r5, #16, #4
   8030a:	7085      	strb	r5, [r0, #2]
   8030c:	2300      	movs	r3, #0
   8030e:	e003      	b.n	80318 <can_receive+0x48>
   80310:	18c6      	adds	r6, r0, r3
   80312:	70f2      	strb	r2, [r6, #3]
   80314:	0a12      	lsrs	r2, r2, #8
   80316:	3301      	adds	r3, #1
   80318:	42ab      	cmp	r3, r5
   8031a:	da05      	bge.n	80328 <can_receive+0x58>
   8031c:	2b03      	cmp	r3, #3
   8031e:	dcf7      	bgt.n	80310 <can_receive+0x40>
   80320:	18c6      	adds	r6, r0, r3
   80322:	70f4      	strb	r4, [r6, #3]
   80324:	0a24      	lsrs	r4, r4, #8
   80326:	e7f6      	b.n	80316 <can_receive+0x46>
   80328:	4b09      	ldr	r3, [pc, #36]	; (80350 <can_receive+0x80>)
   8032a:	f101 0210 	add.w	r2, r1, #16
   8032e:	0152      	lsls	r2, r2, #5
   80330:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   80334:	5098      	str	r0, [r3, r2]
   80336:	eb03 1141 	add.w	r1, r3, r1, lsl #5
   8033a:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
   8033e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   80342:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
   80346:	2000      	movs	r0, #0
   80348:	bc70      	pop	{r4, r5, r6}
   8034a:	4770      	bx	lr
   8034c:	2001      	movs	r0, #1
   8034e:	4770      	bx	lr
   80350:	400b4000 	.word	0x400b4000

00080354 <CAN0_Handler>:
 * \param void
 *
 * \retval 
 */
void CAN0_Handler( void )
{
   80354:	b510      	push	{r4, lr}
   80356:	b084      	sub	sp, #16
	
	if(DEBUG_INTERRUPT)printf("CAN0 interrupt\n\r");
	char can_sr = CAN0->CAN_SR; 
   80358:	4b15      	ldr	r3, [pc, #84]	; (803b0 <CAN0_Handler+0x5c>)
   8035a:	691c      	ldr	r4, [r3, #16]
	
	//RX interrupt
	if(can_sr & (CAN_SR_MB1 | CAN_SR_MB2) )//Only mailbox 1 and 2 specified for receiving
   8035c:	f014 0f06 	tst.w	r4, #6
   80360:	d019      	beq.n	80396 <CAN0_Handler+0x42>
	{
		CAN_MESSAGE message;
		if(can_sr & CAN_SR_MB1)  //Mailbox 1 event
   80362:	f014 0f02 	tst.w	r4, #2
   80366:	d108      	bne.n	8037a <CAN0_Handler+0x26>
		{
			can_receive(&message, 1);
			
		}
		else if(can_sr & CAN_SR_MB2) //Mailbox 2 event
   80368:	f014 0f04 	tst.w	r4, #4
   8036c:	d00a      	beq.n	80384 <CAN0_Handler+0x30>
		
		{
			can_receive(&message, 2);
   8036e:	2102      	movs	r1, #2
   80370:	a801      	add	r0, sp, #4
   80372:	4b10      	ldr	r3, [pc, #64]	; (803b4 <CAN0_Handler+0x60>)
   80374:	4798      	blx	r3
			printf("CAN0 message arrived in non-used mailbox\n\r");
		}

		if(DEBUG_INTERRUPT)printf("message id: %d\n\r", message.id);
		if(DEBUG_INTERRUPT)printf("message data length: %d\n\r", message.data_length);
		for (int i = 0; i < message.data_length; i++)
   80376:	2300      	movs	r3, #0
   80378:	e009      	b.n	8038e <CAN0_Handler+0x3a>
			can_receive(&message, 1);
   8037a:	2101      	movs	r1, #1
   8037c:	a801      	add	r0, sp, #4
   8037e:	4b0d      	ldr	r3, [pc, #52]	; (803b4 <CAN0_Handler+0x60>)
   80380:	4798      	blx	r3
   80382:	e7f8      	b.n	80376 <CAN0_Handler+0x22>
			printf("CAN0 message arrived in non-used mailbox\n\r");
   80384:	480c      	ldr	r0, [pc, #48]	; (803b8 <CAN0_Handler+0x64>)
   80386:	4b0d      	ldr	r3, [pc, #52]	; (803bc <CAN0_Handler+0x68>)
   80388:	4798      	blx	r3
   8038a:	e7f4      	b.n	80376 <CAN0_Handler+0x22>
		for (int i = 0; i < message.data_length; i++)
   8038c:	3301      	adds	r3, #1
   8038e:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80392:	4293      	cmp	r3, r2
   80394:	dbfa      	blt.n	8038c <CAN0_Handler+0x38>
			if(DEBUG_INTERRUPT)printf("DATA : %d ", message.data[i]);
		}
		if(DEBUG_INTERRUPT)printf("\n\r");
	}
	
	if(can_sr & CAN_SR_MB0)
   80396:	f014 0f01 	tst.w	r4, #1
   8039a:	d002      	beq.n	803a2 <CAN0_Handler+0x4e>
	{
		if(DEBUG_INTERRUPT) printf("CAN0 MB0 ready to send \n\r");
		
	//Disable interrupt
		CAN0->CAN_IDR = CAN_IER_MB0;
   8039c:	2201      	movs	r2, #1
   8039e:	4b04      	ldr	r3, [pc, #16]	; (803b0 <CAN0_Handler+0x5c>)
   803a0:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   803a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803a6:	4b06      	ldr	r3, [pc, #24]	; (803c0 <CAN0_Handler+0x6c>)
   803a8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	}
	
	NVIC_ClearPendingIRQ(ID_CAN0);
	//sei();*/
   803ac:	b004      	add	sp, #16
   803ae:	bd10      	pop	{r4, pc}
   803b0:	400b4000 	.word	0x400b4000
   803b4:	000802d1 	.word	0x000802d1
   803b8:	000816dc 	.word	0x000816dc
   803bc:	000807f9 	.word	0x000807f9
   803c0:	e000e100 	.word	0xe000e100

000803c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   803c4:	e7fe      	b.n	803c4 <Dummy_Handler>
	...

000803c8 <Reset_Handler>:
{
   803c8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   803ca:	4b11      	ldr	r3, [pc, #68]	; (80410 <Reset_Handler+0x48>)
   803cc:	4a11      	ldr	r2, [pc, #68]	; (80414 <Reset_Handler+0x4c>)
   803ce:	429a      	cmp	r2, r3
   803d0:	d009      	beq.n	803e6 <Reset_Handler+0x1e>
   803d2:	4b0f      	ldr	r3, [pc, #60]	; (80410 <Reset_Handler+0x48>)
   803d4:	4a0f      	ldr	r2, [pc, #60]	; (80414 <Reset_Handler+0x4c>)
   803d6:	e003      	b.n	803e0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   803d8:	6811      	ldr	r1, [r2, #0]
   803da:	6019      	str	r1, [r3, #0]
   803dc:	3304      	adds	r3, #4
   803de:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   803e0:	490d      	ldr	r1, [pc, #52]	; (80418 <Reset_Handler+0x50>)
   803e2:	428b      	cmp	r3, r1
   803e4:	d3f8      	bcc.n	803d8 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   803e6:	4b0d      	ldr	r3, [pc, #52]	; (8041c <Reset_Handler+0x54>)
   803e8:	e002      	b.n	803f0 <Reset_Handler+0x28>
                *pDest++ = 0;
   803ea:	2200      	movs	r2, #0
   803ec:	601a      	str	r2, [r3, #0]
   803ee:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   803f0:	4a0b      	ldr	r2, [pc, #44]	; (80420 <Reset_Handler+0x58>)
   803f2:	4293      	cmp	r3, r2
   803f4:	d3f9      	bcc.n	803ea <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   803f6:	4b0b      	ldr	r3, [pc, #44]	; (80424 <Reset_Handler+0x5c>)
   803f8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   803fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80400:	4a09      	ldr	r2, [pc, #36]	; (80428 <Reset_Handler+0x60>)
   80402:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   80404:	4b09      	ldr	r3, [pc, #36]	; (8042c <Reset_Handler+0x64>)
   80406:	4798      	blx	r3
        main();
   80408:	4b09      	ldr	r3, [pc, #36]	; (80430 <Reset_Handler+0x68>)
   8040a:	4798      	blx	r3
   8040c:	e7fe      	b.n	8040c <Reset_Handler+0x44>
   8040e:	bf00      	nop
   80410:	20000000 	.word	0x20000000
   80414:	00081768 	.word	0x00081768
   80418:	20000434 	.word	0x20000434
   8041c:	20000434 	.word	0x20000434
   80420:	200004b8 	.word	0x200004b8
   80424:	00080000 	.word	0x00080000
   80428:	e000ed00 	.word	0xe000ed00
   8042c:	0008156d 	.word	0x0008156d
   80430:	000804d9 	.word	0x000804d9

00080434 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   80434:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80438:	4a20      	ldr	r2, [pc, #128]	; (804bc <SystemInit+0x88>)
   8043a:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8043c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80440:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80442:	4b1f      	ldr	r3, [pc, #124]	; (804c0 <SystemInit+0x8c>)
   80444:	6a1b      	ldr	r3, [r3, #32]
   80446:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8044a:	d107      	bne.n	8045c <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   8044c:	4a1d      	ldr	r2, [pc, #116]	; (804c4 <SystemInit+0x90>)
   8044e:	4b1c      	ldr	r3, [pc, #112]	; (804c0 <SystemInit+0x8c>)
   80450:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <SystemInit+0x8c>)
   80454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80456:	f013 0f01 	tst.w	r3, #1
   8045a:	d0fa      	beq.n	80452 <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   8045c:	4a1a      	ldr	r2, [pc, #104]	; (804c8 <SystemInit+0x94>)
   8045e:	4b18      	ldr	r3, [pc, #96]	; (804c0 <SystemInit+0x8c>)
   80460:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80462:	4b17      	ldr	r3, [pc, #92]	; (804c0 <SystemInit+0x8c>)
   80464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80466:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8046a:	d0fa      	beq.n	80462 <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8046c:	4a14      	ldr	r2, [pc, #80]	; (804c0 <SystemInit+0x8c>)
   8046e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80470:	f023 0303 	bic.w	r3, r3, #3
   80474:	f043 0301 	orr.w	r3, r3, #1
   80478:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8047a:	4b11      	ldr	r3, [pc, #68]	; (804c0 <SystemInit+0x8c>)
   8047c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8047e:	f013 0f08 	tst.w	r3, #8
   80482:	d0fa      	beq.n	8047a <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80484:	4a11      	ldr	r2, [pc, #68]	; (804cc <SystemInit+0x98>)
   80486:	4b0e      	ldr	r3, [pc, #56]	; (804c0 <SystemInit+0x8c>)
   80488:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8048a:	4b0d      	ldr	r3, [pc, #52]	; (804c0 <SystemInit+0x8c>)
   8048c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8048e:	f013 0f02 	tst.w	r3, #2
   80492:	d0fa      	beq.n	8048a <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80494:	2211      	movs	r2, #17
   80496:	4b0a      	ldr	r3, [pc, #40]	; (804c0 <SystemInit+0x8c>)
   80498:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8049a:	4b09      	ldr	r3, [pc, #36]	; (804c0 <SystemInit+0x8c>)
   8049c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8049e:	f013 0f08 	tst.w	r3, #8
   804a2:	d0fa      	beq.n	8049a <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   804a4:	2212      	movs	r2, #18
   804a6:	4b06      	ldr	r3, [pc, #24]	; (804c0 <SystemInit+0x8c>)
   804a8:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   804aa:	4b05      	ldr	r3, [pc, #20]	; (804c0 <SystemInit+0x8c>)
   804ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804ae:	f013 0f08 	tst.w	r3, #8
   804b2:	d0fa      	beq.n	804aa <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   804b4:	4a06      	ldr	r2, [pc, #24]	; (804d0 <SystemInit+0x9c>)
   804b6:	4b07      	ldr	r3, [pc, #28]	; (804d4 <SystemInit+0xa0>)
   804b8:	601a      	str	r2, [r3, #0]
   804ba:	4770      	bx	lr
   804bc:	400e0a00 	.word	0x400e0a00
   804c0:	400e0600 	.word	0x400e0600
   804c4:	00370809 	.word	0x00370809
   804c8:	01370809 	.word	0x01370809
   804cc:	200d3f01 	.word	0x200d3f01
   804d0:	0501bd00 	.word	0x0501bd00
   804d4:	20000000 	.word	0x20000000

000804d8 <main>:
#include "ir.h"
#include <stdio.h>


int main(void)
{
   804d8:	b510      	push	{r4, lr}
   804da:	b084      	sub	sp, #16
	WDT->WDT_MR = WDT_MR_WDDIS;
   804dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804e0:	4b14      	ldr	r3, [pc, #80]	; (80534 <main+0x5c>)
   804e2:	605a      	str	r2, [r3, #4]
    /* Initialize the SAM system */
    SystemInit();
   804e4:	4b14      	ldr	r3, [pc, #80]	; (80538 <main+0x60>)
   804e6:	4798      	blx	r3
	configure_uart();
   804e8:	4b14      	ldr	r3, [pc, #80]	; (8053c <main+0x64>)
   804ea:	4798      	blx	r3
	pwm_init();
   804ec:	4b14      	ldr	r3, [pc, #80]	; (80540 <main+0x68>)
   804ee:	4798      	blx	r3
	adc_init();
   804f0:	4b14      	ldr	r3, [pc, #80]	; (80544 <main+0x6c>)
   804f2:	4798      	blx	r3
	
	
	int points = 0;
	/* PIOA->PIO_PUDR |= PIO_PA19;
	 /* Enable PIO controller on bit PC2(D0) */
	 PIOA->PIO_PER |= PIO_PA19;
   804f4:	4b14      	ldr	r3, [pc, #80]	; (80548 <main+0x70>)
   804f6:	681a      	ldr	r2, [r3, #0]
   804f8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   804fc:	601a      	str	r2, [r3, #0]
	 /* Set output enable on PC2(D0) */
	 PIOA->PIO_OER |= PIO_PA19;
   804fe:	691a      	ldr	r2, [r3, #16]
   80500:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80504:	611a      	str	r2, [r3, #16]

	
	uint32_t baud_rate = 0x00290165;
	can_init_def_tx_rx_mb(baud_rate);
   80506:	4811      	ldr	r0, [pc, #68]	; (8054c <main+0x74>)
   80508:	4b11      	ldr	r3, [pc, #68]	; (80550 <main+0x78>)
   8050a:	4798      	blx	r3
	int points = 0;
   8050c:	2400      	movs	r4, #0
	
    /* Replace with your application code */
    while (1) 
    {	
		
		points += score();
   8050e:	4b11      	ldr	r3, [pc, #68]	; (80554 <main+0x7c>)
   80510:	4798      	blx	r3
   80512:	4404      	add	r4, r0
		

		printf("SCOORE : %d \r\n", points);
   80514:	4621      	mov	r1, r4
   80516:	4810      	ldr	r0, [pc, #64]	; (80558 <main+0x80>)
   80518:	4b10      	ldr	r3, [pc, #64]	; (8055c <main+0x84>)
   8051a:	4798      	blx	r3
		
		can_receive(&receive, 0);
   8051c:	2100      	movs	r1, #0
   8051e:	a801      	add	r0, sp, #4
   80520:	4b0f      	ldr	r3, [pc, #60]	; (80560 <main+0x88>)
   80522:	4798      	blx	r3
		pwm_set_duty(receive.data[1], receive.data[2]);
   80524:	f89d 1009 	ldrb.w	r1, [sp, #9]
   80528:	f89d 0008 	ldrb.w	r0, [sp, #8]
   8052c:	4b0d      	ldr	r3, [pc, #52]	; (80564 <main+0x8c>)
   8052e:	4798      	blx	r3
   80530:	e7ed      	b.n	8050e <main+0x36>
   80532:	bf00      	nop
   80534:	400e1a50 	.word	0x400e1a50
   80538:	00080435 	.word	0x00080435
   8053c:	00080959 	.word	0x00080959
   80540:	0008081d 	.word	0x0008081d
   80544:	00080161 	.word	0x00080161
   80548:	400e0e00 	.word	0x400e0e00
   8054c:	00290165 	.word	0x00290165
   80550:	000802c1 	.word	0x000802c1
   80554:	000801ad 	.word	0x000801ad
   80558:	00081708 	.word	0x00081708
   8055c:	000807f9 	.word	0x000807f9
   80560:	000802d1 	.word	0x000802d1
   80564:	00080889 	.word	0x00080889

00080568 <printchar>:
#include "uart.h"


//insert function to print to here
static void printchar(char **str, int c)
{
   80568:	b508      	push	{r3, lr}
	(void) uart_putchar(c);  //Send characters to uart
   8056a:	b2c8      	uxtb	r0, r1
   8056c:	4b01      	ldr	r3, [pc, #4]	; (80574 <printchar+0xc>)
   8056e:	4798      	blx	r3
   80570:	bd08      	pop	{r3, pc}
   80572:	bf00      	nop
   80574:	000809c1 	.word	0x000809c1

00080578 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   80578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8057c:	4607      	mov	r7, r0
   8057e:	460e      	mov	r6, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
   80580:	1e15      	subs	r5, r2, #0
   80582:	dd02      	ble.n	8058a <prints+0x12>
   80584:	460a      	mov	r2, r1
   80586:	2100      	movs	r1, #0
   80588:	e004      	b.n	80594 <prints+0x1c>
	register int pc = 0, padchar = ' ';
   8058a:	f04f 0820 	mov.w	r8, #32
   8058e:	e00e      	b.n	805ae <prints+0x36>
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   80590:	3101      	adds	r1, #1
   80592:	3201      	adds	r2, #1
   80594:	7810      	ldrb	r0, [r2, #0]
   80596:	2800      	cmp	r0, #0
   80598:	d1fa      	bne.n	80590 <prints+0x18>
		if (len >= width) width = 0;
   8059a:	42a9      	cmp	r1, r5
   8059c:	da01      	bge.n	805a2 <prints+0x2a>
		else width -= len;
   8059e:	1a6d      	subs	r5, r5, r1
   805a0:	e000      	b.n	805a4 <prints+0x2c>
		if (len >= width) width = 0;
   805a2:	2500      	movs	r5, #0
		if (pad & PAD_ZERO) padchar = '0';
   805a4:	f013 0f02 	tst.w	r3, #2
   805a8:	d106      	bne.n	805b8 <prints+0x40>
	register int pc = 0, padchar = ' ';
   805aa:	f04f 0820 	mov.w	r8, #32
	}
	if (!(pad & PAD_RIGHT)) {
   805ae:	f013 0401 	ands.w	r4, r3, #1
   805b2:	d00a      	beq.n	805ca <prints+0x52>
	register int pc = 0, padchar = ' ';
   805b4:	2400      	movs	r4, #0
   805b6:	e010      	b.n	805da <prints+0x62>
		if (pad & PAD_ZERO) padchar = '0';
   805b8:	f04f 0830 	mov.w	r8, #48	; 0x30
   805bc:	e7f7      	b.n	805ae <prints+0x36>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
   805be:	4641      	mov	r1, r8
   805c0:	4638      	mov	r0, r7
   805c2:	4b0d      	ldr	r3, [pc, #52]	; (805f8 <prints+0x80>)
   805c4:	4798      	blx	r3
			++pc;
   805c6:	3401      	adds	r4, #1
		for ( ; width > 0; --width) {
   805c8:	3d01      	subs	r5, #1
   805ca:	2d00      	cmp	r5, #0
   805cc:	dcf7      	bgt.n	805be <prints+0x46>
   805ce:	e004      	b.n	805da <prints+0x62>
		}
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
   805d0:	4638      	mov	r0, r7
   805d2:	4b09      	ldr	r3, [pc, #36]	; (805f8 <prints+0x80>)
   805d4:	4798      	blx	r3
		++pc;
   805d6:	3401      	adds	r4, #1
	for ( ; *string ; ++string) {
   805d8:	3601      	adds	r6, #1
   805da:	7831      	ldrb	r1, [r6, #0]
   805dc:	2900      	cmp	r1, #0
   805de:	d1f7      	bne.n	805d0 <prints+0x58>
   805e0:	e005      	b.n	805ee <prints+0x76>
	}
	for ( ; width > 0; --width) {
		printchar (out, padchar);
   805e2:	4641      	mov	r1, r8
   805e4:	4638      	mov	r0, r7
   805e6:	4b04      	ldr	r3, [pc, #16]	; (805f8 <prints+0x80>)
   805e8:	4798      	blx	r3
		++pc;
   805ea:	3401      	adds	r4, #1
	for ( ; width > 0; --width) {
   805ec:	3d01      	subs	r5, #1
   805ee:	2d00      	cmp	r5, #0
   805f0:	dcf7      	bgt.n	805e2 <prints+0x6a>
	}

	return pc;
}
   805f2:	4620      	mov	r0, r4
   805f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805f8:	00080569 	.word	0x00080569

000805fc <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   805fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   805fe:	b085      	sub	sp, #20
   80600:	4607      	mov	r7, r0
   80602:	980c      	ldr	r0, [sp, #48]	; 0x30
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;

	if (i == 0) {
   80604:	b151      	cbz	r1, 8061c <printi+0x20>
   80606:	461e      	mov	r6, r3
   80608:	460c      	mov	r4, r1
		print_buf[0] = '0';
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
   8060a:	b113      	cbz	r3, 80612 <printi+0x16>
   8060c:	2a0a      	cmp	r2, #10
   8060e:	d012      	beq.n	80636 <printi+0x3a>
	register int t, neg = 0, pc = 0;
   80610:	2600      	movs	r6, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
   80612:	ad04      	add	r5, sp, #16
   80614:	2300      	movs	r3, #0
   80616:	f805 3d01 	strb.w	r3, [r5, #-1]!

	while (u) {
   8061a:	e018      	b.n	8064e <printi+0x52>
		print_buf[0] = '0';
   8061c:	2330      	movs	r3, #48	; 0x30
   8061e:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
   80622:	2300      	movs	r3, #0
   80624:	f88d 3005 	strb.w	r3, [sp, #5]
		return prints (out, print_buf, width, pad);
   80628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8062a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8062c:	a901      	add	r1, sp, #4
   8062e:	4638      	mov	r0, r7
   80630:	4c1b      	ldr	r4, [pc, #108]	; (806a0 <printi+0xa4>)
   80632:	47a0      	blx	r4
   80634:	e029      	b.n	8068a <printi+0x8e>
	if (sg && b == 10 && i < 0) {
   80636:	2900      	cmp	r1, #0
   80638:	db01      	blt.n	8063e <printi+0x42>
	register int t, neg = 0, pc = 0;
   8063a:	2600      	movs	r6, #0
   8063c:	e7e9      	b.n	80612 <printi+0x16>
		u = -i;
   8063e:	424c      	negs	r4, r1
		neg = 1;
   80640:	2601      	movs	r6, #1
   80642:	e7e6      	b.n	80612 <printi+0x16>
		t = u % b;
		if( t >= 10 )
			t += letbase - '0' - 10;
		*--s = t + '0';
   80644:	3330      	adds	r3, #48	; 0x30
   80646:	f805 3d01 	strb.w	r3, [r5, #-1]!
		u /= b;
   8064a:	fbb4 f4f2 	udiv	r4, r4, r2
	while (u) {
   8064e:	b14c      	cbz	r4, 80664 <printi+0x68>
		t = u % b;
   80650:	fbb4 f3f2 	udiv	r3, r4, r2
   80654:	fb02 4313 	mls	r3, r2, r3, r4
		if( t >= 10 )
   80658:	2b09      	cmp	r3, #9
   8065a:	ddf3      	ble.n	80644 <printi+0x48>
			t += letbase - '0' - 10;
   8065c:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
   80660:	440b      	add	r3, r1
   80662:	e7ef      	b.n	80644 <printi+0x48>
	}

	if (neg) {
   80664:	b156      	cbz	r6, 8067c <printi+0x80>
		if( width && (pad & PAD_ZERO) ) {
   80666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80668:	b11b      	cbz	r3, 80672 <printi+0x76>
   8066a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8066c:	f013 0f02 	tst.w	r3, #2
   80670:	d10d      	bne.n	8068e <printi+0x92>
			printchar (out, '-');
			++pc;
			--width;
		}
		else {
			*--s = '-';
   80672:	232d      	movs	r3, #45	; 0x2d
   80674:	f805 3c01 	strb.w	r3, [r5, #-1]
   80678:	3d01      	subs	r5, #1
	register int t, neg = 0, pc = 0;
   8067a:	2600      	movs	r6, #0
		}
	}

	return pc + prints (out, s, width, pad);
   8067c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8067e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80680:	4629      	mov	r1, r5
   80682:	4638      	mov	r0, r7
   80684:	4c06      	ldr	r4, [pc, #24]	; (806a0 <printi+0xa4>)
   80686:	47a0      	blx	r4
   80688:	4430      	add	r0, r6
}
   8068a:	b005      	add	sp, #20
   8068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printchar (out, '-');
   8068e:	212d      	movs	r1, #45	; 0x2d
   80690:	4638      	mov	r0, r7
   80692:	4b04      	ldr	r3, [pc, #16]	; (806a4 <printi+0xa8>)
   80694:	4798      	blx	r3
			--width;
   80696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   80698:	3b01      	subs	r3, #1
   8069a:	930a      	str	r3, [sp, #40]	; 0x28
   8069c:	e7ee      	b.n	8067c <printi+0x80>
   8069e:	bf00      	nop
   806a0:	00080579 	.word	0x00080579
   806a4:	00080569 	.word	0x00080569

000806a8 <print>:

static int print( char **out, const char *format, va_list args )
{
   806a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   806aa:	b089      	sub	sp, #36	; 0x24
   806ac:	4606      	mov	r6, r0
   806ae:	460c      	mov	r4, r1
   806b0:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
   806b2:	2500      	movs	r5, #0
	char scr[2];

	for (; *format != 0; ++format) {
   806b4:	e081      	b.n	807ba <print+0x112>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
   806b6:	1ca2      	adds	r2, r4, #2
				pad = PAD_RIGHT;
   806b8:	2301      	movs	r3, #1
   806ba:	e08b      	b.n	807d4 <print+0x12c>
			}
			while (*format == '0') {
				++format;
   806bc:	3401      	adds	r4, #1
				pad |= PAD_ZERO;
   806be:	f043 0302 	orr.w	r3, r3, #2
			while (*format == '0') {
   806c2:	7822      	ldrb	r2, [r4, #0]
   806c4:	2a30      	cmp	r2, #48	; 0x30
   806c6:	d0f9      	beq.n	806bc <print+0x14>
   806c8:	2200      	movs	r2, #0
   806ca:	e006      	b.n	806da <print+0x32>
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
   806cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   806d0:	0050      	lsls	r0, r2, #1
				width += *format - '0';
   806d2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   806d6:	4402      	add	r2, r0
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   806d8:	3401      	adds	r4, #1
   806da:	7821      	ldrb	r1, [r4, #0]
   806dc:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   806e0:	b2c0      	uxtb	r0, r0
   806e2:	2809      	cmp	r0, #9
   806e4:	d9f2      	bls.n	806cc <print+0x24>
			}
			if( *format == 's' ) {
   806e6:	2973      	cmp	r1, #115	; 0x73
   806e8:	d018      	beq.n	8071c <print+0x74>
				register char *s = (char *)va_arg( args, int );
				pc += prints (out, s?s:"(null)", width, pad);
				continue;
			}
			if( *format == 'd' ) {
   806ea:	2964      	cmp	r1, #100	; 0x64
   806ec:	d022      	beq.n	80734 <print+0x8c>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
				continue;
			}
			if( *format == 'x' ) {
   806ee:	2978      	cmp	r1, #120	; 0x78
   806f0:	d02f      	beq.n	80752 <print+0xaa>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'X' ) {
   806f2:	2958      	cmp	r1, #88	; 0x58
   806f4:	d03c      	beq.n	80770 <print+0xc8>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
				continue;
			}
			if( *format == 'u' ) {
   806f6:	2975      	cmp	r1, #117	; 0x75
   806f8:	d049      	beq.n	8078e <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
				continue;
			}
			if( *format == 'c' ) {
   806fa:	2963      	cmp	r1, #99	; 0x63
   806fc:	d15c      	bne.n	807b8 <print+0x110>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   806fe:	9905      	ldr	r1, [sp, #20]
   80700:	1d08      	adds	r0, r1, #4
   80702:	9005      	str	r0, [sp, #20]
   80704:	7809      	ldrb	r1, [r1, #0]
   80706:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
   8070a:	2100      	movs	r1, #0
   8070c:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
   80710:	a907      	add	r1, sp, #28
   80712:	4630      	mov	r0, r6
   80714:	4f34      	ldr	r7, [pc, #208]	; (807e8 <print+0x140>)
   80716:	47b8      	blx	r7
   80718:	4405      	add	r5, r0
				continue;
   8071a:	e04d      	b.n	807b8 <print+0x110>
				register char *s = (char *)va_arg( args, int );
   8071c:	9905      	ldr	r1, [sp, #20]
   8071e:	1d08      	adds	r0, r1, #4
   80720:	9005      	str	r0, [sp, #20]
   80722:	6809      	ldr	r1, [r1, #0]
				pc += prints (out, s?s:"(null)", width, pad);
   80724:	b121      	cbz	r1, 80730 <print+0x88>
   80726:	4630      	mov	r0, r6
   80728:	4f2f      	ldr	r7, [pc, #188]	; (807e8 <print+0x140>)
   8072a:	47b8      	blx	r7
   8072c:	4405      	add	r5, r0
				continue;
   8072e:	e043      	b.n	807b8 <print+0x110>
				pc += prints (out, s?s:"(null)", width, pad);
   80730:	492e      	ldr	r1, [pc, #184]	; (807ec <print+0x144>)
   80732:	e7f8      	b.n	80726 <print+0x7e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   80734:	9905      	ldr	r1, [sp, #20]
   80736:	1d08      	adds	r0, r1, #4
   80738:	9005      	str	r0, [sp, #20]
   8073a:	6809      	ldr	r1, [r1, #0]
   8073c:	2061      	movs	r0, #97	; 0x61
   8073e:	9002      	str	r0, [sp, #8]
   80740:	9301      	str	r3, [sp, #4]
   80742:	9200      	str	r2, [sp, #0]
   80744:	2301      	movs	r3, #1
   80746:	220a      	movs	r2, #10
   80748:	4630      	mov	r0, r6
   8074a:	4f29      	ldr	r7, [pc, #164]	; (807f0 <print+0x148>)
   8074c:	47b8      	blx	r7
   8074e:	4405      	add	r5, r0
				continue;
   80750:	e032      	b.n	807b8 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   80752:	9905      	ldr	r1, [sp, #20]
   80754:	1d08      	adds	r0, r1, #4
   80756:	9005      	str	r0, [sp, #20]
   80758:	6809      	ldr	r1, [r1, #0]
   8075a:	2061      	movs	r0, #97	; 0x61
   8075c:	9002      	str	r0, [sp, #8]
   8075e:	9301      	str	r3, [sp, #4]
   80760:	9200      	str	r2, [sp, #0]
   80762:	2300      	movs	r3, #0
   80764:	2210      	movs	r2, #16
   80766:	4630      	mov	r0, r6
   80768:	4f21      	ldr	r7, [pc, #132]	; (807f0 <print+0x148>)
   8076a:	47b8      	blx	r7
   8076c:	4405      	add	r5, r0
				continue;
   8076e:	e023      	b.n	807b8 <print+0x110>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   80770:	9905      	ldr	r1, [sp, #20]
   80772:	1d08      	adds	r0, r1, #4
   80774:	9005      	str	r0, [sp, #20]
   80776:	6809      	ldr	r1, [r1, #0]
   80778:	2041      	movs	r0, #65	; 0x41
   8077a:	9002      	str	r0, [sp, #8]
   8077c:	9301      	str	r3, [sp, #4]
   8077e:	9200      	str	r2, [sp, #0]
   80780:	2300      	movs	r3, #0
   80782:	2210      	movs	r2, #16
   80784:	4630      	mov	r0, r6
   80786:	4f1a      	ldr	r7, [pc, #104]	; (807f0 <print+0x148>)
   80788:	47b8      	blx	r7
   8078a:	4405      	add	r5, r0
				continue;
   8078c:	e014      	b.n	807b8 <print+0x110>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   8078e:	9905      	ldr	r1, [sp, #20]
   80790:	1d08      	adds	r0, r1, #4
   80792:	9005      	str	r0, [sp, #20]
   80794:	6809      	ldr	r1, [r1, #0]
   80796:	2061      	movs	r0, #97	; 0x61
   80798:	9002      	str	r0, [sp, #8]
   8079a:	9301      	str	r3, [sp, #4]
   8079c:	9200      	str	r2, [sp, #0]
   8079e:	2300      	movs	r3, #0
   807a0:	220a      	movs	r2, #10
   807a2:	4630      	mov	r0, r6
   807a4:	4f12      	ldr	r7, [pc, #72]	; (807f0 <print+0x148>)
   807a6:	47b8      	blx	r7
   807a8:	4405      	add	r5, r0
				continue;
   807aa:	e005      	b.n	807b8 <print+0x110>
			++format;
   807ac:	4614      	mov	r4, r2
			}
		}
		else {
		out:
			printchar (out, *format);
   807ae:	7821      	ldrb	r1, [r4, #0]
   807b0:	4630      	mov	r0, r6
   807b2:	4b10      	ldr	r3, [pc, #64]	; (807f4 <print+0x14c>)
   807b4:	4798      	blx	r3
			++pc;
   807b6:	3501      	adds	r5, #1
	for (; *format != 0; ++format) {
   807b8:	3401      	adds	r4, #1
   807ba:	7823      	ldrb	r3, [r4, #0]
   807bc:	b163      	cbz	r3, 807d8 <print+0x130>
		if (*format == '%') {
   807be:	2b25      	cmp	r3, #37	; 0x25
   807c0:	d1f5      	bne.n	807ae <print+0x106>
			++format;
   807c2:	1c62      	adds	r2, r4, #1
			if (*format == '\0') break;
   807c4:	7863      	ldrb	r3, [r4, #1]
   807c6:	b13b      	cbz	r3, 807d8 <print+0x130>
			if (*format == '%') goto out;
   807c8:	2b25      	cmp	r3, #37	; 0x25
   807ca:	d0ef      	beq.n	807ac <print+0x104>
			if (*format == '-') {
   807cc:	2b2d      	cmp	r3, #45	; 0x2d
   807ce:	f43f af72 	beq.w	806b6 <print+0xe>
			width = pad = 0;
   807d2:	2300      	movs	r3, #0
   807d4:	4614      	mov	r4, r2
   807d6:	e774      	b.n	806c2 <print+0x1a>
		}
	}
	if (out) **out = '\0';
   807d8:	b116      	cbz	r6, 807e0 <print+0x138>
   807da:	6833      	ldr	r3, [r6, #0]
   807dc:	2200      	movs	r2, #0
   807de:	701a      	strb	r2, [r3, #0]
	va_end( args );
	return pc;
}
   807e0:	4628      	mov	r0, r5
   807e2:	b009      	add	sp, #36	; 0x24
   807e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   807e6:	bf00      	nop
   807e8:	00080579 	.word	0x00080579
   807ec:	00081718 	.word	0x00081718
   807f0:	000805fd 	.word	0x000805fd
   807f4:	00080569 	.word	0x00080569

000807f8 <printf>:

int printf(const char *format, ...)
{
   807f8:	b40f      	push	{r0, r1, r2, r3}
   807fa:	b500      	push	{lr}
   807fc:	b083      	sub	sp, #12
   807fe:	aa04      	add	r2, sp, #16
   80800:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
   80804:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
   80806:	2000      	movs	r0, #0
   80808:	4b03      	ldr	r3, [pc, #12]	; (80818 <printf+0x20>)
   8080a:	4798      	blx	r3
}
   8080c:	b003      	add	sp, #12
   8080e:	f85d eb04 	ldr.w	lr, [sp], #4
   80812:	b004      	add	sp, #16
   80814:	4770      	bx	lr
   80816:	bf00      	nop
   80818:	000806a9 	.word	0x000806a9

0008081c <pwm_init>:

void pwm_init(void) {
	
	//PIO
	
	PIOC->PIO_ABSR |= PIO_PC19;
   8081c:	4b15      	ldr	r3, [pc, #84]	; (80874 <pwm_init+0x58>)
   8081e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80820:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80824:	671a      	str	r2, [r3, #112]	; 0x70
	PIOC->PIO_PDR |= PIO_PC19;
   80826:	685a      	ldr	r2, [r3, #4]
   80828:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   8082c:	605a      	str	r2, [r3, #4]
	
	
	PMC->PMC_PCER1 |= PMC_PCER1_PID36;
   8082e:	4a12      	ldr	r2, [pc, #72]	; (80878 <pwm_init+0x5c>)
   80830:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
   80834:	f043 0310 	orr.w	r3, r3, #16
   80838:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	//PWM_WPCR_WPCMD(0b01);
	PWM->PWM_CLK = PWM_CLK_PREB(0x9) | PWM_CLK_DIVB(0x1);
   8083c:	4b0f      	ldr	r3, [pc, #60]	; (8087c <pwm_init+0x60>)
   8083e:	4a10      	ldr	r2, [pc, #64]	; (80880 <pwm_init+0x64>)
   80840:	601a      	str	r2, [r3, #0]
	
	
	PWM->PWM_CH_NUM[5].PWM_CMR |= PWM_CMR_CPRE_CLKB | PWM_CMR_CPOL;
   80842:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
   80846:	f442 7203 	orr.w	r2, r2, #524	; 0x20c
   8084a:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
	PWM->PWM_CH_NUM[5].PWM_CPRD |= 0xCD1; 
   8084e:	f8d3 22ac 	ldr.w	r2, [r3, #684]	; 0x2ac
   80852:	f442 624d 	orr.w	r2, r2, #3280	; 0xcd0
   80856:	f042 0201 	orr.w	r2, r2, #1
   8085a:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	
	//CHANGE DUTY OTHER REGISTER UPDATE REGISTER CDTYUPD
	PWM->PWM_CH_NUM[5].PWM_CDTY |= 0xF6;
   8085e:	f8d3 22a4 	ldr.w	r2, [r3, #676]	; 0x2a4
   80862:	f042 02f6 	orr.w	r2, r2, #246	; 0xf6
   80866:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA |= PWM_ENA_CHID5;
   8086a:	685a      	ldr	r2, [r3, #4]
   8086c:	f042 0220 	orr.w	r2, r2, #32
   80870:	605a      	str	r2, [r3, #4]
   80872:	4770      	bx	lr
   80874:	400e1200 	.word	0x400e1200
   80878:	400e0600 	.word	0x400e0600
   8087c:	40094000 	.word	0x40094000
   80880:	09010000 	.word	0x09010000
   80884:	00000000 	.word	0x00000000

00080888 <pwm_set_duty>:
}

void pwm_set_duty(int input, int dir) {
   80888:	b538      	push	{r3, r4, r5, lr}
   8088a:	460c      	mov	r4, r1
	
	if(input > 100) {
   8088c:	2864      	cmp	r0, #100	; 0x64
   8088e:	dd00      	ble.n	80892 <pwm_set_duty+0xa>
		input = 100;
   80890:	2064      	movs	r0, #100	; 0x64
	}
	if (input < 0) {
   80892:	2800      	cmp	r0, #0
   80894:	db14      	blt.n	808c0 <pwm_set_duty+0x38>
		input = 0;
	}
	
	
	float pulse = 0.000006 * input;
   80896:	4b26      	ldr	r3, [pc, #152]	; (80930 <pwm_set_duty+0xa8>)
   80898:	4798      	blx	r3
   8089a:	a321      	add	r3, pc, #132	; (adr r3, 80920 <pwm_set_duty+0x98>)
   8089c:	e9d3 2300 	ldrd	r2, r3, [r3]
   808a0:	4d24      	ldr	r5, [pc, #144]	; (80934 <pwm_set_duty+0xac>)
   808a2:	47a8      	blx	r5
   808a4:	4b24      	ldr	r3, [pc, #144]	; (80938 <pwm_set_duty+0xb0>)
   808a6:	4798      	blx	r3
	float percent = 3281 / 0.02;
	float result;
	
	
	//time 
	switch (dir)
   808a8:	2c02      	cmp	r4, #2
   808aa:	d00b      	beq.n	808c4 <pwm_set_duty+0x3c>
   808ac:	2c03      	cmp	r4, #3
   808ae:	d020      	beq.n	808f2 <pwm_set_duty+0x6a>
		pulse = 0.0015 + pulse;
		result = pulse * percent;
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= (int)result;
		break;
	default :
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= 0xF6;
   808b0:	4a22      	ldr	r2, [pc, #136]	; (8093c <pwm_set_duty+0xb4>)
   808b2:	f8d2 32a8 	ldr.w	r3, [r2, #680]	; 0x2a8
   808b6:	f043 03f6 	orr.w	r3, r3, #246	; 0xf6
   808ba:	f8c2 32a8 	str.w	r3, [r2, #680]	; 0x2a8
   808be:	bd38      	pop	{r3, r4, r5, pc}
		input = 0;
   808c0:	2000      	movs	r0, #0
   808c2:	e7e8      	b.n	80896 <pwm_set_duty+0xe>
		pulse = 0.0015 - pulse;
   808c4:	4b1e      	ldr	r3, [pc, #120]	; (80940 <pwm_set_duty+0xb8>)
   808c6:	4798      	blx	r3
   808c8:	4602      	mov	r2, r0
   808ca:	460b      	mov	r3, r1
   808cc:	a116      	add	r1, pc, #88	; (adr r1, 80928 <pwm_set_duty+0xa0>)
   808ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   808d2:	4c1c      	ldr	r4, [pc, #112]	; (80944 <pwm_set_duty+0xbc>)
   808d4:	47a0      	blx	r4
   808d6:	4b18      	ldr	r3, [pc, #96]	; (80938 <pwm_set_duty+0xb0>)
   808d8:	4798      	blx	r3
		result = pulse * percent;
   808da:	491b      	ldr	r1, [pc, #108]	; (80948 <pwm_set_duty+0xc0>)
   808dc:	4b1b      	ldr	r3, [pc, #108]	; (8094c <pwm_set_duty+0xc4>)
   808de:	4798      	blx	r3
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= (int)result;
   808e0:	4d16      	ldr	r5, [pc, #88]	; (8093c <pwm_set_duty+0xb4>)
   808e2:	f8d5 42a8 	ldr.w	r4, [r5, #680]	; 0x2a8
   808e6:	4b1a      	ldr	r3, [pc, #104]	; (80950 <pwm_set_duty+0xc8>)
   808e8:	4798      	blx	r3
   808ea:	4320      	orrs	r0, r4
   808ec:	f8c5 02a8 	str.w	r0, [r5, #680]	; 0x2a8
		break;
   808f0:	bd38      	pop	{r3, r4, r5, pc}
		pulse = 0.0015 + pulse;
   808f2:	4b13      	ldr	r3, [pc, #76]	; (80940 <pwm_set_duty+0xb8>)
   808f4:	4798      	blx	r3
   808f6:	a30c      	add	r3, pc, #48	; (adr r3, 80928 <pwm_set_duty+0xa0>)
   808f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   808fc:	4c15      	ldr	r4, [pc, #84]	; (80954 <pwm_set_duty+0xcc>)
   808fe:	47a0      	blx	r4
   80900:	4b0d      	ldr	r3, [pc, #52]	; (80938 <pwm_set_duty+0xb0>)
   80902:	4798      	blx	r3
		result = pulse * percent;
   80904:	4910      	ldr	r1, [pc, #64]	; (80948 <pwm_set_duty+0xc0>)
   80906:	4b11      	ldr	r3, [pc, #68]	; (8094c <pwm_set_duty+0xc4>)
   80908:	4798      	blx	r3
		PWM->PWM_CH_NUM[5].PWM_CDTYUPD |= (int)result;
   8090a:	4d0c      	ldr	r5, [pc, #48]	; (8093c <pwm_set_duty+0xb4>)
   8090c:	f8d5 42a8 	ldr.w	r4, [r5, #680]	; 0x2a8
   80910:	4b0f      	ldr	r3, [pc, #60]	; (80950 <pwm_set_duty+0xc8>)
   80912:	4798      	blx	r3
   80914:	4320      	orrs	r0, r4
   80916:	f8c5 02a8 	str.w	r0, [r5, #680]	; 0x2a8
		break;
   8091a:	bd38      	pop	{r3, r4, r5, pc}
   8091c:	f3af 8000 	nop.w
   80920:	7110e454 	.word	0x7110e454
   80924:	3ed92a73 	.word	0x3ed92a73
   80928:	bc6a7efa 	.word	0xbc6a7efa
   8092c:	3f589374 	.word	0x3f589374
   80930:	00080cf1 	.word	0x00080cf1
   80934:	00080dbd 	.word	0x00080dbd
   80938:	000811e1 	.word	0x000811e1
   8093c:	40094000 	.word	0x40094000
   80940:	00080d15 	.word	0x00080d15
   80944:	00080a55 	.word	0x00080a55
   80948:	48203480 	.word	0x48203480
   8094c:	00081281 	.word	0x00081281
   80950:	00081521 	.word	0x00081521
   80954:	00080a59 	.word	0x00080a59

00080958 <configure_uart>:
	uint32_t ul_sr;

/*
Initialize UART ring buffer as empty
*/
rx_buffer.head=0;
   80958:	4b16      	ldr	r3, [pc, #88]	; (809b4 <configure_uart+0x5c>)
   8095a:	2200      	movs	r2, #0
   8095c:	701a      	strb	r2, [r3, #0]
rx_buffer.tail=0;
   8095e:	705a      	strb	r2, [r3, #1]
/*
Initialize UART communication
*/
	// Pin configuration
	// Disable interrupts on Uart receive (URXD) and transmit (UTXD) pins
	PIOA->PIO_IDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80960:	4b15      	ldr	r3, [pc, #84]	; (809b8 <configure_uart+0x60>)
   80962:	f44f 7140 	mov.w	r1, #768	; 0x300
   80966:	6459      	str	r1, [r3, #68]	; 0x44

	// Disable the Parallel IO (PIO) of the URXD and UTXD pins so that the peripheral controller can use them
	PIOA->PIO_PDR = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80968:	6059      	str	r1, [r3, #4]

	// Read current peripheral AB select register and set the UTXD and URXD pins to 0 (UART is connected as peripheral A)
	ul_sr = PIOA->PIO_ABSR;
   8096a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	PIOA->PIO_ABSR &= ~(PIO_PA8A_URXD | PIO_PA9A_UTXD) & ul_sr;
   8096c:	6f18      	ldr	r0, [r3, #112]	; 0x70
   8096e:	4002      	ands	r2, r0
   80970:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   80974:	671a      	str	r2, [r3, #112]	; 0x70

	// Enable pull up resistor on URXD and UTXD pin
	PIOA->PIO_PUER = PIO_PA8A_URXD | PIO_PA9A_UTXD;
   80976:	6659      	str	r1, [r3, #100]	; 0x64

	// Uart configuration
	
	// Enable the peripheral UART controller in Power Management Controller (PMC)
	PMC->PMC_PCER0 = 1 << ID_UART;
   80978:	f44f 7280 	mov.w	r2, #256	; 0x100
   8097c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   80980:	611a      	str	r2, [r3, #16]

	// Reset and disable receiver and transmitter
	UART->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS;
   80982:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80986:	21ac      	movs	r1, #172	; 0xac
   80988:	6019      	str	r1, [r3, #0]

	// Set the baudrate
	UART->UART_BRGR = 547; // MCK / 16 * x = BaudRate (write x into UART_BRGR)  
   8098a:	f240 2123 	movw	r1, #547	; 0x223
   8098e:	6219      	str	r1, [r3, #32]

	// No parity bits
	UART->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL;	
   80990:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80994:	6059      	str	r1, [r3, #4]

	// Disable PDC channel
	UART->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80996:	f240 2102 	movw	r1, #514	; 0x202
   8099a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120

	// Configure interrupts on receive ready and errors
	UART->UART_IDR = 0xFFFFFFFF;
   8099e:	f04f 31ff 	mov.w	r1, #4294967295
   809a2:	60d9      	str	r1, [r3, #12]
	UART->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME | UART_IER_PARE;
   809a4:	21e1      	movs	r1, #225	; 0xe1
   809a6:	6099      	str	r1, [r3, #8]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   809a8:	4904      	ldr	r1, [pc, #16]	; (809bc <configure_uart+0x64>)
   809aa:	600a      	str	r2, [r1, #0]

	// Enable UART interrupt in the Nested Vectored Interrupt Controller(NVIC)
	NVIC_EnableIRQ((IRQn_Type) ID_UART);

	// Enable UART receiver and transmitter
	UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   809ac:	2250      	movs	r2, #80	; 0x50
   809ae:	601a      	str	r2, [r3, #0]
   809b0:	4770      	bx	lr
   809b2:	bf00      	nop
   809b4:	20000450 	.word	0x20000450
   809b8:	400e0e00 	.word	0x400e0e00
   809bc:	e000e100 	.word	0xe000e100

000809c0 <uart_putchar>:
 * \retval Success(0) or failure(1).
 */
int uart_putchar(const uint8_t c)
{
	// Check if the transmitter is ready
	if((UART->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   809c0:	4b07      	ldr	r3, [pc, #28]	; (809e0 <uart_putchar+0x20>)
   809c2:	695b      	ldr	r3, [r3, #20]
   809c4:	f013 0f02 	tst.w	r3, #2
   809c8:	d008      	beq.n	809dc <uart_putchar+0x1c>
	return 1;

	// Send the character
	UART->UART_THR = c;
   809ca:	4b05      	ldr	r3, [pc, #20]	; (809e0 <uart_putchar+0x20>)
   809cc:	61d8      	str	r0, [r3, #28]
	while(!((UART->UART_SR) & UART_SR_TXEMPTY)); // Wait for the character to be sent, can implement ring buffer to remove the wait
   809ce:	4b04      	ldr	r3, [pc, #16]	; (809e0 <uart_putchar+0x20>)
   809d0:	695b      	ldr	r3, [r3, #20]
   809d2:	f413 7f00 	tst.w	r3, #512	; 0x200
   809d6:	d0fa      	beq.n	809ce <uart_putchar+0xe>
	return 0;
   809d8:	2000      	movs	r0, #0
   809da:	4770      	bx	lr
	return 1;
   809dc:	2001      	movs	r0, #1
}
   809de:	4770      	bx	lr
   809e0:	400e0800 	.word	0x400e0800

000809e4 <UART_Handler>:

void UART_Handler(void)
{
   809e4:	b508      	push	{r3, lr}
	uint32_t status = UART->UART_SR;
   809e6:	4b15      	ldr	r3, [pc, #84]	; (80a3c <UART_Handler+0x58>)
   809e8:	695b      	ldr	r3, [r3, #20]
	
	//Reset UART at overflow error and frame error
	if(status & (UART_SR_OVRE | UART_SR_FRAME | UART_SR_PARE))
   809ea:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   809ee:	d003      	beq.n	809f8 <UART_Handler+0x14>
	{
		UART->UART_CR = UART_CR_RXEN | UART_CR_TXEN | UART_CR_RSTSTA;
   809f0:	f44f 71a8 	mov.w	r1, #336	; 0x150
   809f4:	4a11      	ldr	r2, [pc, #68]	; (80a3c <UART_Handler+0x58>)
   809f6:	6011      	str	r1, [r2, #0]
	}
	
	//Check if message is ready to be received
	if(status & UART_SR_RXRDY)
   809f8:	f013 0f01 	tst.w	r3, #1
   809fc:	d012      	beq.n	80a24 <UART_Handler+0x40>
	{
		//Check if receive ring buffer is full and 
		if((rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE == rx_buffer.head)
   809fe:	4810      	ldr	r0, [pc, #64]	; (80a40 <UART_Handler+0x5c>)
   80a00:	7842      	ldrb	r2, [r0, #1]
   80a02:	1c53      	adds	r3, r2, #1
   80a04:	4259      	negs	r1, r3
   80a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80a0a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   80a0e:	bf58      	it	pl
   80a10:	424b      	negpl	r3, r1
   80a12:	7801      	ldrb	r1, [r0, #0]
   80a14:	428b      	cmp	r3, r1
   80a16:	d006      	beq.n	80a26 <UART_Handler+0x42>
		{
			printf("ERR: UART RX buffer is full\n\r");
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
			return;
		}
		rx_buffer.data[rx_buffer.tail] = UART->UART_RHR;
   80a18:	4908      	ldr	r1, [pc, #32]	; (80a3c <UART_Handler+0x58>)
   80a1a:	6988      	ldr	r0, [r1, #24]
   80a1c:	4908      	ldr	r1, [pc, #32]	; (80a40 <UART_Handler+0x5c>)
   80a1e:	440a      	add	r2, r1
   80a20:	7090      	strb	r0, [r2, #2]
		rx_buffer.tail = (rx_buffer.tail + 1) % UART_RINGBUFFER_SIZE;
   80a22:	704b      	strb	r3, [r1, #1]
   80a24:	bd08      	pop	{r3, pc}
			printf("ERR: UART RX buffer is full\n\r");
   80a26:	4807      	ldr	r0, [pc, #28]	; (80a44 <UART_Handler+0x60>)
   80a28:	4b07      	ldr	r3, [pc, #28]	; (80a48 <UART_Handler+0x64>)
   80a2a:	4798      	blx	r3
			rx_buffer.data[rx_buffer.tail] = UART->UART_RHR; //Throw away message
   80a2c:	4b04      	ldr	r3, [pc, #16]	; (80a40 <UART_Handler+0x5c>)
   80a2e:	7859      	ldrb	r1, [r3, #1]
   80a30:	4a02      	ldr	r2, [pc, #8]	; (80a3c <UART_Handler+0x58>)
   80a32:	6992      	ldr	r2, [r2, #24]
   80a34:	440b      	add	r3, r1
   80a36:	709a      	strb	r2, [r3, #2]
			return;
   80a38:	bd08      	pop	{r3, pc}
   80a3a:	bf00      	nop
   80a3c:	400e0800 	.word	0x400e0800
   80a40:	20000450 	.word	0x20000450
   80a44:	00081720 	.word	0x00081720
   80a48:	000807f9 	.word	0x000807f9

00080a4c <__aeabi_drsub>:
   80a4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   80a50:	e002      	b.n	80a58 <__adddf3>
   80a52:	bf00      	nop

00080a54 <__aeabi_dsub>:
   80a54:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00080a58 <__adddf3>:
   80a58:	b530      	push	{r4, r5, lr}
   80a5a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   80a5e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   80a62:	ea94 0f05 	teq	r4, r5
   80a66:	bf08      	it	eq
   80a68:	ea90 0f02 	teqeq	r0, r2
   80a6c:	bf1f      	itttt	ne
   80a6e:	ea54 0c00 	orrsne.w	ip, r4, r0
   80a72:	ea55 0c02 	orrsne.w	ip, r5, r2
   80a76:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   80a7a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80a7e:	f000 80e2 	beq.w	80c46 <__adddf3+0x1ee>
   80a82:	ea4f 5454 	mov.w	r4, r4, lsr #21
   80a86:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   80a8a:	bfb8      	it	lt
   80a8c:	426d      	neglt	r5, r5
   80a8e:	dd0c      	ble.n	80aaa <__adddf3+0x52>
   80a90:	442c      	add	r4, r5
   80a92:	ea80 0202 	eor.w	r2, r0, r2
   80a96:	ea81 0303 	eor.w	r3, r1, r3
   80a9a:	ea82 0000 	eor.w	r0, r2, r0
   80a9e:	ea83 0101 	eor.w	r1, r3, r1
   80aa2:	ea80 0202 	eor.w	r2, r0, r2
   80aa6:	ea81 0303 	eor.w	r3, r1, r3
   80aaa:	2d36      	cmp	r5, #54	; 0x36
   80aac:	bf88      	it	hi
   80aae:	bd30      	pophi	{r4, r5, pc}
   80ab0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80ab4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   80ab8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   80abc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   80ac0:	d002      	beq.n	80ac8 <__adddf3+0x70>
   80ac2:	4240      	negs	r0, r0
   80ac4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80ac8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   80acc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   80ad0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   80ad4:	d002      	beq.n	80adc <__adddf3+0x84>
   80ad6:	4252      	negs	r2, r2
   80ad8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   80adc:	ea94 0f05 	teq	r4, r5
   80ae0:	f000 80a7 	beq.w	80c32 <__adddf3+0x1da>
   80ae4:	f1a4 0401 	sub.w	r4, r4, #1
   80ae8:	f1d5 0e20 	rsbs	lr, r5, #32
   80aec:	db0d      	blt.n	80b0a <__adddf3+0xb2>
   80aee:	fa02 fc0e 	lsl.w	ip, r2, lr
   80af2:	fa22 f205 	lsr.w	r2, r2, r5
   80af6:	1880      	adds	r0, r0, r2
   80af8:	f141 0100 	adc.w	r1, r1, #0
   80afc:	fa03 f20e 	lsl.w	r2, r3, lr
   80b00:	1880      	adds	r0, r0, r2
   80b02:	fa43 f305 	asr.w	r3, r3, r5
   80b06:	4159      	adcs	r1, r3
   80b08:	e00e      	b.n	80b28 <__adddf3+0xd0>
   80b0a:	f1a5 0520 	sub.w	r5, r5, #32
   80b0e:	f10e 0e20 	add.w	lr, lr, #32
   80b12:	2a01      	cmp	r2, #1
   80b14:	fa03 fc0e 	lsl.w	ip, r3, lr
   80b18:	bf28      	it	cs
   80b1a:	f04c 0c02 	orrcs.w	ip, ip, #2
   80b1e:	fa43 f305 	asr.w	r3, r3, r5
   80b22:	18c0      	adds	r0, r0, r3
   80b24:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   80b28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80b2c:	d507      	bpl.n	80b3e <__adddf3+0xe6>
   80b2e:	f04f 0e00 	mov.w	lr, #0
   80b32:	f1dc 0c00 	rsbs	ip, ip, #0
   80b36:	eb7e 0000 	sbcs.w	r0, lr, r0
   80b3a:	eb6e 0101 	sbc.w	r1, lr, r1
   80b3e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   80b42:	d31b      	bcc.n	80b7c <__adddf3+0x124>
   80b44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   80b48:	d30c      	bcc.n	80b64 <__adddf3+0x10c>
   80b4a:	0849      	lsrs	r1, r1, #1
   80b4c:	ea5f 0030 	movs.w	r0, r0, rrx
   80b50:	ea4f 0c3c 	mov.w	ip, ip, rrx
   80b54:	f104 0401 	add.w	r4, r4, #1
   80b58:	ea4f 5244 	mov.w	r2, r4, lsl #21
   80b5c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   80b60:	f080 809a 	bcs.w	80c98 <__adddf3+0x240>
   80b64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   80b68:	bf08      	it	eq
   80b6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   80b6e:	f150 0000 	adcs.w	r0, r0, #0
   80b72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80b76:	ea41 0105 	orr.w	r1, r1, r5
   80b7a:	bd30      	pop	{r4, r5, pc}
   80b7c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   80b80:	4140      	adcs	r0, r0
   80b82:	eb41 0101 	adc.w	r1, r1, r1
   80b86:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80b8a:	f1a4 0401 	sub.w	r4, r4, #1
   80b8e:	d1e9      	bne.n	80b64 <__adddf3+0x10c>
   80b90:	f091 0f00 	teq	r1, #0
   80b94:	bf04      	itt	eq
   80b96:	4601      	moveq	r1, r0
   80b98:	2000      	moveq	r0, #0
   80b9a:	fab1 f381 	clz	r3, r1
   80b9e:	bf08      	it	eq
   80ba0:	3320      	addeq	r3, #32
   80ba2:	f1a3 030b 	sub.w	r3, r3, #11
   80ba6:	f1b3 0220 	subs.w	r2, r3, #32
   80baa:	da0c      	bge.n	80bc6 <__adddf3+0x16e>
   80bac:	320c      	adds	r2, #12
   80bae:	dd08      	ble.n	80bc2 <__adddf3+0x16a>
   80bb0:	f102 0c14 	add.w	ip, r2, #20
   80bb4:	f1c2 020c 	rsb	r2, r2, #12
   80bb8:	fa01 f00c 	lsl.w	r0, r1, ip
   80bbc:	fa21 f102 	lsr.w	r1, r1, r2
   80bc0:	e00c      	b.n	80bdc <__adddf3+0x184>
   80bc2:	f102 0214 	add.w	r2, r2, #20
   80bc6:	bfd8      	it	le
   80bc8:	f1c2 0c20 	rsble	ip, r2, #32
   80bcc:	fa01 f102 	lsl.w	r1, r1, r2
   80bd0:	fa20 fc0c 	lsr.w	ip, r0, ip
   80bd4:	bfdc      	itt	le
   80bd6:	ea41 010c 	orrle.w	r1, r1, ip
   80bda:	4090      	lslle	r0, r2
   80bdc:	1ae4      	subs	r4, r4, r3
   80bde:	bfa2      	ittt	ge
   80be0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   80be4:	4329      	orrge	r1, r5
   80be6:	bd30      	popge	{r4, r5, pc}
   80be8:	ea6f 0404 	mvn.w	r4, r4
   80bec:	3c1f      	subs	r4, #31
   80bee:	da1c      	bge.n	80c2a <__adddf3+0x1d2>
   80bf0:	340c      	adds	r4, #12
   80bf2:	dc0e      	bgt.n	80c12 <__adddf3+0x1ba>
   80bf4:	f104 0414 	add.w	r4, r4, #20
   80bf8:	f1c4 0220 	rsb	r2, r4, #32
   80bfc:	fa20 f004 	lsr.w	r0, r0, r4
   80c00:	fa01 f302 	lsl.w	r3, r1, r2
   80c04:	ea40 0003 	orr.w	r0, r0, r3
   80c08:	fa21 f304 	lsr.w	r3, r1, r4
   80c0c:	ea45 0103 	orr.w	r1, r5, r3
   80c10:	bd30      	pop	{r4, r5, pc}
   80c12:	f1c4 040c 	rsb	r4, r4, #12
   80c16:	f1c4 0220 	rsb	r2, r4, #32
   80c1a:	fa20 f002 	lsr.w	r0, r0, r2
   80c1e:	fa01 f304 	lsl.w	r3, r1, r4
   80c22:	ea40 0003 	orr.w	r0, r0, r3
   80c26:	4629      	mov	r1, r5
   80c28:	bd30      	pop	{r4, r5, pc}
   80c2a:	fa21 f004 	lsr.w	r0, r1, r4
   80c2e:	4629      	mov	r1, r5
   80c30:	bd30      	pop	{r4, r5, pc}
   80c32:	f094 0f00 	teq	r4, #0
   80c36:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   80c3a:	bf06      	itte	eq
   80c3c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   80c40:	3401      	addeq	r4, #1
   80c42:	3d01      	subne	r5, #1
   80c44:	e74e      	b.n	80ae4 <__adddf3+0x8c>
   80c46:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80c4a:	bf18      	it	ne
   80c4c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   80c50:	d029      	beq.n	80ca6 <__adddf3+0x24e>
   80c52:	ea94 0f05 	teq	r4, r5
   80c56:	bf08      	it	eq
   80c58:	ea90 0f02 	teqeq	r0, r2
   80c5c:	d005      	beq.n	80c6a <__adddf3+0x212>
   80c5e:	ea54 0c00 	orrs.w	ip, r4, r0
   80c62:	bf04      	itt	eq
   80c64:	4619      	moveq	r1, r3
   80c66:	4610      	moveq	r0, r2
   80c68:	bd30      	pop	{r4, r5, pc}
   80c6a:	ea91 0f03 	teq	r1, r3
   80c6e:	bf1e      	ittt	ne
   80c70:	2100      	movne	r1, #0
   80c72:	2000      	movne	r0, #0
   80c74:	bd30      	popne	{r4, r5, pc}
   80c76:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   80c7a:	d105      	bne.n	80c88 <__adddf3+0x230>
   80c7c:	0040      	lsls	r0, r0, #1
   80c7e:	4149      	adcs	r1, r1
   80c80:	bf28      	it	cs
   80c82:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   80c86:	bd30      	pop	{r4, r5, pc}
   80c88:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   80c8c:	bf3c      	itt	cc
   80c8e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   80c92:	bd30      	popcc	{r4, r5, pc}
   80c94:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80c98:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   80c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   80ca0:	f04f 0000 	mov.w	r0, #0
   80ca4:	bd30      	pop	{r4, r5, pc}
   80ca6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   80caa:	bf1a      	itte	ne
   80cac:	4619      	movne	r1, r3
   80cae:	4610      	movne	r0, r2
   80cb0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   80cb4:	bf1c      	itt	ne
   80cb6:	460b      	movne	r3, r1
   80cb8:	4602      	movne	r2, r0
   80cba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   80cbe:	bf06      	itte	eq
   80cc0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   80cc4:	ea91 0f03 	teqeq	r1, r3
   80cc8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   80ccc:	bd30      	pop	{r4, r5, pc}
   80cce:	bf00      	nop

00080cd0 <__aeabi_ui2d>:
   80cd0:	f090 0f00 	teq	r0, #0
   80cd4:	bf04      	itt	eq
   80cd6:	2100      	moveq	r1, #0
   80cd8:	4770      	bxeq	lr
   80cda:	b530      	push	{r4, r5, lr}
   80cdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80ce0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80ce4:	f04f 0500 	mov.w	r5, #0
   80ce8:	f04f 0100 	mov.w	r1, #0
   80cec:	e750      	b.n	80b90 <__adddf3+0x138>
   80cee:	bf00      	nop

00080cf0 <__aeabi_i2d>:
   80cf0:	f090 0f00 	teq	r0, #0
   80cf4:	bf04      	itt	eq
   80cf6:	2100      	moveq	r1, #0
   80cf8:	4770      	bxeq	lr
   80cfa:	b530      	push	{r4, r5, lr}
   80cfc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80d00:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80d04:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   80d08:	bf48      	it	mi
   80d0a:	4240      	negmi	r0, r0
   80d0c:	f04f 0100 	mov.w	r1, #0
   80d10:	e73e      	b.n	80b90 <__adddf3+0x138>
   80d12:	bf00      	nop

00080d14 <__aeabi_f2d>:
   80d14:	0042      	lsls	r2, r0, #1
   80d16:	ea4f 01e2 	mov.w	r1, r2, asr #3
   80d1a:	ea4f 0131 	mov.w	r1, r1, rrx
   80d1e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   80d22:	bf1f      	itttt	ne
   80d24:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   80d28:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80d2c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   80d30:	4770      	bxne	lr
   80d32:	f092 0f00 	teq	r2, #0
   80d36:	bf14      	ite	ne
   80d38:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   80d3c:	4770      	bxeq	lr
   80d3e:	b530      	push	{r4, r5, lr}
   80d40:	f44f 7460 	mov.w	r4, #896	; 0x380
   80d44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   80d48:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80d4c:	e720      	b.n	80b90 <__adddf3+0x138>
   80d4e:	bf00      	nop

00080d50 <__aeabi_ul2d>:
   80d50:	ea50 0201 	orrs.w	r2, r0, r1
   80d54:	bf08      	it	eq
   80d56:	4770      	bxeq	lr
   80d58:	b530      	push	{r4, r5, lr}
   80d5a:	f04f 0500 	mov.w	r5, #0
   80d5e:	e00a      	b.n	80d76 <__aeabi_l2d+0x16>

00080d60 <__aeabi_l2d>:
   80d60:	ea50 0201 	orrs.w	r2, r0, r1
   80d64:	bf08      	it	eq
   80d66:	4770      	bxeq	lr
   80d68:	b530      	push	{r4, r5, lr}
   80d6a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   80d6e:	d502      	bpl.n	80d76 <__aeabi_l2d+0x16>
   80d70:	4240      	negs	r0, r0
   80d72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80d76:	f44f 6480 	mov.w	r4, #1024	; 0x400
   80d7a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   80d7e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   80d82:	f43f aedc 	beq.w	80b3e <__adddf3+0xe6>
   80d86:	f04f 0203 	mov.w	r2, #3
   80d8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80d8e:	bf18      	it	ne
   80d90:	3203      	addne	r2, #3
   80d92:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   80d96:	bf18      	it	ne
   80d98:	3203      	addne	r2, #3
   80d9a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   80d9e:	f1c2 0320 	rsb	r3, r2, #32
   80da2:	fa00 fc03 	lsl.w	ip, r0, r3
   80da6:	fa20 f002 	lsr.w	r0, r0, r2
   80daa:	fa01 fe03 	lsl.w	lr, r1, r3
   80dae:	ea40 000e 	orr.w	r0, r0, lr
   80db2:	fa21 f102 	lsr.w	r1, r1, r2
   80db6:	4414      	add	r4, r2
   80db8:	e6c1      	b.n	80b3e <__adddf3+0xe6>
   80dba:	bf00      	nop

00080dbc <__aeabi_dmul>:
   80dbc:	b570      	push	{r4, r5, r6, lr}
   80dbe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   80dc2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   80dc6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   80dca:	bf1d      	ittte	ne
   80dcc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   80dd0:	ea94 0f0c 	teqne	r4, ip
   80dd4:	ea95 0f0c 	teqne	r5, ip
   80dd8:	f000 f8de 	bleq	80f98 <__aeabi_dmul+0x1dc>
   80ddc:	442c      	add	r4, r5
   80dde:	ea81 0603 	eor.w	r6, r1, r3
   80de2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   80de6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   80dea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   80dee:	bf18      	it	ne
   80df0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   80df4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   80dfc:	d038      	beq.n	80e70 <__aeabi_dmul+0xb4>
   80dfe:	fba0 ce02 	umull	ip, lr, r0, r2
   80e02:	f04f 0500 	mov.w	r5, #0
   80e06:	fbe1 e502 	umlal	lr, r5, r1, r2
   80e0a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   80e0e:	fbe0 e503 	umlal	lr, r5, r0, r3
   80e12:	f04f 0600 	mov.w	r6, #0
   80e16:	fbe1 5603 	umlal	r5, r6, r1, r3
   80e1a:	f09c 0f00 	teq	ip, #0
   80e1e:	bf18      	it	ne
   80e20:	f04e 0e01 	orrne.w	lr, lr, #1
   80e24:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   80e28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   80e2c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   80e30:	d204      	bcs.n	80e3c <__aeabi_dmul+0x80>
   80e32:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   80e36:	416d      	adcs	r5, r5
   80e38:	eb46 0606 	adc.w	r6, r6, r6
   80e3c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   80e40:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   80e44:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   80e48:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   80e4c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   80e50:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   80e54:	bf88      	it	hi
   80e56:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   80e5a:	d81e      	bhi.n	80e9a <__aeabi_dmul+0xde>
   80e5c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   80e60:	bf08      	it	eq
   80e62:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   80e66:	f150 0000 	adcs.w	r0, r0, #0
   80e6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   80e6e:	bd70      	pop	{r4, r5, r6, pc}
   80e70:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   80e74:	ea46 0101 	orr.w	r1, r6, r1
   80e78:	ea40 0002 	orr.w	r0, r0, r2
   80e7c:	ea81 0103 	eor.w	r1, r1, r3
   80e80:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   80e84:	bfc2      	ittt	gt
   80e86:	ebd4 050c 	rsbsgt	r5, r4, ip
   80e8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   80e8e:	bd70      	popgt	{r4, r5, r6, pc}
   80e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   80e94:	f04f 0e00 	mov.w	lr, #0
   80e98:	3c01      	subs	r4, #1
   80e9a:	f300 80ab 	bgt.w	80ff4 <__aeabi_dmul+0x238>
   80e9e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   80ea2:	bfde      	ittt	le
   80ea4:	2000      	movle	r0, #0
   80ea6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   80eaa:	bd70      	pople	{r4, r5, r6, pc}
   80eac:	f1c4 0400 	rsb	r4, r4, #0
   80eb0:	3c20      	subs	r4, #32
   80eb2:	da35      	bge.n	80f20 <__aeabi_dmul+0x164>
   80eb4:	340c      	adds	r4, #12
   80eb6:	dc1b      	bgt.n	80ef0 <__aeabi_dmul+0x134>
   80eb8:	f104 0414 	add.w	r4, r4, #20
   80ebc:	f1c4 0520 	rsb	r5, r4, #32
   80ec0:	fa00 f305 	lsl.w	r3, r0, r5
   80ec4:	fa20 f004 	lsr.w	r0, r0, r4
   80ec8:	fa01 f205 	lsl.w	r2, r1, r5
   80ecc:	ea40 0002 	orr.w	r0, r0, r2
   80ed0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   80ed4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   80ed8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80edc:	fa21 f604 	lsr.w	r6, r1, r4
   80ee0:	eb42 0106 	adc.w	r1, r2, r6
   80ee4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80ee8:	bf08      	it	eq
   80eea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80eee:	bd70      	pop	{r4, r5, r6, pc}
   80ef0:	f1c4 040c 	rsb	r4, r4, #12
   80ef4:	f1c4 0520 	rsb	r5, r4, #32
   80ef8:	fa00 f304 	lsl.w	r3, r0, r4
   80efc:	fa20 f005 	lsr.w	r0, r0, r5
   80f00:	fa01 f204 	lsl.w	r2, r1, r4
   80f04:	ea40 0002 	orr.w	r0, r0, r2
   80f08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f0c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   80f10:	f141 0100 	adc.w	r1, r1, #0
   80f14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f18:	bf08      	it	eq
   80f1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f1e:	bd70      	pop	{r4, r5, r6, pc}
   80f20:	f1c4 0520 	rsb	r5, r4, #32
   80f24:	fa00 f205 	lsl.w	r2, r0, r5
   80f28:	ea4e 0e02 	orr.w	lr, lr, r2
   80f2c:	fa20 f304 	lsr.w	r3, r0, r4
   80f30:	fa01 f205 	lsl.w	r2, r1, r5
   80f34:	ea43 0302 	orr.w	r3, r3, r2
   80f38:	fa21 f004 	lsr.w	r0, r1, r4
   80f3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80f40:	fa21 f204 	lsr.w	r2, r1, r4
   80f44:	ea20 0002 	bic.w	r0, r0, r2
   80f48:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   80f4c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   80f50:	bf08      	it	eq
   80f52:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   80f56:	bd70      	pop	{r4, r5, r6, pc}
   80f58:	f094 0f00 	teq	r4, #0
   80f5c:	d10f      	bne.n	80f7e <__aeabi_dmul+0x1c2>
   80f5e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   80f62:	0040      	lsls	r0, r0, #1
   80f64:	eb41 0101 	adc.w	r1, r1, r1
   80f68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   80f6c:	bf08      	it	eq
   80f6e:	3c01      	subeq	r4, #1
   80f70:	d0f7      	beq.n	80f62 <__aeabi_dmul+0x1a6>
   80f72:	ea41 0106 	orr.w	r1, r1, r6
   80f76:	f095 0f00 	teq	r5, #0
   80f7a:	bf18      	it	ne
   80f7c:	4770      	bxne	lr
   80f7e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   80f82:	0052      	lsls	r2, r2, #1
   80f84:	eb43 0303 	adc.w	r3, r3, r3
   80f88:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   80f8c:	bf08      	it	eq
   80f8e:	3d01      	subeq	r5, #1
   80f90:	d0f7      	beq.n	80f82 <__aeabi_dmul+0x1c6>
   80f92:	ea43 0306 	orr.w	r3, r3, r6
   80f96:	4770      	bx	lr
   80f98:	ea94 0f0c 	teq	r4, ip
   80f9c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   80fa0:	bf18      	it	ne
   80fa2:	ea95 0f0c 	teqne	r5, ip
   80fa6:	d00c      	beq.n	80fc2 <__aeabi_dmul+0x206>
   80fa8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80fac:	bf18      	it	ne
   80fae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80fb2:	d1d1      	bne.n	80f58 <__aeabi_dmul+0x19c>
   80fb4:	ea81 0103 	eor.w	r1, r1, r3
   80fb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80fbc:	f04f 0000 	mov.w	r0, #0
   80fc0:	bd70      	pop	{r4, r5, r6, pc}
   80fc2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   80fc6:	bf06      	itte	eq
   80fc8:	4610      	moveq	r0, r2
   80fca:	4619      	moveq	r1, r3
   80fcc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   80fd0:	d019      	beq.n	81006 <__aeabi_dmul+0x24a>
   80fd2:	ea94 0f0c 	teq	r4, ip
   80fd6:	d102      	bne.n	80fde <__aeabi_dmul+0x222>
   80fd8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   80fdc:	d113      	bne.n	81006 <__aeabi_dmul+0x24a>
   80fde:	ea95 0f0c 	teq	r5, ip
   80fe2:	d105      	bne.n	80ff0 <__aeabi_dmul+0x234>
   80fe4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   80fe8:	bf1c      	itt	ne
   80fea:	4610      	movne	r0, r2
   80fec:	4619      	movne	r1, r3
   80fee:	d10a      	bne.n	81006 <__aeabi_dmul+0x24a>
   80ff0:	ea81 0103 	eor.w	r1, r1, r3
   80ff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   80ff8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   80ffc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81000:	f04f 0000 	mov.w	r0, #0
   81004:	bd70      	pop	{r4, r5, r6, pc}
   81006:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8100a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8100e:	bd70      	pop	{r4, r5, r6, pc}

00081010 <__aeabi_ddiv>:
   81010:	b570      	push	{r4, r5, r6, lr}
   81012:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81016:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8101a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8101e:	bf1d      	ittte	ne
   81020:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81024:	ea94 0f0c 	teqne	r4, ip
   81028:	ea95 0f0c 	teqne	r5, ip
   8102c:	f000 f8a7 	bleq	8117e <__aeabi_ddiv+0x16e>
   81030:	eba4 0405 	sub.w	r4, r4, r5
   81034:	ea81 0e03 	eor.w	lr, r1, r3
   81038:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8103c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81040:	f000 8088 	beq.w	81154 <__aeabi_ddiv+0x144>
   81044:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81048:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8104c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81050:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81054:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81058:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8105c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81060:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81064:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81068:	429d      	cmp	r5, r3
   8106a:	bf08      	it	eq
   8106c:	4296      	cmpeq	r6, r2
   8106e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81072:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81076:	d202      	bcs.n	8107e <__aeabi_ddiv+0x6e>
   81078:	085b      	lsrs	r3, r3, #1
   8107a:	ea4f 0232 	mov.w	r2, r2, rrx
   8107e:	1ab6      	subs	r6, r6, r2
   81080:	eb65 0503 	sbc.w	r5, r5, r3
   81084:	085b      	lsrs	r3, r3, #1
   81086:	ea4f 0232 	mov.w	r2, r2, rrx
   8108a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8108e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81092:	ebb6 0e02 	subs.w	lr, r6, r2
   81096:	eb75 0e03 	sbcs.w	lr, r5, r3
   8109a:	bf22      	ittt	cs
   8109c:	1ab6      	subcs	r6, r6, r2
   8109e:	4675      	movcs	r5, lr
   810a0:	ea40 000c 	orrcs.w	r0, r0, ip
   810a4:	085b      	lsrs	r3, r3, #1
   810a6:	ea4f 0232 	mov.w	r2, r2, rrx
   810aa:	ebb6 0e02 	subs.w	lr, r6, r2
   810ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   810b2:	bf22      	ittt	cs
   810b4:	1ab6      	subcs	r6, r6, r2
   810b6:	4675      	movcs	r5, lr
   810b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   810bc:	085b      	lsrs	r3, r3, #1
   810be:	ea4f 0232 	mov.w	r2, r2, rrx
   810c2:	ebb6 0e02 	subs.w	lr, r6, r2
   810c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   810ca:	bf22      	ittt	cs
   810cc:	1ab6      	subcs	r6, r6, r2
   810ce:	4675      	movcs	r5, lr
   810d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   810d4:	085b      	lsrs	r3, r3, #1
   810d6:	ea4f 0232 	mov.w	r2, r2, rrx
   810da:	ebb6 0e02 	subs.w	lr, r6, r2
   810de:	eb75 0e03 	sbcs.w	lr, r5, r3
   810e2:	bf22      	ittt	cs
   810e4:	1ab6      	subcs	r6, r6, r2
   810e6:	4675      	movcs	r5, lr
   810e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   810ec:	ea55 0e06 	orrs.w	lr, r5, r6
   810f0:	d018      	beq.n	81124 <__aeabi_ddiv+0x114>
   810f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   810f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   810fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   810fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81102:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81106:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8110a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8110e:	d1c0      	bne.n	81092 <__aeabi_ddiv+0x82>
   81110:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81114:	d10b      	bne.n	8112e <__aeabi_ddiv+0x11e>
   81116:	ea41 0100 	orr.w	r1, r1, r0
   8111a:	f04f 0000 	mov.w	r0, #0
   8111e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81122:	e7b6      	b.n	81092 <__aeabi_ddiv+0x82>
   81124:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81128:	bf04      	itt	eq
   8112a:	4301      	orreq	r1, r0
   8112c:	2000      	moveq	r0, #0
   8112e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81132:	bf88      	it	hi
   81134:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81138:	f63f aeaf 	bhi.w	80e9a <__aeabi_dmul+0xde>
   8113c:	ebb5 0c03 	subs.w	ip, r5, r3
   81140:	bf04      	itt	eq
   81142:	ebb6 0c02 	subseq.w	ip, r6, r2
   81146:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8114a:	f150 0000 	adcs.w	r0, r0, #0
   8114e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81152:	bd70      	pop	{r4, r5, r6, pc}
   81154:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81158:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8115c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81160:	bfc2      	ittt	gt
   81162:	ebd4 050c 	rsbsgt	r5, r4, ip
   81166:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8116a:	bd70      	popgt	{r4, r5, r6, pc}
   8116c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81170:	f04f 0e00 	mov.w	lr, #0
   81174:	3c01      	subs	r4, #1
   81176:	e690      	b.n	80e9a <__aeabi_dmul+0xde>
   81178:	ea45 0e06 	orr.w	lr, r5, r6
   8117c:	e68d      	b.n	80e9a <__aeabi_dmul+0xde>
   8117e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81182:	ea94 0f0c 	teq	r4, ip
   81186:	bf08      	it	eq
   81188:	ea95 0f0c 	teqeq	r5, ip
   8118c:	f43f af3b 	beq.w	81006 <__aeabi_dmul+0x24a>
   81190:	ea94 0f0c 	teq	r4, ip
   81194:	d10a      	bne.n	811ac <__aeabi_ddiv+0x19c>
   81196:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8119a:	f47f af34 	bne.w	81006 <__aeabi_dmul+0x24a>
   8119e:	ea95 0f0c 	teq	r5, ip
   811a2:	f47f af25 	bne.w	80ff0 <__aeabi_dmul+0x234>
   811a6:	4610      	mov	r0, r2
   811a8:	4619      	mov	r1, r3
   811aa:	e72c      	b.n	81006 <__aeabi_dmul+0x24a>
   811ac:	ea95 0f0c 	teq	r5, ip
   811b0:	d106      	bne.n	811c0 <__aeabi_ddiv+0x1b0>
   811b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   811b6:	f43f aefd 	beq.w	80fb4 <__aeabi_dmul+0x1f8>
   811ba:	4610      	mov	r0, r2
   811bc:	4619      	mov	r1, r3
   811be:	e722      	b.n	81006 <__aeabi_dmul+0x24a>
   811c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   811c4:	bf18      	it	ne
   811c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   811ca:	f47f aec5 	bne.w	80f58 <__aeabi_dmul+0x19c>
   811ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   811d2:	f47f af0d 	bne.w	80ff0 <__aeabi_dmul+0x234>
   811d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   811da:	f47f aeeb 	bne.w	80fb4 <__aeabi_dmul+0x1f8>
   811de:	e712      	b.n	81006 <__aeabi_dmul+0x24a>

000811e0 <__aeabi_d2f>:
   811e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   811e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   811e8:	bf24      	itt	cs
   811ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   811ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   811f2:	d90d      	bls.n	81210 <__aeabi_d2f+0x30>
   811f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   811f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   811fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   81200:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   81204:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   81208:	bf08      	it	eq
   8120a:	f020 0001 	biceq.w	r0, r0, #1
   8120e:	4770      	bx	lr
   81210:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   81214:	d121      	bne.n	8125a <__aeabi_d2f+0x7a>
   81216:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8121a:	bfbc      	itt	lt
   8121c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   81220:	4770      	bxlt	lr
   81222:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81226:	ea4f 5252 	mov.w	r2, r2, lsr #21
   8122a:	f1c2 0218 	rsb	r2, r2, #24
   8122e:	f1c2 0c20 	rsb	ip, r2, #32
   81232:	fa10 f30c 	lsls.w	r3, r0, ip
   81236:	fa20 f002 	lsr.w	r0, r0, r2
   8123a:	bf18      	it	ne
   8123c:	f040 0001 	orrne.w	r0, r0, #1
   81240:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81244:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   81248:	fa03 fc0c 	lsl.w	ip, r3, ip
   8124c:	ea40 000c 	orr.w	r0, r0, ip
   81250:	fa23 f302 	lsr.w	r3, r3, r2
   81254:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81258:	e7cc      	b.n	811f4 <__aeabi_d2f+0x14>
   8125a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   8125e:	d107      	bne.n	81270 <__aeabi_d2f+0x90>
   81260:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   81264:	bf1e      	ittt	ne
   81266:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   8126a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   8126e:	4770      	bxne	lr
   81270:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   81274:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81278:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8127c:	4770      	bx	lr
   8127e:	bf00      	nop

00081280 <__aeabi_fmul>:
   81280:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81284:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81288:	bf1e      	ittt	ne
   8128a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8128e:	ea92 0f0c 	teqne	r2, ip
   81292:	ea93 0f0c 	teqne	r3, ip
   81296:	d06f      	beq.n	81378 <__aeabi_fmul+0xf8>
   81298:	441a      	add	r2, r3
   8129a:	ea80 0c01 	eor.w	ip, r0, r1
   8129e:	0240      	lsls	r0, r0, #9
   812a0:	bf18      	it	ne
   812a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   812a6:	d01e      	beq.n	812e6 <__aeabi_fmul+0x66>
   812a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   812ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   812b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   812b4:	fba0 3101 	umull	r3, r1, r0, r1
   812b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   812bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   812c0:	bf3e      	ittt	cc
   812c2:	0049      	lslcc	r1, r1, #1
   812c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   812c8:	005b      	lslcc	r3, r3, #1
   812ca:	ea40 0001 	orr.w	r0, r0, r1
   812ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   812d2:	2afd      	cmp	r2, #253	; 0xfd
   812d4:	d81d      	bhi.n	81312 <__aeabi_fmul+0x92>
   812d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   812da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   812de:	bf08      	it	eq
   812e0:	f020 0001 	biceq.w	r0, r0, #1
   812e4:	4770      	bx	lr
   812e6:	f090 0f00 	teq	r0, #0
   812ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   812ee:	bf08      	it	eq
   812f0:	0249      	lsleq	r1, r1, #9
   812f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   812f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   812fa:	3a7f      	subs	r2, #127	; 0x7f
   812fc:	bfc2      	ittt	gt
   812fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81302:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81306:	4770      	bxgt	lr
   81308:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8130c:	f04f 0300 	mov.w	r3, #0
   81310:	3a01      	subs	r2, #1
   81312:	dc5d      	bgt.n	813d0 <__aeabi_fmul+0x150>
   81314:	f112 0f19 	cmn.w	r2, #25
   81318:	bfdc      	itt	le
   8131a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8131e:	4770      	bxle	lr
   81320:	f1c2 0200 	rsb	r2, r2, #0
   81324:	0041      	lsls	r1, r0, #1
   81326:	fa21 f102 	lsr.w	r1, r1, r2
   8132a:	f1c2 0220 	rsb	r2, r2, #32
   8132e:	fa00 fc02 	lsl.w	ip, r0, r2
   81332:	ea5f 0031 	movs.w	r0, r1, rrx
   81336:	f140 0000 	adc.w	r0, r0, #0
   8133a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8133e:	bf08      	it	eq
   81340:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81344:	4770      	bx	lr
   81346:	f092 0f00 	teq	r2, #0
   8134a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8134e:	bf02      	ittt	eq
   81350:	0040      	lsleq	r0, r0, #1
   81352:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81356:	3a01      	subeq	r2, #1
   81358:	d0f9      	beq.n	8134e <__aeabi_fmul+0xce>
   8135a:	ea40 000c 	orr.w	r0, r0, ip
   8135e:	f093 0f00 	teq	r3, #0
   81362:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81366:	bf02      	ittt	eq
   81368:	0049      	lsleq	r1, r1, #1
   8136a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8136e:	3b01      	subeq	r3, #1
   81370:	d0f9      	beq.n	81366 <__aeabi_fmul+0xe6>
   81372:	ea41 010c 	orr.w	r1, r1, ip
   81376:	e78f      	b.n	81298 <__aeabi_fmul+0x18>
   81378:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8137c:	ea92 0f0c 	teq	r2, ip
   81380:	bf18      	it	ne
   81382:	ea93 0f0c 	teqne	r3, ip
   81386:	d00a      	beq.n	8139e <__aeabi_fmul+0x11e>
   81388:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8138c:	bf18      	it	ne
   8138e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81392:	d1d8      	bne.n	81346 <__aeabi_fmul+0xc6>
   81394:	ea80 0001 	eor.w	r0, r0, r1
   81398:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8139c:	4770      	bx	lr
   8139e:	f090 0f00 	teq	r0, #0
   813a2:	bf17      	itett	ne
   813a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   813a8:	4608      	moveq	r0, r1
   813aa:	f091 0f00 	teqne	r1, #0
   813ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   813b2:	d014      	beq.n	813de <__aeabi_fmul+0x15e>
   813b4:	ea92 0f0c 	teq	r2, ip
   813b8:	d101      	bne.n	813be <__aeabi_fmul+0x13e>
   813ba:	0242      	lsls	r2, r0, #9
   813bc:	d10f      	bne.n	813de <__aeabi_fmul+0x15e>
   813be:	ea93 0f0c 	teq	r3, ip
   813c2:	d103      	bne.n	813cc <__aeabi_fmul+0x14c>
   813c4:	024b      	lsls	r3, r1, #9
   813c6:	bf18      	it	ne
   813c8:	4608      	movne	r0, r1
   813ca:	d108      	bne.n	813de <__aeabi_fmul+0x15e>
   813cc:	ea80 0001 	eor.w	r0, r0, r1
   813d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   813d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   813d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   813dc:	4770      	bx	lr
   813de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   813e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   813e6:	4770      	bx	lr

000813e8 <__aeabi_fdiv>:
   813e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   813f0:	bf1e      	ittt	ne
   813f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   813f6:	ea92 0f0c 	teqne	r2, ip
   813fa:	ea93 0f0c 	teqne	r3, ip
   813fe:	d069      	beq.n	814d4 <__aeabi_fdiv+0xec>
   81400:	eba2 0203 	sub.w	r2, r2, r3
   81404:	ea80 0c01 	eor.w	ip, r0, r1
   81408:	0249      	lsls	r1, r1, #9
   8140a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8140e:	d037      	beq.n	81480 <__aeabi_fdiv+0x98>
   81410:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81414:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81418:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   8141c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81420:	428b      	cmp	r3, r1
   81422:	bf38      	it	cc
   81424:	005b      	lslcc	r3, r3, #1
   81426:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8142a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8142e:	428b      	cmp	r3, r1
   81430:	bf24      	itt	cs
   81432:	1a5b      	subcs	r3, r3, r1
   81434:	ea40 000c 	orrcs.w	r0, r0, ip
   81438:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8143c:	bf24      	itt	cs
   8143e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81442:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81446:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8144a:	bf24      	itt	cs
   8144c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81450:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81454:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81458:	bf24      	itt	cs
   8145a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8145e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81462:	011b      	lsls	r3, r3, #4
   81464:	bf18      	it	ne
   81466:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8146a:	d1e0      	bne.n	8142e <__aeabi_fdiv+0x46>
   8146c:	2afd      	cmp	r2, #253	; 0xfd
   8146e:	f63f af50 	bhi.w	81312 <__aeabi_fmul+0x92>
   81472:	428b      	cmp	r3, r1
   81474:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81478:	bf08      	it	eq
   8147a:	f020 0001 	biceq.w	r0, r0, #1
   8147e:	4770      	bx	lr
   81480:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81484:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81488:	327f      	adds	r2, #127	; 0x7f
   8148a:	bfc2      	ittt	gt
   8148c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81490:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81494:	4770      	bxgt	lr
   81496:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8149a:	f04f 0300 	mov.w	r3, #0
   8149e:	3a01      	subs	r2, #1
   814a0:	e737      	b.n	81312 <__aeabi_fmul+0x92>
   814a2:	f092 0f00 	teq	r2, #0
   814a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   814aa:	bf02      	ittt	eq
   814ac:	0040      	lsleq	r0, r0, #1
   814ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   814b2:	3a01      	subeq	r2, #1
   814b4:	d0f9      	beq.n	814aa <__aeabi_fdiv+0xc2>
   814b6:	ea40 000c 	orr.w	r0, r0, ip
   814ba:	f093 0f00 	teq	r3, #0
   814be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   814c2:	bf02      	ittt	eq
   814c4:	0049      	lsleq	r1, r1, #1
   814c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   814ca:	3b01      	subeq	r3, #1
   814cc:	d0f9      	beq.n	814c2 <__aeabi_fdiv+0xda>
   814ce:	ea41 010c 	orr.w	r1, r1, ip
   814d2:	e795      	b.n	81400 <__aeabi_fdiv+0x18>
   814d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   814d8:	ea92 0f0c 	teq	r2, ip
   814dc:	d108      	bne.n	814f0 <__aeabi_fdiv+0x108>
   814de:	0242      	lsls	r2, r0, #9
   814e0:	f47f af7d 	bne.w	813de <__aeabi_fmul+0x15e>
   814e4:	ea93 0f0c 	teq	r3, ip
   814e8:	f47f af70 	bne.w	813cc <__aeabi_fmul+0x14c>
   814ec:	4608      	mov	r0, r1
   814ee:	e776      	b.n	813de <__aeabi_fmul+0x15e>
   814f0:	ea93 0f0c 	teq	r3, ip
   814f4:	d104      	bne.n	81500 <__aeabi_fdiv+0x118>
   814f6:	024b      	lsls	r3, r1, #9
   814f8:	f43f af4c 	beq.w	81394 <__aeabi_fmul+0x114>
   814fc:	4608      	mov	r0, r1
   814fe:	e76e      	b.n	813de <__aeabi_fmul+0x15e>
   81500:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81504:	bf18      	it	ne
   81506:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8150a:	d1ca      	bne.n	814a2 <__aeabi_fdiv+0xba>
   8150c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81510:	f47f af5c 	bne.w	813cc <__aeabi_fmul+0x14c>
   81514:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81518:	f47f af3c 	bne.w	81394 <__aeabi_fmul+0x114>
   8151c:	e75f      	b.n	813de <__aeabi_fmul+0x15e>
   8151e:	bf00      	nop

00081520 <__aeabi_f2iz>:
   81520:	ea4f 0240 	mov.w	r2, r0, lsl #1
   81524:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81528:	d30f      	bcc.n	8154a <__aeabi_f2iz+0x2a>
   8152a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   8152e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81532:	d90d      	bls.n	81550 <__aeabi_f2iz+0x30>
   81534:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81538:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8153c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81540:	fa23 f002 	lsr.w	r0, r3, r2
   81544:	bf18      	it	ne
   81546:	4240      	negne	r0, r0
   81548:	4770      	bx	lr
   8154a:	f04f 0000 	mov.w	r0, #0
   8154e:	4770      	bx	lr
   81550:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81554:	d101      	bne.n	8155a <__aeabi_f2iz+0x3a>
   81556:	0242      	lsls	r2, r0, #9
   81558:	d105      	bne.n	81566 <__aeabi_f2iz+0x46>
   8155a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   8155e:	bf08      	it	eq
   81560:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81564:	4770      	bx	lr
   81566:	f04f 0000 	mov.w	r0, #0
   8156a:	4770      	bx	lr

0008156c <__libc_init_array>:
   8156c:	b570      	push	{r4, r5, r6, lr}
   8156e:	4e0f      	ldr	r6, [pc, #60]	; (815ac <__libc_init_array+0x40>)
   81570:	4d0f      	ldr	r5, [pc, #60]	; (815b0 <__libc_init_array+0x44>)
   81572:	1b76      	subs	r6, r6, r5
   81574:	10b6      	asrs	r6, r6, #2
   81576:	bf18      	it	ne
   81578:	2400      	movne	r4, #0
   8157a:	d005      	beq.n	81588 <__libc_init_array+0x1c>
   8157c:	3401      	adds	r4, #1
   8157e:	f855 3b04 	ldr.w	r3, [r5], #4
   81582:	4798      	blx	r3
   81584:	42a6      	cmp	r6, r4
   81586:	d1f9      	bne.n	8157c <__libc_init_array+0x10>
   81588:	4e0a      	ldr	r6, [pc, #40]	; (815b4 <__libc_init_array+0x48>)
   8158a:	4d0b      	ldr	r5, [pc, #44]	; (815b8 <__libc_init_array+0x4c>)
   8158c:	f000 f8da 	bl	81744 <_init>
   81590:	1b76      	subs	r6, r6, r5
   81592:	10b6      	asrs	r6, r6, #2
   81594:	bf18      	it	ne
   81596:	2400      	movne	r4, #0
   81598:	d006      	beq.n	815a8 <__libc_init_array+0x3c>
   8159a:	3401      	adds	r4, #1
   8159c:	f855 3b04 	ldr.w	r3, [r5], #4
   815a0:	4798      	blx	r3
   815a2:	42a6      	cmp	r6, r4
   815a4:	d1f9      	bne.n	8159a <__libc_init_array+0x2e>
   815a6:	bd70      	pop	{r4, r5, r6, pc}
   815a8:	bd70      	pop	{r4, r5, r6, pc}
   815aa:	bf00      	nop
   815ac:	00081750 	.word	0x00081750
   815b0:	00081750 	.word	0x00081750
   815b4:	00081758 	.word	0x00081758
   815b8:	00081750 	.word	0x00081750

000815bc <register_fini>:
   815bc:	4b02      	ldr	r3, [pc, #8]	; (815c8 <register_fini+0xc>)
   815be:	b113      	cbz	r3, 815c6 <register_fini+0xa>
   815c0:	4802      	ldr	r0, [pc, #8]	; (815cc <register_fini+0x10>)
   815c2:	f000 b805 	b.w	815d0 <atexit>
   815c6:	4770      	bx	lr
   815c8:	00000000 	.word	0x00000000
   815cc:	000815dd 	.word	0x000815dd

000815d0 <atexit>:
   815d0:	2300      	movs	r3, #0
   815d2:	4601      	mov	r1, r0
   815d4:	461a      	mov	r2, r3
   815d6:	4618      	mov	r0, r3
   815d8:	f000 b81e 	b.w	81618 <__register_exitproc>

000815dc <__libc_fini_array>:
   815dc:	b538      	push	{r3, r4, r5, lr}
   815de:	4c0a      	ldr	r4, [pc, #40]	; (81608 <__libc_fini_array+0x2c>)
   815e0:	4d0a      	ldr	r5, [pc, #40]	; (8160c <__libc_fini_array+0x30>)
   815e2:	1b64      	subs	r4, r4, r5
   815e4:	10a4      	asrs	r4, r4, #2
   815e6:	d00a      	beq.n	815fe <__libc_fini_array+0x22>
   815e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   815ec:	3b01      	subs	r3, #1
   815ee:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   815f2:	3c01      	subs	r4, #1
   815f4:	f855 3904 	ldr.w	r3, [r5], #-4
   815f8:	4798      	blx	r3
   815fa:	2c00      	cmp	r4, #0
   815fc:	d1f9      	bne.n	815f2 <__libc_fini_array+0x16>
   815fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   81602:	f000 b8a9 	b.w	81758 <_fini>
   81606:	bf00      	nop
   81608:	00081768 	.word	0x00081768
   8160c:	00081764 	.word	0x00081764

00081610 <__retarget_lock_acquire_recursive>:
   81610:	4770      	bx	lr
   81612:	bf00      	nop

00081614 <__retarget_lock_release_recursive>:
   81614:	4770      	bx	lr
   81616:	bf00      	nop

00081618 <__register_exitproc>:
   81618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8161c:	4d2c      	ldr	r5, [pc, #176]	; (816d0 <__register_exitproc+0xb8>)
   8161e:	4606      	mov	r6, r0
   81620:	6828      	ldr	r0, [r5, #0]
   81622:	4698      	mov	r8, r3
   81624:	460f      	mov	r7, r1
   81626:	4691      	mov	r9, r2
   81628:	f7ff fff2 	bl	81610 <__retarget_lock_acquire_recursive>
   8162c:	4b29      	ldr	r3, [pc, #164]	; (816d4 <__register_exitproc+0xbc>)
   8162e:	681c      	ldr	r4, [r3, #0]
   81630:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   81634:	2b00      	cmp	r3, #0
   81636:	d03e      	beq.n	816b6 <__register_exitproc+0x9e>
   81638:	685a      	ldr	r2, [r3, #4]
   8163a:	2a1f      	cmp	r2, #31
   8163c:	dc1c      	bgt.n	81678 <__register_exitproc+0x60>
   8163e:	f102 0e01 	add.w	lr, r2, #1
   81642:	b176      	cbz	r6, 81662 <__register_exitproc+0x4a>
   81644:	2101      	movs	r1, #1
   81646:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8164a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8164e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   81652:	4091      	lsls	r1, r2
   81654:	4308      	orrs	r0, r1
   81656:	2e02      	cmp	r6, #2
   81658:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8165c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   81660:	d023      	beq.n	816aa <__register_exitproc+0x92>
   81662:	3202      	adds	r2, #2
   81664:	f8c3 e004 	str.w	lr, [r3, #4]
   81668:	6828      	ldr	r0, [r5, #0]
   8166a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8166e:	f7ff ffd1 	bl	81614 <__retarget_lock_release_recursive>
   81672:	2000      	movs	r0, #0
   81674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81678:	4b17      	ldr	r3, [pc, #92]	; (816d8 <__register_exitproc+0xc0>)
   8167a:	b30b      	cbz	r3, 816c0 <__register_exitproc+0xa8>
   8167c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81680:	f3af 8000 	nop.w
   81684:	4603      	mov	r3, r0
   81686:	b1d8      	cbz	r0, 816c0 <__register_exitproc+0xa8>
   81688:	2000      	movs	r0, #0
   8168a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8168e:	f04f 0e01 	mov.w	lr, #1
   81692:	6058      	str	r0, [r3, #4]
   81694:	6019      	str	r1, [r3, #0]
   81696:	4602      	mov	r2, r0
   81698:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8169c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   816a0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   816a4:	2e00      	cmp	r6, #0
   816a6:	d0dc      	beq.n	81662 <__register_exitproc+0x4a>
   816a8:	e7cc      	b.n	81644 <__register_exitproc+0x2c>
   816aa:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   816ae:	4301      	orrs	r1, r0
   816b0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   816b4:	e7d5      	b.n	81662 <__register_exitproc+0x4a>
   816b6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   816ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   816be:	e7bb      	b.n	81638 <__register_exitproc+0x20>
   816c0:	6828      	ldr	r0, [r5, #0]
   816c2:	f7ff ffa7 	bl	81614 <__retarget_lock_release_recursive>
   816c6:	f04f 30ff 	mov.w	r0, #4294967295
   816ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   816ce:	bf00      	nop
   816d0:	20000430 	.word	0x20000430
   816d4:	00081740 	.word	0x00081740
   816d8:	00000000 	.word	0x00000000
   816dc:	304e4143 	.word	0x304e4143
   816e0:	73656d20 	.word	0x73656d20
   816e4:	65676173 	.word	0x65676173
   816e8:	72726120 	.word	0x72726120
   816ec:	64657669 	.word	0x64657669
   816f0:	206e6920 	.word	0x206e6920
   816f4:	2d6e6f6e 	.word	0x2d6e6f6e
   816f8:	64657375 	.word	0x64657375
   816fc:	69616d20 	.word	0x69616d20
   81700:	786f626c 	.word	0x786f626c
   81704:	00000d0a 	.word	0x00000d0a
   81708:	4f4f4353 	.word	0x4f4f4353
   8170c:	3a204552 	.word	0x3a204552
   81710:	20642520 	.word	0x20642520
   81714:	00000a0d 	.word	0x00000a0d
   81718:	6c756e28 	.word	0x6c756e28
   8171c:	0000296c 	.word	0x0000296c
   81720:	3a525245 	.word	0x3a525245
   81724:	52415520 	.word	0x52415520
   81728:	58522054 	.word	0x58522054
   8172c:	66756220 	.word	0x66756220
   81730:	20726566 	.word	0x20726566
   81734:	66207369 	.word	0x66207369
   81738:	0a6c6c75 	.word	0x0a6c6c75
   8173c:	0000000d 	.word	0x0000000d

00081740 <_global_impure_ptr>:
   81740:	20000008                                ... 

00081744 <_init>:
   81744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81746:	bf00      	nop
   81748:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8174a:	bc08      	pop	{r3}
   8174c:	469e      	mov	lr, r3
   8174e:	4770      	bx	lr

00081750 <__init_array_start>:
   81750:	000815bd 	.word	0x000815bd

00081754 <__frame_dummy_init_array_entry>:
   81754:	00080119                                ....

00081758 <_fini>:
   81758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8175a:	bf00      	nop
   8175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8175e:	bc08      	pop	{r3}
   81760:	469e      	mov	lr, r3
   81762:	4770      	bx	lr

00081764 <__fini_array_start>:
   81764:	000800f5 	.word	0x000800f5
